
BNO055_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d44  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08004ed8  08004ed8  00014ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f74  08004f74  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004f74  08004f74  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f74  08004f74  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f74  08004f74  00014f74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f78  08004f78  00014f78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004f7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          0000011c  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000012c  2000012c  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001493e  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ca1  00000000  00000000  0003497e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012b8  00000000  00000000  00036620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001200  00000000  00000000  000378d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004a02  00000000  00000000  00038ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000158f6  00000000  00000000  0003d4da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd7b4  00000000  00000000  00052dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00120584  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000546c  00000000  00000000  001205d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004ec0 	.word	0x08004ec0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	08004ec0 	.word	0x08004ec0

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_drsub>:
 80001e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e8:	e002      	b.n	80001f0 <__adddf3>
 80001ea:	bf00      	nop

080001ec <__aeabi_dsub>:
 80001ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f0 <__adddf3>:
 80001f0:	b530      	push	{r4, r5, lr}
 80001f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fa:	ea94 0f05 	teq	r4, r5
 80001fe:	bf08      	it	eq
 8000200:	ea90 0f02 	teqeq	r0, r2
 8000204:	bf1f      	itttt	ne
 8000206:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000212:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000216:	f000 80e2 	beq.w	80003de <__adddf3+0x1ee>
 800021a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000222:	bfb8      	it	lt
 8000224:	426d      	neglt	r5, r5
 8000226:	dd0c      	ble.n	8000242 <__adddf3+0x52>
 8000228:	442c      	add	r4, r5
 800022a:	ea80 0202 	eor.w	r2, r0, r2
 800022e:	ea81 0303 	eor.w	r3, r1, r3
 8000232:	ea82 0000 	eor.w	r0, r2, r0
 8000236:	ea83 0101 	eor.w	r1, r3, r1
 800023a:	ea80 0202 	eor.w	r2, r0, r2
 800023e:	ea81 0303 	eor.w	r3, r1, r3
 8000242:	2d36      	cmp	r5, #54	; 0x36
 8000244:	bf88      	it	hi
 8000246:	bd30      	pophi	{r4, r5, pc}
 8000248:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800024c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000250:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000254:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x70>
 800025a:	4240      	negs	r0, r0
 800025c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000260:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000264:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000268:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800026c:	d002      	beq.n	8000274 <__adddf3+0x84>
 800026e:	4252      	negs	r2, r2
 8000270:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000274:	ea94 0f05 	teq	r4, r5
 8000278:	f000 80a7 	beq.w	80003ca <__adddf3+0x1da>
 800027c:	f1a4 0401 	sub.w	r4, r4, #1
 8000280:	f1d5 0e20 	rsbs	lr, r5, #32
 8000284:	db0d      	blt.n	80002a2 <__adddf3+0xb2>
 8000286:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028a:	fa22 f205 	lsr.w	r2, r2, r5
 800028e:	1880      	adds	r0, r0, r2
 8000290:	f141 0100 	adc.w	r1, r1, #0
 8000294:	fa03 f20e 	lsl.w	r2, r3, lr
 8000298:	1880      	adds	r0, r0, r2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	4159      	adcs	r1, r3
 80002a0:	e00e      	b.n	80002c0 <__adddf3+0xd0>
 80002a2:	f1a5 0520 	sub.w	r5, r5, #32
 80002a6:	f10e 0e20 	add.w	lr, lr, #32
 80002aa:	2a01      	cmp	r2, #1
 80002ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b0:	bf28      	it	cs
 80002b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	18c0      	adds	r0, r0, r3
 80002bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c4:	d507      	bpl.n	80002d6 <__adddf3+0xe6>
 80002c6:	f04f 0e00 	mov.w	lr, #0
 80002ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002da:	d31b      	bcc.n	8000314 <__adddf3+0x124>
 80002dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e0:	d30c      	bcc.n	80002fc <__adddf3+0x10c>
 80002e2:	0849      	lsrs	r1, r1, #1
 80002e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002ec:	f104 0401 	add.w	r4, r4, #1
 80002f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f8:	f080 809a 	bcs.w	8000430 <__adddf3+0x240>
 80002fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000300:	bf08      	it	eq
 8000302:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000306:	f150 0000 	adcs.w	r0, r0, #0
 800030a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030e:	ea41 0105 	orr.w	r1, r1, r5
 8000312:	bd30      	pop	{r4, r5, pc}
 8000314:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000318:	4140      	adcs	r0, r0
 800031a:	eb41 0101 	adc.w	r1, r1, r1
 800031e:	3c01      	subs	r4, #1
 8000320:	bf28      	it	cs
 8000322:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000326:	d2e9      	bcs.n	80002fc <__adddf3+0x10c>
 8000328:	f091 0f00 	teq	r1, #0
 800032c:	bf04      	itt	eq
 800032e:	4601      	moveq	r1, r0
 8000330:	2000      	moveq	r0, #0
 8000332:	fab1 f381 	clz	r3, r1
 8000336:	bf08      	it	eq
 8000338:	3320      	addeq	r3, #32
 800033a:	f1a3 030b 	sub.w	r3, r3, #11
 800033e:	f1b3 0220 	subs.w	r2, r3, #32
 8000342:	da0c      	bge.n	800035e <__adddf3+0x16e>
 8000344:	320c      	adds	r2, #12
 8000346:	dd08      	ble.n	800035a <__adddf3+0x16a>
 8000348:	f102 0c14 	add.w	ip, r2, #20
 800034c:	f1c2 020c 	rsb	r2, r2, #12
 8000350:	fa01 f00c 	lsl.w	r0, r1, ip
 8000354:	fa21 f102 	lsr.w	r1, r1, r2
 8000358:	e00c      	b.n	8000374 <__adddf3+0x184>
 800035a:	f102 0214 	add.w	r2, r2, #20
 800035e:	bfd8      	it	le
 8000360:	f1c2 0c20 	rsble	ip, r2, #32
 8000364:	fa01 f102 	lsl.w	r1, r1, r2
 8000368:	fa20 fc0c 	lsr.w	ip, r0, ip
 800036c:	bfdc      	itt	le
 800036e:	ea41 010c 	orrle.w	r1, r1, ip
 8000372:	4090      	lslle	r0, r2
 8000374:	1ae4      	subs	r4, r4, r3
 8000376:	bfa2      	ittt	ge
 8000378:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800037c:	4329      	orrge	r1, r5
 800037e:	bd30      	popge	{r4, r5, pc}
 8000380:	ea6f 0404 	mvn.w	r4, r4
 8000384:	3c1f      	subs	r4, #31
 8000386:	da1c      	bge.n	80003c2 <__adddf3+0x1d2>
 8000388:	340c      	adds	r4, #12
 800038a:	dc0e      	bgt.n	80003aa <__adddf3+0x1ba>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0220 	rsb	r2, r4, #32
 8000394:	fa20 f004 	lsr.w	r0, r0, r4
 8000398:	fa01 f302 	lsl.w	r3, r1, r2
 800039c:	ea40 0003 	orr.w	r0, r0, r3
 80003a0:	fa21 f304 	lsr.w	r3, r1, r4
 80003a4:	ea45 0103 	orr.w	r1, r5, r3
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	f1c4 040c 	rsb	r4, r4, #12
 80003ae:	f1c4 0220 	rsb	r2, r4, #32
 80003b2:	fa20 f002 	lsr.w	r0, r0, r2
 80003b6:	fa01 f304 	lsl.w	r3, r1, r4
 80003ba:	ea40 0003 	orr.w	r0, r0, r3
 80003be:	4629      	mov	r1, r5
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	fa21 f004 	lsr.w	r0, r1, r4
 80003c6:	4629      	mov	r1, r5
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	f094 0f00 	teq	r4, #0
 80003ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003d2:	bf06      	itte	eq
 80003d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d8:	3401      	addeq	r4, #1
 80003da:	3d01      	subne	r5, #1
 80003dc:	e74e      	b.n	800027c <__adddf3+0x8c>
 80003de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e2:	bf18      	it	ne
 80003e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e8:	d029      	beq.n	800043e <__adddf3+0x24e>
 80003ea:	ea94 0f05 	teq	r4, r5
 80003ee:	bf08      	it	eq
 80003f0:	ea90 0f02 	teqeq	r0, r2
 80003f4:	d005      	beq.n	8000402 <__adddf3+0x212>
 80003f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fa:	bf04      	itt	eq
 80003fc:	4619      	moveq	r1, r3
 80003fe:	4610      	moveq	r0, r2
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	ea91 0f03 	teq	r1, r3
 8000406:	bf1e      	ittt	ne
 8000408:	2100      	movne	r1, #0
 800040a:	2000      	movne	r0, #0
 800040c:	bd30      	popne	{r4, r5, pc}
 800040e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000412:	d105      	bne.n	8000420 <__adddf3+0x230>
 8000414:	0040      	lsls	r0, r0, #1
 8000416:	4149      	adcs	r1, r1
 8000418:	bf28      	it	cs
 800041a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000424:	bf3c      	itt	cc
 8000426:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800042a:	bd30      	popcc	{r4, r5, pc}
 800042c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000430:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000434:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000438:	f04f 0000 	mov.w	r0, #0
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000442:	bf1a      	itte	ne
 8000444:	4619      	movne	r1, r3
 8000446:	4610      	movne	r0, r2
 8000448:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800044c:	bf1c      	itt	ne
 800044e:	460b      	movne	r3, r1
 8000450:	4602      	movne	r2, r0
 8000452:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000456:	bf06      	itte	eq
 8000458:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800045c:	ea91 0f03 	teqeq	r1, r3
 8000460:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	bf00      	nop

08000468 <__aeabi_ui2d>:
 8000468:	f090 0f00 	teq	r0, #0
 800046c:	bf04      	itt	eq
 800046e:	2100      	moveq	r1, #0
 8000470:	4770      	bxeq	lr
 8000472:	b530      	push	{r4, r5, lr}
 8000474:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000478:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800047c:	f04f 0500 	mov.w	r5, #0
 8000480:	f04f 0100 	mov.w	r1, #0
 8000484:	e750      	b.n	8000328 <__adddf3+0x138>
 8000486:	bf00      	nop

08000488 <__aeabi_i2d>:
 8000488:	f090 0f00 	teq	r0, #0
 800048c:	bf04      	itt	eq
 800048e:	2100      	moveq	r1, #0
 8000490:	4770      	bxeq	lr
 8000492:	b530      	push	{r4, r5, lr}
 8000494:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000498:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a0:	bf48      	it	mi
 80004a2:	4240      	negmi	r0, r0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e73e      	b.n	8000328 <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_f2d>:
 80004ac:	0042      	lsls	r2, r0, #1
 80004ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ba:	bf1f      	itttt	ne
 80004bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c8:	4770      	bxne	lr
 80004ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ce:	bf08      	it	eq
 80004d0:	4770      	bxeq	lr
 80004d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d6:	bf04      	itt	eq
 80004d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004ec:	e71c      	b.n	8000328 <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_ul2d>:
 80004f0:	ea50 0201 	orrs.w	r2, r0, r1
 80004f4:	bf08      	it	eq
 80004f6:	4770      	bxeq	lr
 80004f8:	b530      	push	{r4, r5, lr}
 80004fa:	f04f 0500 	mov.w	r5, #0
 80004fe:	e00a      	b.n	8000516 <__aeabi_l2d+0x16>

08000500 <__aeabi_l2d>:
 8000500:	ea50 0201 	orrs.w	r2, r0, r1
 8000504:	bf08      	it	eq
 8000506:	4770      	bxeq	lr
 8000508:	b530      	push	{r4, r5, lr}
 800050a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050e:	d502      	bpl.n	8000516 <__aeabi_l2d+0x16>
 8000510:	4240      	negs	r0, r0
 8000512:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000516:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000522:	f43f aed8 	beq.w	80002d6 <__adddf3+0xe6>
 8000526:	f04f 0203 	mov.w	r2, #3
 800052a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052e:	bf18      	it	ne
 8000530:	3203      	addne	r2, #3
 8000532:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000536:	bf18      	it	ne
 8000538:	3203      	addne	r2, #3
 800053a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053e:	f1c2 0320 	rsb	r3, r2, #32
 8000542:	fa00 fc03 	lsl.w	ip, r0, r3
 8000546:	fa20 f002 	lsr.w	r0, r0, r2
 800054a:	fa01 fe03 	lsl.w	lr, r1, r3
 800054e:	ea40 000e 	orr.w	r0, r0, lr
 8000552:	fa21 f102 	lsr.w	r1, r1, r2
 8000556:	4414      	add	r4, r2
 8000558:	e6bd      	b.n	80002d6 <__adddf3+0xe6>
 800055a:	bf00      	nop

0800055c <__aeabi_dmul>:
 800055c:	b570      	push	{r4, r5, r6, lr}
 800055e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000562:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000566:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056a:	bf1d      	ittte	ne
 800056c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000570:	ea94 0f0c 	teqne	r4, ip
 8000574:	ea95 0f0c 	teqne	r5, ip
 8000578:	f000 f8de 	bleq	8000738 <__aeabi_dmul+0x1dc>
 800057c:	442c      	add	r4, r5
 800057e:	ea81 0603 	eor.w	r6, r1, r3
 8000582:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000586:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058e:	bf18      	it	ne
 8000590:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000594:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000598:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800059c:	d038      	beq.n	8000610 <__aeabi_dmul+0xb4>
 800059e:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a2:	f04f 0500 	mov.w	r5, #0
 80005a6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005aa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ae:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b2:	f04f 0600 	mov.w	r6, #0
 80005b6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ba:	f09c 0f00 	teq	ip, #0
 80005be:	bf18      	it	ne
 80005c0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005cc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d0:	d204      	bcs.n	80005dc <__aeabi_dmul+0x80>
 80005d2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d6:	416d      	adcs	r5, r5
 80005d8:	eb46 0606 	adc.w	r6, r6, r6
 80005dc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005ec:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f4:	bf88      	it	hi
 80005f6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fa:	d81e      	bhi.n	800063a <__aeabi_dmul+0xde>
 80005fc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	bd70      	pop	{r4, r5, r6, pc}
 8000610:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000614:	ea46 0101 	orr.w	r1, r6, r1
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	ea81 0103 	eor.w	r1, r1, r3
 8000620:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000624:	bfc2      	ittt	gt
 8000626:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062e:	bd70      	popgt	{r4, r5, r6, pc}
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f04f 0e00 	mov.w	lr, #0
 8000638:	3c01      	subs	r4, #1
 800063a:	f300 80ab 	bgt.w	8000794 <__aeabi_dmul+0x238>
 800063e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000642:	bfde      	ittt	le
 8000644:	2000      	movle	r0, #0
 8000646:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064a:	bd70      	pople	{r4, r5, r6, pc}
 800064c:	f1c4 0400 	rsb	r4, r4, #0
 8000650:	3c20      	subs	r4, #32
 8000652:	da35      	bge.n	80006c0 <__aeabi_dmul+0x164>
 8000654:	340c      	adds	r4, #12
 8000656:	dc1b      	bgt.n	8000690 <__aeabi_dmul+0x134>
 8000658:	f104 0414 	add.w	r4, r4, #20
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f305 	lsl.w	r3, r0, r5
 8000664:	fa20 f004 	lsr.w	r0, r0, r4
 8000668:	fa01 f205 	lsl.w	r2, r1, r5
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000674:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000678:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800067c:	fa21 f604 	lsr.w	r6, r1, r4
 8000680:	eb42 0106 	adc.w	r1, r2, r6
 8000684:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000688:	bf08      	it	eq
 800068a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068e:	bd70      	pop	{r4, r5, r6, pc}
 8000690:	f1c4 040c 	rsb	r4, r4, #12
 8000694:	f1c4 0520 	rsb	r5, r4, #32
 8000698:	fa00 f304 	lsl.w	r3, r0, r4
 800069c:	fa20 f005 	lsr.w	r0, r0, r5
 80006a0:	fa01 f204 	lsl.w	r2, r1, r4
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	f141 0100 	adc.w	r1, r1, #0
 80006b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b8:	bf08      	it	eq
 80006ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006be:	bd70      	pop	{r4, r5, r6, pc}
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f205 	lsl.w	r2, r0, r5
 80006c8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006cc:	fa20 f304 	lsr.w	r3, r0, r4
 80006d0:	fa01 f205 	lsl.w	r2, r1, r5
 80006d4:	ea43 0302 	orr.w	r3, r3, r2
 80006d8:	fa21 f004 	lsr.w	r0, r1, r4
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	fa21 f204 	lsr.w	r2, r1, r4
 80006e4:	ea20 0002 	bic.w	r0, r0, r2
 80006e8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f0:	bf08      	it	eq
 80006f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f6:	bd70      	pop	{r4, r5, r6, pc}
 80006f8:	f094 0f00 	teq	r4, #0
 80006fc:	d10f      	bne.n	800071e <__aeabi_dmul+0x1c2>
 80006fe:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000702:	0040      	lsls	r0, r0, #1
 8000704:	eb41 0101 	adc.w	r1, r1, r1
 8000708:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800070c:	bf08      	it	eq
 800070e:	3c01      	subeq	r4, #1
 8000710:	d0f7      	beq.n	8000702 <__aeabi_dmul+0x1a6>
 8000712:	ea41 0106 	orr.w	r1, r1, r6
 8000716:	f095 0f00 	teq	r5, #0
 800071a:	bf18      	it	ne
 800071c:	4770      	bxne	lr
 800071e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000722:	0052      	lsls	r2, r2, #1
 8000724:	eb43 0303 	adc.w	r3, r3, r3
 8000728:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800072c:	bf08      	it	eq
 800072e:	3d01      	subeq	r5, #1
 8000730:	d0f7      	beq.n	8000722 <__aeabi_dmul+0x1c6>
 8000732:	ea43 0306 	orr.w	r3, r3, r6
 8000736:	4770      	bx	lr
 8000738:	ea94 0f0c 	teq	r4, ip
 800073c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000740:	bf18      	it	ne
 8000742:	ea95 0f0c 	teqne	r5, ip
 8000746:	d00c      	beq.n	8000762 <__aeabi_dmul+0x206>
 8000748:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074c:	bf18      	it	ne
 800074e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000752:	d1d1      	bne.n	80006f8 <__aeabi_dmul+0x19c>
 8000754:	ea81 0103 	eor.w	r1, r1, r3
 8000758:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800075c:	f04f 0000 	mov.w	r0, #0
 8000760:	bd70      	pop	{r4, r5, r6, pc}
 8000762:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000766:	bf06      	itte	eq
 8000768:	4610      	moveq	r0, r2
 800076a:	4619      	moveq	r1, r3
 800076c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000770:	d019      	beq.n	80007a6 <__aeabi_dmul+0x24a>
 8000772:	ea94 0f0c 	teq	r4, ip
 8000776:	d102      	bne.n	800077e <__aeabi_dmul+0x222>
 8000778:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800077c:	d113      	bne.n	80007a6 <__aeabi_dmul+0x24a>
 800077e:	ea95 0f0c 	teq	r5, ip
 8000782:	d105      	bne.n	8000790 <__aeabi_dmul+0x234>
 8000784:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000788:	bf1c      	itt	ne
 800078a:	4610      	movne	r0, r2
 800078c:	4619      	movne	r1, r3
 800078e:	d10a      	bne.n	80007a6 <__aeabi_dmul+0x24a>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007aa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ae:	bd70      	pop	{r4, r5, r6, pc}

080007b0 <__aeabi_ddiv>:
 80007b0:	b570      	push	{r4, r5, r6, lr}
 80007b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007be:	bf1d      	ittte	ne
 80007c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c4:	ea94 0f0c 	teqne	r4, ip
 80007c8:	ea95 0f0c 	teqne	r5, ip
 80007cc:	f000 f8a7 	bleq	800091e <__aeabi_ddiv+0x16e>
 80007d0:	eba4 0405 	sub.w	r4, r4, r5
 80007d4:	ea81 0e03 	eor.w	lr, r1, r3
 80007d8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e0:	f000 8088 	beq.w	80008f4 <__aeabi_ddiv+0x144>
 80007e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007ec:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007fc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000800:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000804:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000808:	429d      	cmp	r5, r3
 800080a:	bf08      	it	eq
 800080c:	4296      	cmpeq	r6, r2
 800080e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000812:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000816:	d202      	bcs.n	800081e <__aeabi_ddiv+0x6e>
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	1ab6      	subs	r6, r6, r2
 8000820:	eb65 0503 	sbc.w	r5, r5, r3
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000832:	ebb6 0e02 	subs.w	lr, r6, r2
 8000836:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083a:	bf22      	ittt	cs
 800083c:	1ab6      	subcs	r6, r6, r2
 800083e:	4675      	movcs	r5, lr
 8000840:	ea40 000c 	orrcs.w	r0, r0, ip
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	ebb6 0e02 	subs.w	lr, r6, r2
 800084e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000852:	bf22      	ittt	cs
 8000854:	1ab6      	subcs	r6, r6, r2
 8000856:	4675      	movcs	r5, lr
 8000858:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	ebb6 0e02 	subs.w	lr, r6, r2
 8000866:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086a:	bf22      	ittt	cs
 800086c:	1ab6      	subcs	r6, r6, r2
 800086e:	4675      	movcs	r5, lr
 8000870:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	ebb6 0e02 	subs.w	lr, r6, r2
 800087e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000882:	bf22      	ittt	cs
 8000884:	1ab6      	subcs	r6, r6, r2
 8000886:	4675      	movcs	r5, lr
 8000888:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800088c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000890:	d018      	beq.n	80008c4 <__aeabi_ddiv+0x114>
 8000892:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000896:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008aa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ae:	d1c0      	bne.n	8000832 <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	d10b      	bne.n	80008ce <__aeabi_ddiv+0x11e>
 80008b6:	ea41 0100 	orr.w	r1, r1, r0
 80008ba:	f04f 0000 	mov.w	r0, #0
 80008be:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c2:	e7b6      	b.n	8000832 <__aeabi_ddiv+0x82>
 80008c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c8:	bf04      	itt	eq
 80008ca:	4301      	orreq	r1, r0
 80008cc:	2000      	moveq	r0, #0
 80008ce:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d2:	bf88      	it	hi
 80008d4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d8:	f63f aeaf 	bhi.w	800063a <__aeabi_dmul+0xde>
 80008dc:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e0:	bf04      	itt	eq
 80008e2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ea:	f150 0000 	adcs.w	r0, r0, #0
 80008ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f2:	bd70      	pop	{r4, r5, r6, pc}
 80008f4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008fc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000900:	bfc2      	ittt	gt
 8000902:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000906:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090a:	bd70      	popgt	{r4, r5, r6, pc}
 800090c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000910:	f04f 0e00 	mov.w	lr, #0
 8000914:	3c01      	subs	r4, #1
 8000916:	e690      	b.n	800063a <__aeabi_dmul+0xde>
 8000918:	ea45 0e06 	orr.w	lr, r5, r6
 800091c:	e68d      	b.n	800063a <__aeabi_dmul+0xde>
 800091e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000922:	ea94 0f0c 	teq	r4, ip
 8000926:	bf08      	it	eq
 8000928:	ea95 0f0c 	teqeq	r5, ip
 800092c:	f43f af3b 	beq.w	80007a6 <__aeabi_dmul+0x24a>
 8000930:	ea94 0f0c 	teq	r4, ip
 8000934:	d10a      	bne.n	800094c <__aeabi_ddiv+0x19c>
 8000936:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093a:	f47f af34 	bne.w	80007a6 <__aeabi_dmul+0x24a>
 800093e:	ea95 0f0c 	teq	r5, ip
 8000942:	f47f af25 	bne.w	8000790 <__aeabi_dmul+0x234>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e72c      	b.n	80007a6 <__aeabi_dmul+0x24a>
 800094c:	ea95 0f0c 	teq	r5, ip
 8000950:	d106      	bne.n	8000960 <__aeabi_ddiv+0x1b0>
 8000952:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000956:	f43f aefd 	beq.w	8000754 <__aeabi_dmul+0x1f8>
 800095a:	4610      	mov	r0, r2
 800095c:	4619      	mov	r1, r3
 800095e:	e722      	b.n	80007a6 <__aeabi_dmul+0x24a>
 8000960:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000964:	bf18      	it	ne
 8000966:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096a:	f47f aec5 	bne.w	80006f8 <__aeabi_dmul+0x19c>
 800096e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000972:	f47f af0d 	bne.w	8000790 <__aeabi_dmul+0x234>
 8000976:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097a:	f47f aeeb 	bne.w	8000754 <__aeabi_dmul+0x1f8>
 800097e:	e712      	b.n	80007a6 <__aeabi_dmul+0x24a>

08000980 <__aeabi_d2iz>:
 8000980:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000984:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000988:	d215      	bcs.n	80009b6 <__aeabi_d2iz+0x36>
 800098a:	d511      	bpl.n	80009b0 <__aeabi_d2iz+0x30>
 800098c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000990:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000994:	d912      	bls.n	80009bc <__aeabi_d2iz+0x3c>
 8000996:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800099a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800099e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009a2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009a6:	fa23 f002 	lsr.w	r0, r3, r2
 80009aa:	bf18      	it	ne
 80009ac:	4240      	negne	r0, r0
 80009ae:	4770      	bx	lr
 80009b0:	f04f 0000 	mov.w	r0, #0
 80009b4:	4770      	bx	lr
 80009b6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ba:	d105      	bne.n	80009c8 <__aeabi_d2iz+0x48>
 80009bc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009c0:	bf08      	it	eq
 80009c2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009c6:	4770      	bx	lr
 80009c8:	f04f 0000 	mov.w	r0, #0
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop

080009d0 <bno055_init>:
 *  make sure your changes will not
 *  affect the reference value of the parameter
 *  (Better case don't change the reference value of the parameter)
 */
BNO055_RETURN_FUNCTION_TYPE bno055_init(struct bno055_t *bno055)
{
 80009d0:	b590      	push	{r4, r7, lr}
 80009d2:	b085      	sub	sp, #20
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 80009d8:	23ff      	movs	r3, #255	; 0xff
 80009da:	73fb      	strb	r3, [r7, #15]
    u8 data_u8 = BNO055_INIT_VALUE;
 80009dc:	2300      	movs	r3, #0
 80009de:	73bb      	strb	r3, [r7, #14]
    u8 bno055_page_zero_u8 = BNO055_PAGE_ZERO;
 80009e0:	2300      	movs	r3, #0
 80009e2:	737b      	strb	r3, [r7, #13]

    /* Array holding the Software revision id
     */
    u8 a_SW_ID_u8[BNO055_REV_ID_SIZE] = { BNO055_INIT_VALUE, BNO055_INIT_VALUE };
 80009e4:	2300      	movs	r3, #0
 80009e6:	813b      	strh	r3, [r7, #8]
//break
    /* stuct parameters are assign to bno055*/
    p_bno055 = bno055;
 80009e8:	4a58      	ldr	r2, [pc, #352]	; (8000b4c <bno055_init+0x17c>)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	6013      	str	r3, [r2, #0]

    /* Write the default page as zero*/
    com_rslt = p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 80009ee:	4b57      	ldr	r3, [pc, #348]	; (8000b4c <bno055_init+0x17c>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	68dc      	ldr	r4, [r3, #12]
 80009f4:	4b55      	ldr	r3, [pc, #340]	; (8000b4c <bno055_init+0x17c>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	7a58      	ldrb	r0, [r3, #9]
 80009fa:	f107 020d 	add.w	r2, r7, #13
 80009fe:	2301      	movs	r3, #1
 8000a00:	2107      	movs	r1, #7
 8000a02:	47a0      	blx	r4
 8000a04:	4603      	mov	r3, r0
 8000a06:	73fb      	strb	r3, [r7, #15]
                                               &bno055_page_zero_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);

    /* Read the chip id of the sensor from page
     * zero 0x00 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000a08:	4b50      	ldr	r3, [pc, #320]	; (8000b4c <bno055_init+0x17c>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	691c      	ldr	r4, [r3, #16]
 8000a0e:	4b4f      	ldr	r3, [pc, #316]	; (8000b4c <bno055_init+0x17c>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	7a58      	ldrb	r0, [r3, #9]
 8000a14:	f107 020e 	add.w	r2, r7, #14
 8000a18:	2301      	movs	r3, #1
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	47a0      	blx	r4
 8000a1e:	4603      	mov	r3, r0
 8000a20:	b2da      	uxtb	r2, r3
 8000a22:	7bfb      	ldrb	r3, [r7, #15]
 8000a24:	4413      	add	r3, r2
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	73fb      	strb	r3, [r7, #15]
                                               BNO055_CHIP_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->chip_id = data_u8; //break
 8000a2a:	4b48      	ldr	r3, [pc, #288]	; (8000b4c <bno055_init+0x17c>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	7bba      	ldrb	r2, [r7, #14]
 8000a30:	701a      	strb	r2, [r3, #0]

    /* Read the accel revision id from page
     * zero 0x01 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000a32:	4b46      	ldr	r3, [pc, #280]	; (8000b4c <bno055_init+0x17c>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	691c      	ldr	r4, [r3, #16]
 8000a38:	4b44      	ldr	r3, [pc, #272]	; (8000b4c <bno055_init+0x17c>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	7a58      	ldrb	r0, [r3, #9]
 8000a3e:	f107 020e 	add.w	r2, r7, #14
 8000a42:	2301      	movs	r3, #1
 8000a44:	2101      	movs	r1, #1
 8000a46:	47a0      	blx	r4
 8000a48:	4603      	mov	r3, r0
 8000a4a:	b2da      	uxtb	r2, r3
 8000a4c:	7bfb      	ldrb	r3, [r7, #15]
 8000a4e:	4413      	add	r3, r2
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	73fb      	strb	r3, [r7, #15]
                                               BNO055_ACCEL_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->accel_rev_id = data_u8;
 8000a54:	4b3d      	ldr	r3, [pc, #244]	; (8000b4c <bno055_init+0x17c>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	7bba      	ldrb	r2, [r7, #14]
 8000a5a:	715a      	strb	r2, [r3, #5]

    /* Read the mag revision id from page
     * zero 0x02 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000a5c:	4b3b      	ldr	r3, [pc, #236]	; (8000b4c <bno055_init+0x17c>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	691c      	ldr	r4, [r3, #16]
 8000a62:	4b3a      	ldr	r3, [pc, #232]	; (8000b4c <bno055_init+0x17c>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	7a58      	ldrb	r0, [r3, #9]
 8000a68:	f107 020e 	add.w	r2, r7, #14
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	2102      	movs	r1, #2
 8000a70:	47a0      	blx	r4
 8000a72:	4603      	mov	r3, r0
 8000a74:	b2da      	uxtb	r2, r3
 8000a76:	7bfb      	ldrb	r3, [r7, #15]
 8000a78:	4413      	add	r3, r2
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	73fb      	strb	r3, [r7, #15]
                                               BNO055_MAG_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->mag_rev_id = data_u8;
 8000a7e:	4b33      	ldr	r3, [pc, #204]	; (8000b4c <bno055_init+0x17c>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	7bba      	ldrb	r2, [r7, #14]
 8000a84:	719a      	strb	r2, [r3, #6]

    /* Read the gyro revision id from page
     * zero 0x02 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000a86:	4b31      	ldr	r3, [pc, #196]	; (8000b4c <bno055_init+0x17c>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	691c      	ldr	r4, [r3, #16]
 8000a8c:	4b2f      	ldr	r3, [pc, #188]	; (8000b4c <bno055_init+0x17c>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	7a58      	ldrb	r0, [r3, #9]
 8000a92:	f107 020e 	add.w	r2, r7, #14
 8000a96:	2301      	movs	r3, #1
 8000a98:	2103      	movs	r1, #3
 8000a9a:	47a0      	blx	r4
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	b2da      	uxtb	r2, r3
 8000aa0:	7bfb      	ldrb	r3, [r7, #15]
 8000aa2:	4413      	add	r3, r2
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	73fb      	strb	r3, [r7, #15]
                                               BNO055_GYRO_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->gyro_rev_id = data_u8;
 8000aa8:	4b28      	ldr	r3, [pc, #160]	; (8000b4c <bno055_init+0x17c>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	7bba      	ldrb	r2, [r7, #14]
 8000aae:	71da      	strb	r2, [r3, #7]

    /* Read the boot loader revision from page
     * zero 0x06 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000ab0:	4b26      	ldr	r3, [pc, #152]	; (8000b4c <bno055_init+0x17c>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	691c      	ldr	r4, [r3, #16]
 8000ab6:	4b25      	ldr	r3, [pc, #148]	; (8000b4c <bno055_init+0x17c>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	7a58      	ldrb	r0, [r3, #9]
 8000abc:	f107 020e 	add.w	r2, r7, #14
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	2106      	movs	r1, #6
 8000ac4:	47a0      	blx	r4
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	b2da      	uxtb	r2, r3
 8000aca:	7bfb      	ldrb	r3, [r7, #15]
 8000acc:	4413      	add	r3, r2
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	73fb      	strb	r3, [r7, #15]
                                               BNO055_BL_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->bl_rev_id = data_u8;
 8000ad2:	4b1e      	ldr	r3, [pc, #120]	; (8000b4c <bno055_init+0x17c>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	7bba      	ldrb	r2, [r7, #14]
 8000ad8:	721a      	strb	r2, [r3, #8]

    /* Read the software revision id from page
     * zero 0x04 and 0x05 register( 2 bytes of data)*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000ada:	4b1c      	ldr	r3, [pc, #112]	; (8000b4c <bno055_init+0x17c>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	691c      	ldr	r4, [r3, #16]
 8000ae0:	4b1a      	ldr	r3, [pc, #104]	; (8000b4c <bno055_init+0x17c>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	7a58      	ldrb	r0, [r3, #9]
 8000ae6:	f107 0208 	add.w	r2, r7, #8
 8000aea:	2302      	movs	r3, #2
 8000aec:	2104      	movs	r1, #4
 8000aee:	47a0      	blx	r4
 8000af0:	4603      	mov	r3, r0
 8000af2:	b2da      	uxtb	r2, r3
 8000af4:	7bfb      	ldrb	r3, [r7, #15]
 8000af6:	4413      	add	r3, r2
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	73fb      	strb	r3, [r7, #15]
                                               BNO055_SW_REV_ID_LSB_REG,
                                               a_SW_ID_u8,
                                               BNO055_LSB_MSB_READ_LENGTH);
    a_SW_ID_u8[BNO055_SW_ID_LSB] = BNO055_GET_BITSLICE(a_SW_ID_u8[BNO055_SW_ID_LSB], BNO055_SW_REV_ID_LSB);
 8000afc:	7a3b      	ldrb	r3, [r7, #8]
 8000afe:	723b      	strb	r3, [r7, #8]
    p_bno055->sw_rev_id =
        (u16)((((u32)((u8)a_SW_ID_u8[BNO055_SW_ID_MSB])) << BNO055_SHIFT_EIGHT_BITS) | (a_SW_ID_u8[BNO055_SW_ID_LSB]));
 8000b00:	7a7b      	ldrb	r3, [r7, #9]
 8000b02:	b29b      	uxth	r3, r3
 8000b04:	021b      	lsls	r3, r3, #8
 8000b06:	b299      	uxth	r1, r3
 8000b08:	7a3b      	ldrb	r3, [r7, #8]
 8000b0a:	b29a      	uxth	r2, r3
    p_bno055->sw_rev_id =
 8000b0c:	4b0f      	ldr	r3, [pc, #60]	; (8000b4c <bno055_init+0x17c>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
        (u16)((((u32)((u8)a_SW_ID_u8[BNO055_SW_ID_MSB])) << BNO055_SHIFT_EIGHT_BITS) | (a_SW_ID_u8[BNO055_SW_ID_LSB]));
 8000b10:	430a      	orrs	r2, r1
 8000b12:	b292      	uxth	r2, r2
    p_bno055->sw_rev_id =
 8000b14:	805a      	strh	r2, [r3, #2]

    /* Read the page id from the register 0x07*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000b16:	4b0d      	ldr	r3, [pc, #52]	; (8000b4c <bno055_init+0x17c>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	691c      	ldr	r4, [r3, #16]
 8000b1c:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <bno055_init+0x17c>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	7a58      	ldrb	r0, [r3, #9]
 8000b22:	f107 020e 	add.w	r2, r7, #14
 8000b26:	2301      	movs	r3, #1
 8000b28:	2107      	movs	r1, #7
 8000b2a:	47a0      	blx	r4
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	b2da      	uxtb	r2, r3
 8000b30:	7bfb      	ldrb	r3, [r7, #15]
 8000b32:	4413      	add	r3, r2
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	73fb      	strb	r3, [r7, #15]
                                               BNO055_PAGE_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->page_id = data_u8;
 8000b38:	4b04      	ldr	r3, [pc, #16]	; (8000b4c <bno055_init+0x17c>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	7bba      	ldrb	r2, [r7, #14]
 8000b3e:	711a      	strb	r2, [r3, #4]

    return com_rslt;
 8000b40:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	3714      	adds	r7, #20
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd90      	pop	{r4, r7, pc}
 8000b4c:	2000002c 	.word	0x2000002c

08000b50 <bno055_write_register>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_write_register(u8 addr_u8, u8 *data_u8, u8 len_u8)
{
 8000b50:	b590      	push	{r4, r7, lr}
 8000b52:	b085      	sub	sp, #20
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	6039      	str	r1, [r7, #0]
 8000b5a:	71fb      	strb	r3, [r7, #7]
 8000b5c:	4613      	mov	r3, r2
 8000b5e:	71bb      	strb	r3, [r7, #6]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000b60:	23ff      	movs	r3, #255	; 0xff
 8000b62:	73fb      	strb	r3, [r7, #15]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000b64:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <bno055_write_register+0x48>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d102      	bne.n	8000b72 <bno055_write_register+0x22>
    {
        return BNO055_E_NULL_PTR;
 8000b6c:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8000b70:	e00d      	b.n	8000b8e <bno055_write_register+0x3e>
    }
    else
    {
        /* Write the values of respective given register */
        com_rslt = p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr, addr_u8, data_u8, len_u8);
 8000b72:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <bno055_write_register+0x48>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	68dc      	ldr	r4, [r3, #12]
 8000b78:	4b07      	ldr	r3, [pc, #28]	; (8000b98 <bno055_write_register+0x48>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	7a58      	ldrb	r0, [r3, #9]
 8000b7e:	79bb      	ldrb	r3, [r7, #6]
 8000b80:	79f9      	ldrb	r1, [r7, #7]
 8000b82:	683a      	ldr	r2, [r7, #0]
 8000b84:	47a0      	blx	r4
 8000b86:	4603      	mov	r3, r0
 8000b88:	73fb      	strb	r3, [r7, #15]
    }

    return com_rslt;
 8000b8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3714      	adds	r7, #20
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd90      	pop	{r4, r7, pc}
 8000b96:	bf00      	nop
 8000b98:	2000002c 	.word	0x2000002c

08000b9c <bno055_write_page_id>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_write_page_id(u8 page_id_u8)
{
 8000b9c:	b590      	push	{r4, r7, lr}
 8000b9e:	b085      	sub	sp, #20
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	71fb      	strb	r3, [r7, #7]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000ba6:	23ff      	movs	r3, #255	; 0xff
 8000ba8:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8000baa:	2300      	movs	r3, #0
 8000bac:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000bae:	4b1e      	ldr	r3, [pc, #120]	; (8000c28 <bno055_write_page_id+0x8c>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d102      	bne.n	8000bbc <bno055_write_page_id+0x20>
    {
        return BNO055_E_NULL_PTR;
 8000bb6:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8000bba:	e030      	b.n	8000c1e <bno055_write_page_id+0x82>
    }
    else
    {
        /* Read the current page*/
        com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000bbc:	4b1a      	ldr	r3, [pc, #104]	; (8000c28 <bno055_write_page_id+0x8c>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	691c      	ldr	r4, [r3, #16]
 8000bc2:	4b19      	ldr	r3, [pc, #100]	; (8000c28 <bno055_write_page_id+0x8c>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	7a58      	ldrb	r0, [r3, #9]
 8000bc8:	f107 020e 	add.w	r2, r7, #14
 8000bcc:	2301      	movs	r3, #1
 8000bce:	2107      	movs	r1, #7
 8000bd0:	47a0      	blx	r4
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	73fb      	strb	r3, [r7, #15]
                                                  BNO055_PAGE_ID_REG,
                                                  &data_u8r,
                                                  BNO055_GEN_READ_WRITE_LENGTH);

        /* Check condition for communication BNO055_SUCCESS*/
        if (com_rslt == BNO055_SUCCESS)
 8000bd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d11b      	bne.n	8000c16 <bno055_write_page_id+0x7a>
        {
            data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_PAGE_ID, page_id_u8);
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	73bb      	strb	r3, [r7, #14]

            /* Write the page id*/
            com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8000be2:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <bno055_write_page_id+0x8c>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	68dc      	ldr	r4, [r3, #12]
 8000be8:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <bno055_write_page_id+0x8c>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	7a58      	ldrb	r0, [r3, #9]
 8000bee:	f107 020e 	add.w	r2, r7, #14
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	2107      	movs	r1, #7
 8000bf6:	47a0      	blx	r4
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	b2da      	uxtb	r2, r3
 8000bfc:	7bfb      	ldrb	r3, [r7, #15]
 8000bfe:	4413      	add	r3, r2
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	73fb      	strb	r3, [r7, #15]
                                                        BNO055_PAGE_ID_REG,
                                                        &data_u8r,
                                                        BNO055_GEN_READ_WRITE_LENGTH);
            if (com_rslt == BNO055_SUCCESS)
 8000c04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d106      	bne.n	8000c1a <bno055_write_page_id+0x7e>
            {
                p_bno055->page_id = page_id_u8;
 8000c0c:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <bno055_write_page_id+0x8c>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	79fa      	ldrb	r2, [r7, #7]
 8000c12:	711a      	strb	r2, [r3, #4]
 8000c14:	e001      	b.n	8000c1a <bno055_write_page_id+0x7e>
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8000c16:	23ff      	movs	r3, #255	; 0xff
 8000c18:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8000c1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3714      	adds	r7, #20
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd90      	pop	{r4, r7, pc}
 8000c26:	bf00      	nop
 8000c28:	2000002c 	.word	0x2000002c

08000c2c <bno055_read_linear_accel_xyz>:
 *  @return results of bus communication function
 *  @retval 0 -> BNO055_SUCCESS
 *  @retval 1 -> BNO055_ERROR
 */
BNO055_RETURN_FUNCTION_TYPE bno055_read_linear_accel_xyz(struct bno055_linear_accel_t *linear_accel)
{
 8000c2c:	b590      	push	{r4, r7, lr}
 8000c2e:	b085      	sub	sp, #20
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000c34:	23ff      	movs	r3, #255	; 0xff
 8000c36:	73fb      	strb	r3, [r7, #15]
     * data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB] - y->MSB
     * data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB] - y->MSB
     * data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB] - z->MSB
     * data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB] - z->MSB
     */
    u8 data_u8[BNO055_ACCEL_XYZ_DATA_SIZE] = {
 8000c38:	4a31      	ldr	r2, [pc, #196]	; (8000d00 <bno055_read_linear_accel_xyz+0xd4>)
 8000c3a:	f107 0308 	add.w	r3, r7, #8
 8000c3e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c42:	6018      	str	r0, [r3, #0]
 8000c44:	3304      	adds	r3, #4
 8000c46:	8019      	strh	r1, [r3, #0]
        BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE
    };
    s8 stat_s8 = BNO055_ERROR;
 8000c48:	23ff      	movs	r3, #255	; 0xff
 8000c4a:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000c4c:	4b2d      	ldr	r3, [pc, #180]	; (8000d04 <bno055_read_linear_accel_xyz+0xd8>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d102      	bne.n	8000c5a <bno055_read_linear_accel_xyz+0x2e>
    {
        return BNO055_E_NULL_PTR;
 8000c54:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8000c58:	e04e      	b.n	8000cf8 <bno055_read_linear_accel_xyz+0xcc>
    }
    else
    {
        /*condition check for page, chip id is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 8000c5a:	4b2a      	ldr	r3, [pc, #168]	; (8000d04 <bno055_read_linear_accel_xyz+0xd8>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	791b      	ldrb	r3, [r3, #4]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d004      	beq.n	8000c6e <bno055_read_linear_accel_xyz+0x42>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 8000c64:	2000      	movs	r0, #0
 8000c66:	f7ff ff99 	bl	8000b9c <bno055_write_page_id>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 8000c6e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d004      	beq.n	8000c80 <bno055_read_linear_accel_xyz+0x54>
 8000c76:	4b23      	ldr	r3, [pc, #140]	; (8000d04 <bno055_read_linear_accel_xyz+0xd8>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	791b      	ldrb	r3, [r3, #4]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d137      	bne.n	8000cf0 <bno055_read_linear_accel_xyz+0xc4>
        {
            /* Read the six byte value
             *  of linear accel xyz data*/
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000c80:	4b20      	ldr	r3, [pc, #128]	; (8000d04 <bno055_read_linear_accel_xyz+0xd8>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	691c      	ldr	r4, [r3, #16]
 8000c86:	4b1f      	ldr	r3, [pc, #124]	; (8000d04 <bno055_read_linear_accel_xyz+0xd8>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	7a58      	ldrb	r0, [r3, #9]
 8000c8c:	f107 0208 	add.w	r2, r7, #8
 8000c90:	2306      	movs	r3, #6
 8000c92:	2128      	movs	r1, #40	; 0x28
 8000c94:	47a0      	blx	r4
 8000c96:	4603      	mov	r3, r0
 8000c98:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_LINEAR_ACCEL_DATA_X_LSB_VALUEX_REG,
                                                      data_u8,
                                                      BNO055_ACCEL_XYZ_DATA_SIZE);

            /* Data x*/
            data_u8[BNO055_SENSOR_DATA_XYZ_X_LSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_X_LSB],
 8000c9a:	7a3b      	ldrb	r3, [r7, #8]
 8000c9c:	723b      	strb	r3, [r7, #8]
                                                                        BNO055_LINEAR_ACCEL_DATA_X_LSB_VALUEX);
            data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB],
 8000c9e:	7a7b      	ldrb	r3, [r7, #9]
 8000ca0:	727b      	strb	r3, [r7, #9]
                                                                        BNO055_LINEAR_ACCEL_DATA_X_MSB_VALUEX);
            linear_accel->x =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000ca2:	7a7b      	ldrb	r3, [r7, #9]
 8000ca4:	b25b      	sxtb	r3, r3
 8000ca6:	021b      	lsls	r3, r3, #8
 8000ca8:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_XYZ_X_LSB]));
 8000caa:	7a3b      	ldrb	r3, [r7, #8]
 8000cac:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	b21a      	sxth	r2, r3
            linear_accel->x =
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	801a      	strh	r2, [r3, #0]

            /* Data y*/
            data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB],
 8000cb6:	7abb      	ldrb	r3, [r7, #10]
 8000cb8:	72bb      	strb	r3, [r7, #10]
                                                                        BNO055_LINEAR_ACCEL_DATA_Y_LSB_VALUEY);
            data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB],
 8000cba:	7afb      	ldrb	r3, [r7, #11]
 8000cbc:	72fb      	strb	r3, [r7, #11]
                                                                        BNO055_LINEAR_ACCEL_DATA_Y_MSB_VALUEY);
            linear_accel->y =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000cbe:	7afb      	ldrb	r3, [r7, #11]
 8000cc0:	b25b      	sxtb	r3, r3
 8000cc2:	021b      	lsls	r3, r3, #8
 8000cc4:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB]));
 8000cc6:	7abb      	ldrb	r3, [r7, #10]
 8000cc8:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	b21a      	sxth	r2, r3
            linear_accel->y =
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	805a      	strh	r2, [r3, #2]

            /* Data z*/
            data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB],
 8000cd2:	7b3b      	ldrb	r3, [r7, #12]
 8000cd4:	733b      	strb	r3, [r7, #12]
                                                                        BNO055_LINEAR_ACCEL_DATA_Z_LSB_VALUEZ);
            data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB],
 8000cd6:	7b7b      	ldrb	r3, [r7, #13]
 8000cd8:	737b      	strb	r3, [r7, #13]
                                                                        BNO055_LINEAR_ACCEL_DATA_Z_MSB_VALUEZ);
            linear_accel->z =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000cda:	7b7b      	ldrb	r3, [r7, #13]
 8000cdc:	b25b      	sxtb	r3, r3
 8000cde:	021b      	lsls	r3, r3, #8
 8000ce0:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB]));
 8000ce2:	7b3b      	ldrb	r3, [r7, #12]
 8000ce4:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	b21a      	sxth	r2, r3
            linear_accel->z =
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	809a      	strh	r2, [r3, #4]
 8000cee:	e001      	b.n	8000cf4 <bno055_read_linear_accel_xyz+0xc8>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8000cf0:	23ff      	movs	r3, #255	; 0xff
 8000cf2:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8000cf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3714      	adds	r7, #20
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd90      	pop	{r4, r7, pc}
 8000d00:	08004ed8 	.word	0x08004ed8
 8000d04:	2000002c 	.word	0x2000002c

08000d08 <bno055_convert_double_linear_accel_xyz_msq>:
 *  @retval 1 -> BNO055_ERROR
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_convert_double_linear_accel_xyz_msq(
    struct bno055_linear_accel_double_t *linear_accel_xyz)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000d10:	23ff      	movs	r3, #255	; 0xff
 8000d12:	73fb      	strb	r3, [r7, #15]
    struct bno055_linear_accel_t reg_linear_accel_xyz = { BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE };
 8000d14:	2300      	movs	r3, #0
 8000d16:	813b      	strh	r3, [r7, #8]
 8000d18:	2300      	movs	r3, #0
 8000d1a:	817b      	strh	r3, [r7, #10]
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	81bb      	strh	r3, [r7, #12]

    /* Read the raw xyz of linear accel */
    com_rslt = bno055_read_linear_accel_xyz(&reg_linear_accel_xyz);
 8000d20:	f107 0308 	add.w	r3, r7, #8
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff ff81 	bl	8000c2c <bno055_read_linear_accel_xyz>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	73fb      	strb	r3, [r7, #15]
    if (com_rslt == BNO055_SUCCESS)
 8000d2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d12d      	bne.n	8000d92 <bno055_convert_double_linear_accel_xyz_msq+0x8a>
    {
        /* Convert the raw xyz of linear accel to m/s2 */
        linear_accel_xyz->x = (double)(reg_linear_accel_xyz.x / BNO055_LINEAR_ACCEL_DIV_MSQ);
 8000d36:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff fba4 	bl	8000488 <__aeabi_i2d>
 8000d40:	f04f 0200 	mov.w	r2, #0
 8000d44:	4b17      	ldr	r3, [pc, #92]	; (8000da4 <bno055_convert_double_linear_accel_xyz_msq+0x9c>)
 8000d46:	f7ff fd33 	bl	80007b0 <__aeabi_ddiv>
 8000d4a:	4602      	mov	r2, r0
 8000d4c:	460b      	mov	r3, r1
 8000d4e:	6879      	ldr	r1, [r7, #4]
 8000d50:	e9c1 2300 	strd	r2, r3, [r1]
        linear_accel_xyz->y = (double)(reg_linear_accel_xyz.y / BNO055_LINEAR_ACCEL_DIV_MSQ);
 8000d54:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff fb95 	bl	8000488 <__aeabi_i2d>
 8000d5e:	f04f 0200 	mov.w	r2, #0
 8000d62:	4b10      	ldr	r3, [pc, #64]	; (8000da4 <bno055_convert_double_linear_accel_xyz_msq+0x9c>)
 8000d64:	f7ff fd24 	bl	80007b0 <__aeabi_ddiv>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	6879      	ldr	r1, [r7, #4]
 8000d6e:	e9c1 2302 	strd	r2, r3, [r1, #8]
        linear_accel_xyz->z = (double)(reg_linear_accel_xyz.z / BNO055_LINEAR_ACCEL_DIV_MSQ);
 8000d72:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff fb86 	bl	8000488 <__aeabi_i2d>
 8000d7c:	f04f 0200 	mov.w	r2, #0
 8000d80:	4b08      	ldr	r3, [pc, #32]	; (8000da4 <bno055_convert_double_linear_accel_xyz_msq+0x9c>)
 8000d82:	f7ff fd15 	bl	80007b0 <__aeabi_ddiv>
 8000d86:	4602      	mov	r2, r0
 8000d88:	460b      	mov	r3, r1
 8000d8a:	6879      	ldr	r1, [r7, #4]
 8000d8c:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8000d90:	e001      	b.n	8000d96 <bno055_convert_double_linear_accel_xyz_msq+0x8e>
    }
    else
    {
        com_rslt = BNO055_ERROR;
 8000d92:	23ff      	movs	r3, #255	; 0xff
 8000d94:	73fb      	strb	r3, [r7, #15]
    }

    return com_rslt;
 8000d96:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3710      	adds	r7, #16
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40590000 	.word	0x40590000

08000da8 <bno055_get_operation_mode>:
 *  becomes zero and it is mainly derived
 *  to configure the various settings of the BNO
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_get_operation_mode(u8 *operation_mode_u8)
{
 8000da8:	b590      	push	{r4, r7, lr}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000db0:	23ff      	movs	r3, #255	; 0xff
 8000db2:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8000db4:	2300      	movs	r3, #0
 8000db6:	737b      	strb	r3, [r7, #13]
    s8 stat_s8 = BNO055_ERROR;
 8000db8:	23ff      	movs	r3, #255	; 0xff
 8000dba:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000dbc:	4b1a      	ldr	r3, [pc, #104]	; (8000e28 <bno055_get_operation_mode+0x80>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d102      	bne.n	8000dca <bno055_get_operation_mode+0x22>
    {
        return BNO055_E_NULL_PTR;
 8000dc4:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8000dc8:	e02a      	b.n	8000e20 <bno055_get_operation_mode+0x78>
    }
    else
    {
        /*condition check for page, operation mode is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 8000dca:	4b17      	ldr	r3, [pc, #92]	; (8000e28 <bno055_get_operation_mode+0x80>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	791b      	ldrb	r3, [r3, #4]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d004      	beq.n	8000dde <bno055_get_operation_mode+0x36>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 8000dd4:	2000      	movs	r0, #0
 8000dd6:	f7ff fee1 	bl	8000b9c <bno055_write_page_id>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 8000dde:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d004      	beq.n	8000df0 <bno055_get_operation_mode+0x48>
 8000de6:	4b10      	ldr	r3, [pc, #64]	; (8000e28 <bno055_get_operation_mode+0x80>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	791b      	ldrb	r3, [r3, #4]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d113      	bne.n	8000e18 <bno055_get_operation_mode+0x70>
        {
            /* Read the value of operation mode*/
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000df0:	4b0d      	ldr	r3, [pc, #52]	; (8000e28 <bno055_get_operation_mode+0x80>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	691c      	ldr	r4, [r3, #16]
 8000df6:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <bno055_get_operation_mode+0x80>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	7a58      	ldrb	r0, [r3, #9]
 8000dfc:	f107 020d 	add.w	r2, r7, #13
 8000e00:	2301      	movs	r3, #1
 8000e02:	213d      	movs	r1, #61	; 0x3d
 8000e04:	47a0      	blx	r4
 8000e06:	4603      	mov	r3, r0
 8000e08:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_OPERATION_MODE_REG,
                                                      &data_u8r,
                                                      BNO055_GEN_READ_WRITE_LENGTH);
            *operation_mode_u8 = BNO055_GET_BITSLICE(data_u8r, BNO055_OPERATION_MODE);
 8000e0a:	7b7b      	ldrb	r3, [r7, #13]
 8000e0c:	f003 030f 	and.w	r3, r3, #15
 8000e10:	b2da      	uxtb	r2, r3
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	701a      	strb	r2, [r3, #0]
 8000e16:	e001      	b.n	8000e1c <bno055_get_operation_mode+0x74>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8000e18:	23ff      	movs	r3, #255	; 0xff
 8000e1a:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8000e1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3714      	adds	r7, #20
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd90      	pop	{r4, r7, pc}
 8000e28:	2000002c 	.word	0x2000002c

08000e2c <bno055_set_operation_mode>:
 *  becomes zero and it is mainly derived
 *  to configure the various settings of the BNO
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_operation_mode(u8 operation_mode_u8)
{
 8000e2c:	b590      	push	{r4, r7, lr}
 8000e2e:	b085      	sub	sp, #20
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	71fb      	strb	r3, [r7, #7]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000e36:	23ff      	movs	r3, #255	; 0xff
 8000e38:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	737b      	strb	r3, [r7, #13]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	733b      	strb	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 8000e42:	23ff      	movs	r3, #255	; 0xff
 8000e44:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000e46:	4b5c      	ldr	r3, [pc, #368]	; (8000fb8 <bno055_set_operation_mode+0x18c>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d102      	bne.n	8000e54 <bno055_set_operation_mode+0x28>
    {
        return BNO055_E_NULL_PTR;
 8000e4e:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8000e52:	e0ac      	b.n	8000fae <bno055_set_operation_mode+0x182>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 8000e54:	f107 030c 	add.w	r3, r7, #12
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff ffa5 	bl	8000da8 <bno055_get_operation_mode>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	73bb      	strb	r3, [r7, #14]
        if (stat_s8 == BNO055_SUCCESS)
 8000e62:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	f040 809d 	bne.w	8000fa6 <bno055_set_operation_mode+0x17a>
        {
            /* If the previous operation mode is config it is
             * directly write the operation mode */
            if (prev_opmode_u8 == BNO055_OPERATION_MODE_CONFIG)
 8000e6c:	7b3b      	ldrb	r3, [r7, #12]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d137      	bne.n	8000ee2 <bno055_set_operation_mode+0xb6>
            {
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000e72:	4b51      	ldr	r3, [pc, #324]	; (8000fb8 <bno055_set_operation_mode+0x18c>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	691c      	ldr	r4, [r3, #16]
 8000e78:	4b4f      	ldr	r3, [pc, #316]	; (8000fb8 <bno055_set_operation_mode+0x18c>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	7a58      	ldrb	r0, [r3, #9]
 8000e7e:	f107 020d 	add.w	r2, r7, #13
 8000e82:	2301      	movs	r3, #1
 8000e84:	213d      	movs	r1, #61	; 0x3d
 8000e86:	47a0      	blx	r4
 8000e88:	4603      	mov	r3, r0
 8000e8a:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_OPERATION_MODE_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 8000e8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	f040 808a 	bne.w	8000faa <bno055_set_operation_mode+0x17e>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, operation_mode_u8);
 8000e96:	7b7b      	ldrb	r3, [r7, #13]
 8000e98:	b25b      	sxtb	r3, r3
 8000e9a:	f023 030f 	bic.w	r3, r3, #15
 8000e9e:	b25a      	sxtb	r2, r3
 8000ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea4:	f003 030f 	and.w	r3, r3, #15
 8000ea8:	b25b      	sxtb	r3, r3
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	b25b      	sxtb	r3, r3
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	737b      	strb	r3, [r7, #13]
                    com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8000eb2:	4b41      	ldr	r3, [pc, #260]	; (8000fb8 <bno055_set_operation_mode+0x18c>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	68dc      	ldr	r4, [r3, #12]
 8000eb8:	4b3f      	ldr	r3, [pc, #252]	; (8000fb8 <bno055_set_operation_mode+0x18c>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	7a58      	ldrb	r0, [r3, #9]
 8000ebe:	f107 020d 	add.w	r2, r7, #13
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	213d      	movs	r1, #61	; 0x3d
 8000ec6:	47a0      	blx	r4
 8000ec8:	4603      	mov	r3, r0
 8000eca:	b2da      	uxtb	r2, r3
 8000ecc:	7bfb      	ldrb	r3, [r7, #15]
 8000ece:	4413      	add	r3, r2
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	73fb      	strb	r3, [r7, #15]
                                                                BNO055_GEN_READ_WRITE_LENGTH);

                    /* Config mode to other
                     * operation mode switching
                     * required delay of 600ms*/
                    p_bno055->delay_msec(BNO055_MODE_SWITCHING_DELAY);
 8000ed4:	4b38      	ldr	r3, [pc, #224]	; (8000fb8 <bno055_set_operation_mode+0x18c>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	695b      	ldr	r3, [r3, #20]
 8000eda:	f44f 7016 	mov.w	r0, #600	; 0x258
 8000ede:	4798      	blx	r3
 8000ee0:	e063      	b.n	8000faa <bno055_set_operation_mode+0x17e>
            else
            {
                /* If the previous operation
                 * mode is not config it is
                 * write the config mode */
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000ee2:	4b35      	ldr	r3, [pc, #212]	; (8000fb8 <bno055_set_operation_mode+0x18c>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	691c      	ldr	r4, [r3, #16]
 8000ee8:	4b33      	ldr	r3, [pc, #204]	; (8000fb8 <bno055_set_operation_mode+0x18c>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	7a58      	ldrb	r0, [r3, #9]
 8000eee:	f107 020d 	add.w	r2, r7, #13
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	213d      	movs	r1, #61	; 0x3d
 8000ef6:	47a0      	blx	r4
 8000ef8:	4603      	mov	r3, r0
 8000efa:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_OPERATION_MODE_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 8000efc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d116      	bne.n	8000f32 <bno055_set_operation_mode+0x106>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, BNO055_OPERATION_MODE_CONFIG);
 8000f04:	7b7b      	ldrb	r3, [r7, #13]
 8000f06:	f023 030f 	bic.w	r3, r3, #15
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	737b      	strb	r3, [r7, #13]
                    com_rslt +=
                        bno055_write_register(BNO055_OPERATION_MODE_REG, &data_u8r, BNO055_GEN_READ_WRITE_LENGTH);
 8000f0e:	f107 030d 	add.w	r3, r7, #13
 8000f12:	2201      	movs	r2, #1
 8000f14:	4619      	mov	r1, r3
 8000f16:	203d      	movs	r0, #61	; 0x3d
 8000f18:	f7ff fe1a 	bl	8000b50 <bno055_write_register>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	b2da      	uxtb	r2, r3
                    com_rslt +=
 8000f20:	7bfb      	ldrb	r3, [r7, #15]
 8000f22:	4413      	add	r3, r2
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	73fb      	strb	r3, [r7, #15]

                    /* other mode to config mode switching
                     * required delay of 20ms*/
                    p_bno055->delay_msec(BNO055_CONFIG_MODE_SWITCHING_DELAY);
 8000f28:	4b23      	ldr	r3, [pc, #140]	; (8000fb8 <bno055_set_operation_mode+0x18c>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	695b      	ldr	r3, [r3, #20]
 8000f2e:	2014      	movs	r0, #20
 8000f30:	4798      	blx	r3
                }

                /* Write the operation mode */
                if (operation_mode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d038      	beq.n	8000faa <bno055_set_operation_mode+0x17e>
                {
                    com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000f38:	4b1f      	ldr	r3, [pc, #124]	; (8000fb8 <bno055_set_operation_mode+0x18c>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	691c      	ldr	r4, [r3, #16]
 8000f3e:	4b1e      	ldr	r3, [pc, #120]	; (8000fb8 <bno055_set_operation_mode+0x18c>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	7a58      	ldrb	r0, [r3, #9]
 8000f44:	f107 020d 	add.w	r2, r7, #13
 8000f48:	2301      	movs	r3, #1
 8000f4a:	213d      	movs	r1, #61	; 0x3d
 8000f4c:	47a0      	blx	r4
 8000f4e:	4603      	mov	r3, r0
 8000f50:	73fb      	strb	r3, [r7, #15]
                                                              BNO055_OPERATION_MODE_REG,
                                                              &data_u8r,
                                                              BNO055_GEN_READ_WRITE_LENGTH);
                    if (com_rslt == BNO055_SUCCESS)
 8000f52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d127      	bne.n	8000faa <bno055_set_operation_mode+0x17e>
                    {
                        data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, operation_mode_u8);
 8000f5a:	7b7b      	ldrb	r3, [r7, #13]
 8000f5c:	b25b      	sxtb	r3, r3
 8000f5e:	f023 030f 	bic.w	r3, r3, #15
 8000f62:	b25a      	sxtb	r2, r3
 8000f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f68:	f003 030f 	and.w	r3, r3, #15
 8000f6c:	b25b      	sxtb	r3, r3
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	b25b      	sxtb	r3, r3
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	737b      	strb	r3, [r7, #13]
                        com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8000f76:	4b10      	ldr	r3, [pc, #64]	; (8000fb8 <bno055_set_operation_mode+0x18c>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	68dc      	ldr	r4, [r3, #12]
 8000f7c:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <bno055_set_operation_mode+0x18c>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	7a58      	ldrb	r0, [r3, #9]
 8000f82:	f107 020d 	add.w	r2, r7, #13
 8000f86:	2301      	movs	r3, #1
 8000f88:	213d      	movs	r1, #61	; 0x3d
 8000f8a:	47a0      	blx	r4
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	b2da      	uxtb	r2, r3
 8000f90:	7bfb      	ldrb	r3, [r7, #15]
 8000f92:	4413      	add	r3, r2
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	73fb      	strb	r3, [r7, #15]
                                                                    BNO055_GEN_READ_WRITE_LENGTH);

                        /* Config mode to other
                         * operation mode switching
                         * required delay of 600ms*/
                        p_bno055->delay_msec(BNO055_MODE_SWITCHING_DELAY);
 8000f98:	4b07      	ldr	r3, [pc, #28]	; (8000fb8 <bno055_set_operation_mode+0x18c>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	695b      	ldr	r3, [r3, #20]
 8000f9e:	f44f 7016 	mov.w	r0, #600	; 0x258
 8000fa2:	4798      	blx	r3
 8000fa4:	e001      	b.n	8000faa <bno055_set_operation_mode+0x17e>
                }
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8000fa6:	23ff      	movs	r3, #255	; 0xff
 8000fa8:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8000faa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3714      	adds	r7, #20
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd90      	pop	{r4, r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	2000002c 	.word	0x2000002c

08000fbc <bno055_set_power_mode>:
 *  @note For detailed about LOWPOWER mode
 *  refer data sheet 3.4.2
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_power_mode(u8 power_mode_u8)
{
 8000fbc:	b590      	push	{r4, r7, lr}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	71fb      	strb	r3, [r7, #7]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000fc6:	23ff      	movs	r3, #255	; 0xff
 8000fc8:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	737b      	strb	r3, [r7, #13]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	733b      	strb	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 8000fd2:	23ff      	movs	r3, #255	; 0xff
 8000fd4:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000fd6:	4b35      	ldr	r3, [pc, #212]	; (80010ac <bno055_set_power_mode+0xf0>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d102      	bne.n	8000fe4 <bno055_set_power_mode+0x28>
    {
        return BNO055_E_NULL_PTR;
 8000fde:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8000fe2:	e05f      	b.n	80010a4 <bno055_set_power_mode+0xe8>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 8000fe4:	f107 030c 	add.w	r3, r7, #12
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff fedd 	bl	8000da8 <bno055_get_operation_mode>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	73bb      	strb	r3, [r7, #14]
        if (stat_s8 == BNO055_SUCCESS)
 8000ff2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d143      	bne.n	8001082 <bno055_set_power_mode+0xc6>
        {
            if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8000ffa:	7b3b      	ldrb	r3, [r7, #12]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d008      	beq.n	8001012 <bno055_set_power_mode+0x56>
            {
                stat_s8 += bno055_set_operation_mode(BNO055_OPERATION_MODE_CONFIG);
 8001000:	2000      	movs	r0, #0
 8001002:	f7ff ff13 	bl	8000e2c <bno055_set_operation_mode>
 8001006:	4603      	mov	r3, r0
 8001008:	b2da      	uxtb	r2, r3
 800100a:	7bbb      	ldrb	r3, [r7, #14]
 800100c:	4413      	add	r3, r2
 800100e:	b2db      	uxtb	r3, r3
 8001010:	73bb      	strb	r3, [r7, #14]
            }
            if (stat_s8 == BNO055_SUCCESS)
 8001012:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d130      	bne.n	800107c <bno055_set_power_mode+0xc0>
            {
                /* Write the value of power mode */
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 800101a:	4b24      	ldr	r3, [pc, #144]	; (80010ac <bno055_set_power_mode+0xf0>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	691c      	ldr	r4, [r3, #16]
 8001020:	4b22      	ldr	r3, [pc, #136]	; (80010ac <bno055_set_power_mode+0xf0>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	7a58      	ldrb	r0, [r3, #9]
 8001026:	f107 020d 	add.w	r2, r7, #13
 800102a:	2301      	movs	r3, #1
 800102c:	213e      	movs	r1, #62	; 0x3e
 800102e:	47a0      	blx	r4
 8001030:	4603      	mov	r3, r0
 8001032:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_POWER_MODE_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 8001034:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d124      	bne.n	8001086 <bno055_set_power_mode+0xca>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_POWER_MODE, power_mode_u8);
 800103c:	7b7b      	ldrb	r3, [r7, #13]
 800103e:	b25b      	sxtb	r3, r3
 8001040:	f023 0303 	bic.w	r3, r3, #3
 8001044:	b25a      	sxtb	r2, r3
 8001046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104a:	f003 0303 	and.w	r3, r3, #3
 800104e:	b25b      	sxtb	r3, r3
 8001050:	4313      	orrs	r3, r2
 8001052:	b25b      	sxtb	r3, r3
 8001054:	b2db      	uxtb	r3, r3
 8001056:	737b      	strb	r3, [r7, #13]
                    com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8001058:	4b14      	ldr	r3, [pc, #80]	; (80010ac <bno055_set_power_mode+0xf0>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	68dc      	ldr	r4, [r3, #12]
 800105e:	4b13      	ldr	r3, [pc, #76]	; (80010ac <bno055_set_power_mode+0xf0>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	7a58      	ldrb	r0, [r3, #9]
 8001064:	f107 020d 	add.w	r2, r7, #13
 8001068:	2301      	movs	r3, #1
 800106a:	213e      	movs	r1, #62	; 0x3e
 800106c:	47a0      	blx	r4
 800106e:	4603      	mov	r3, r0
 8001070:	b2da      	uxtb	r2, r3
 8001072:	7bfb      	ldrb	r3, [r7, #15]
 8001074:	4413      	add	r3, r2
 8001076:	b2db      	uxtb	r3, r3
 8001078:	73fb      	strb	r3, [r7, #15]
 800107a:	e004      	b.n	8001086 <bno055_set_power_mode+0xca>
                                                                BNO055_GEN_READ_WRITE_LENGTH);
                }
            }
            else
            {
                com_rslt = BNO055_ERROR;
 800107c:	23ff      	movs	r3, #255	; 0xff
 800107e:	73fb      	strb	r3, [r7, #15]
 8001080:	e001      	b.n	8001086 <bno055_set_power_mode+0xca>
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8001082:	23ff      	movs	r3, #255	; 0xff
 8001084:	73fb      	strb	r3, [r7, #15]
        }
    }
    if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8001086:	7b3b      	ldrb	r3, [r7, #12]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d009      	beq.n	80010a0 <bno055_set_power_mode+0xe4>
    {
        /* set the operation mode
         * of previous operation mode*/
        com_rslt += bno055_set_operation_mode(prev_opmode_u8);
 800108c:	7b3b      	ldrb	r3, [r7, #12]
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff fecc 	bl	8000e2c <bno055_set_operation_mode>
 8001094:	4603      	mov	r3, r0
 8001096:	b2da      	uxtb	r2, r3
 8001098:	7bfb      	ldrb	r3, [r7, #15]
 800109a:	4413      	add	r3, r2
 800109c:	b2db      	uxtb	r3, r3
 800109e:	73fb      	strb	r3, [r7, #15]
    }

    return com_rslt;
 80010a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3714      	adds	r7, #20
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd90      	pop	{r4, r7, pc}
 80010ac:	2000002c 	.word	0x2000002c

080010b0 <read_convert_lin_accel>:
    comres += bno055_convert_double_euler_hpr_rad(&d_euler_hpr);

    return d_euler_hpr;
}

struct bno055_linear_accel_double_t read_convert_lin_accel(void) {
 80010b0:	b5b0      	push	{r4, r5, r7, lr}
 80010b2:	b092      	sub	sp, #72	; 0x48
 80010b4:	af00      	add	r7, sp, #0
    /*********read linear acceleration converted data**********/
    /* structure used to read the linear accel xyz data output as m/s2*/
    struct bno055_linear_accel_double_t d_linear_accel_xyz;
    comres += bno055_convert_double_linear_accel_xyz_msq(&d_linear_accel_xyz);
 80010b6:	f107 0318 	add.w	r3, r7, #24
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff fe24 	bl	8000d08 <bno055_convert_double_linear_accel_xyz_msq>
 80010c0:	4603      	mov	r3, r0
 80010c2:	461a      	mov	r2, r3
 80010c4:	4b14      	ldr	r3, [pc, #80]	; (8001118 <read_convert_lin_accel+0x68>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4413      	add	r3, r2
 80010ca:	4a13      	ldr	r2, [pc, #76]	; (8001118 <read_convert_lin_accel+0x68>)
 80010cc:	6013      	str	r3, [r2, #0]

    return d_linear_accel_xyz;
 80010ce:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80010d2:	f107 0518 	add.w	r5, r7, #24
 80010d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010da:	e895 0003 	ldmia.w	r5, {r0, r1}
 80010de:	e884 0003 	stmia.w	r4, {r0, r1}
 80010e2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80010e6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80010ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80010ee:	ec45 4b15 	vmov	d5, r4, r5
 80010f2:	ec41 0b16 	vmov	d6, r0, r1
 80010f6:	ec43 2b17 	vmov	d7, r2, r3
}
 80010fa:	eeb0 0a45 	vmov.f32	s0, s10
 80010fe:	eef0 0a65 	vmov.f32	s1, s11
 8001102:	eeb0 1a46 	vmov.f32	s2, s12
 8001106:	eef0 1a66 	vmov.f32	s3, s13
 800110a:	eeb0 2a47 	vmov.f32	s4, s14
 800110e:	eef0 2a67 	vmov.f32	s5, s15
 8001112:	3748      	adds	r7, #72	; 0x48
 8001114:	46bd      	mov	sp, r7
 8001116:	bdb0      	pop	{r4, r5, r7, pc}
 8001118:	20000000 	.word	0x20000000

0800111c <bno055_init_ic2>:
    comres += bno055_convert_double_gravity_xyz_msq(&d_gravity_xyz);

    return d_gravity_xyz;
}

void bno055_init_ic2() {
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
    I2C_routine();
 8001120:	f000 f81e 	bl	8001160 <I2C_routine>
    comres = bno055_init(&bno055);
 8001124:	480b      	ldr	r0, [pc, #44]	; (8001154 <bno055_init_ic2+0x38>)
 8001126:	f7ff fc53 	bl	80009d0 <bno055_init>
 800112a:	4603      	mov	r3, r0
 800112c:	461a      	mov	r2, r3
 800112e:	4b0a      	ldr	r3, [pc, #40]	; (8001158 <bno055_init_ic2+0x3c>)
 8001130:	601a      	str	r2, [r3, #0]
    power_mode = BNO055_POWER_MODE_NORMAL;
 8001132:	4b0a      	ldr	r3, [pc, #40]	; (800115c <bno055_init_ic2+0x40>)
 8001134:	2200      	movs	r2, #0
 8001136:	701a      	strb	r2, [r3, #0]
    comres += bno055_set_power_mode(power_mode);
 8001138:	4b08      	ldr	r3, [pc, #32]	; (800115c <bno055_init_ic2+0x40>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ff3d 	bl	8000fbc <bno055_set_power_mode>
 8001142:	4603      	mov	r3, r0
 8001144:	461a      	mov	r2, r3
 8001146:	4b04      	ldr	r3, [pc, #16]	; (8001158 <bno055_init_ic2+0x3c>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4413      	add	r3, r2
 800114c:	4a02      	ldr	r2, [pc, #8]	; (8001158 <bno055_init_ic2+0x3c>)
 800114e:	6013      	str	r3, [r2, #0]
}
 8001150:	bf00      	nop
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20000034 	.word	0x20000034
 8001158:	20000000 	.word	0x20000000
 800115c:	20000030 	.word	0x20000030

08001160 <I2C_routine>:
	power_mode = BNO055_POWER_MODE_SUSPEND;
	comres += bno055_set_power_mode(power_mode);
	return comres;
}

s8 I2C_routine(void) {
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
    bno055.bus_write = BNO055_I2C_bus_write;
 8001164:	4b08      	ldr	r3, [pc, #32]	; (8001188 <I2C_routine+0x28>)
 8001166:	4a09      	ldr	r2, [pc, #36]	; (800118c <I2C_routine+0x2c>)
 8001168:	60da      	str	r2, [r3, #12]
    bno055.bus_read = BNO055_I2C_bus_read;
 800116a:	4b07      	ldr	r3, [pc, #28]	; (8001188 <I2C_routine+0x28>)
 800116c:	4a08      	ldr	r2, [pc, #32]	; (8001190 <I2C_routine+0x30>)
 800116e:	611a      	str	r2, [r3, #16]
    bno055.delay_msec = BNO055_delay_msek;
 8001170:	4b05      	ldr	r3, [pc, #20]	; (8001188 <I2C_routine+0x28>)
 8001172:	4a08      	ldr	r2, [pc, #32]	; (8001194 <I2C_routine+0x34>)
 8001174:	615a      	str	r2, [r3, #20]
    bno055.dev_addr = BNO055_I2C_ADDR1;
 8001176:	4b04      	ldr	r3, [pc, #16]	; (8001188 <I2C_routine+0x28>)
 8001178:	2228      	movs	r2, #40	; 0x28
 800117a:	725a      	strb	r2, [r3, #9]

    return BNO055_INIT_VALUE;
 800117c:	2300      	movs	r3, #0
}
 800117e:	4618      	mov	r0, r3
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	20000034 	.word	0x20000034
 800118c:	08001199 	.word	0x08001199
 8001190:	080011ed 	.word	0x080011ed
 8001194:	08001241 	.word	0x08001241

08001198 <BNO055_I2C_bus_write>:

s8 BNO055_I2C_bus_write(u8 dev_addr, u8 reg_addr, u8 *reg_data, u8 cnt) {
 8001198:	b580      	push	{r7, lr}
 800119a:	b088      	sub	sp, #32
 800119c:	af04      	add	r7, sp, #16
 800119e:	603a      	str	r2, [r7, #0]
 80011a0:	461a      	mov	r2, r3
 80011a2:	4603      	mov	r3, r0
 80011a4:	71fb      	strb	r3, [r7, #7]
 80011a6:	460b      	mov	r3, r1
 80011a8:	71bb      	strb	r3, [r7, #6]
 80011aa:	4613      	mov	r3, r2
 80011ac:	717b      	strb	r3, [r7, #5]
    s32 BNO055_iERROR = BNO055_INIT_VALUE;
 80011ae:	2300      	movs	r3, #0
 80011b0:	60fb      	str	r3, [r7, #12]
    BNO055_iERROR = HAL_I2C_Mem_Write(&hi2c3, dev_addr << 1, reg_addr, 1, reg_data, cnt, 1000);
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	b299      	uxth	r1, r3
 80011ba:	79bb      	ldrb	r3, [r7, #6]
 80011bc:	b29a      	uxth	r2, r3
 80011be:	797b      	ldrb	r3, [r7, #5]
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011c6:	9002      	str	r0, [sp, #8]
 80011c8:	9301      	str	r3, [sp, #4]
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	9300      	str	r3, [sp, #0]
 80011ce:	2301      	movs	r3, #1
 80011d0:	4805      	ldr	r0, [pc, #20]	; (80011e8 <BNO055_I2C_bus_write+0x50>)
 80011d2:	f000 ff05 	bl	8001fe0 <HAL_I2C_Mem_Write>
 80011d6:	4603      	mov	r3, r0
 80011d8:	60fb      	str	r3, [r7, #12]
    return (s8)BNO055_iERROR;
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	b25b      	sxtb	r3, r3
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3710      	adds	r7, #16
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	2000004c 	.word	0x2000004c

080011ec <BNO055_I2C_bus_read>:

s8 BNO055_I2C_bus_read(u8 dev_addr, u8 reg_addr, u8 *reg_data, u8 cnt) {
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b088      	sub	sp, #32
 80011f0:	af04      	add	r7, sp, #16
 80011f2:	603a      	str	r2, [r7, #0]
 80011f4:	461a      	mov	r2, r3
 80011f6:	4603      	mov	r3, r0
 80011f8:	71fb      	strb	r3, [r7, #7]
 80011fa:	460b      	mov	r3, r1
 80011fc:	71bb      	strb	r3, [r7, #6]
 80011fe:	4613      	mov	r3, r2
 8001200:	717b      	strb	r3, [r7, #5]
    s32 BNO055_iERROR = BNO055_INIT_VALUE;
 8001202:	2300      	movs	r3, #0
 8001204:	60fb      	str	r3, [r7, #12]
    BNO055_iERROR = HAL_I2C_Mem_Read(&hi2c3, dev_addr << 1, reg_addr, 1, reg_data, cnt, 1000);
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	b29b      	uxth	r3, r3
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	b299      	uxth	r1, r3
 800120e:	79bb      	ldrb	r3, [r7, #6]
 8001210:	b29a      	uxth	r2, r3
 8001212:	797b      	ldrb	r3, [r7, #5]
 8001214:	b29b      	uxth	r3, r3
 8001216:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800121a:	9002      	str	r0, [sp, #8]
 800121c:	9301      	str	r3, [sp, #4]
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	9300      	str	r3, [sp, #0]
 8001222:	2301      	movs	r3, #1
 8001224:	4805      	ldr	r0, [pc, #20]	; (800123c <BNO055_I2C_bus_read+0x50>)
 8001226:	f000 ffef 	bl	8002208 <HAL_I2C_Mem_Read>
 800122a:	4603      	mov	r3, r0
 800122c:	60fb      	str	r3, [r7, #12]
    return (s8)BNO055_iERROR;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	b25b      	sxtb	r3, r3
}
 8001232:	4618      	mov	r0, r3
 8001234:	3710      	adds	r7, #16
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	2000004c 	.word	0x2000004c

08001240 <BNO055_delay_msek>:

void BNO055_delay_msek(u32 msek) { HAL_Delay(msek); }
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f000 fb8d 	bl	8001968 <HAL_Delay>
 800124e:	bf00      	nop
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
	...

08001258 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b09c      	sub	sp, #112	; 0x70
 800125c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800125e:	f000 fb1d 	bl	800189c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001262:	f000 f8af 	bl	80013c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001266:	f000 f97f 	bl	8001568 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800126a:	f000 f94d 	bl	8001508 <MX_USART2_UART_Init>
  MX_I2C3_Init();
 800126e:	f000 f90b 	bl	8001488 <MX_I2C3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  bno055_init_ic2();
 8001272:	f7ff ff53 	bl	800111c <bno055_init_ic2>
  {
    /* USER CODE END WHILE */
	  //Linear Acceleration
	  struct bno055_linear_accel_double_t convert_lin_accel_data;

	  convert_lin_accel_data = read_convert_lin_accel();
 8001276:	f7ff ff1b 	bl	80010b0 <read_convert_lin_accel>
 800127a:	eeb0 5a40 	vmov.f32	s10, s0
 800127e:	eef0 5a60 	vmov.f32	s11, s1
 8001282:	eeb0 6a41 	vmov.f32	s12, s2
 8001286:	eef0 6a61 	vmov.f32	s13, s3
 800128a:	eeb0 7a42 	vmov.f32	s14, s4
 800128e:	eef0 7a62 	vmov.f32	s15, s5
 8001292:	ed87 5b10 	vstr	d5, [r7, #64]	; 0x40
 8001296:	ed87 6b12 	vstr	d6, [r7, #72]	; 0x48
 800129a:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50

	  double d_linear_accel_datax = convert_lin_accel_data.x;
 800129e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80012a2:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	  double d_linear_accel_datay = convert_lin_accel_data.y;
 80012a6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80012aa:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	  double d_linear_accel_dataz = convert_lin_accel_data.z;
 80012ae:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80012b2:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	  char lin_accel_a[64];

	  HAL_UART_Transmit(&huart2, (uint8_t *)"x: ", strlen("x: "), 1000);
 80012b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ba:	2203      	movs	r2, #3
 80012bc:	493b      	ldr	r1, [pc, #236]	; (80013ac <main+0x154>)
 80012be:	483c      	ldr	r0, [pc, #240]	; (80013b0 <main+0x158>)
 80012c0:	f003 f902 	bl	80044c8 <HAL_UART_Transmit>
	  itoa(d_linear_accel_datax*100, lin_accel_a, 10);
 80012c4:	f04f 0200 	mov.w	r2, #0
 80012c8:	4b3a      	ldr	r3, [pc, #232]	; (80013b4 <main+0x15c>)
 80012ca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80012ce:	f7ff f945 	bl	800055c <__aeabi_dmul>
 80012d2:	4602      	mov	r2, r0
 80012d4:	460b      	mov	r3, r1
 80012d6:	4610      	mov	r0, r2
 80012d8:	4619      	mov	r1, r3
 80012da:	f7ff fb51 	bl	8000980 <__aeabi_d2iz>
 80012de:	463b      	mov	r3, r7
 80012e0:	220a      	movs	r2, #10
 80012e2:	4619      	mov	r1, r3
 80012e4:	f003 fda0 	bl	8004e28 <itoa>
	  HAL_UART_Transmit(&huart2, (uint8_t *)lin_accel_a, strlen(lin_accel_a), 1000);
 80012e8:	463b      	mov	r3, r7
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7fe ff72 	bl	80001d4 <strlen>
 80012f0:	4603      	mov	r3, r0
 80012f2:	b29a      	uxth	r2, r3
 80012f4:	4639      	mov	r1, r7
 80012f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012fa:	482d      	ldr	r0, [pc, #180]	; (80013b0 <main+0x158>)
 80012fc:	f003 f8e4 	bl	80044c8 <HAL_UART_Transmit>

	  HAL_UART_Transmit(&huart2, (uint8_t *)" y: ", strlen(" y: "), 1000);
 8001300:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001304:	2204      	movs	r2, #4
 8001306:	492c      	ldr	r1, [pc, #176]	; (80013b8 <main+0x160>)
 8001308:	4829      	ldr	r0, [pc, #164]	; (80013b0 <main+0x158>)
 800130a:	f003 f8dd 	bl	80044c8 <HAL_UART_Transmit>
	  itoa(d_linear_accel_datay*100, lin_accel_a, 10);
 800130e:	f04f 0200 	mov.w	r2, #0
 8001312:	4b28      	ldr	r3, [pc, #160]	; (80013b4 <main+0x15c>)
 8001314:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001318:	f7ff f920 	bl	800055c <__aeabi_dmul>
 800131c:	4602      	mov	r2, r0
 800131e:	460b      	mov	r3, r1
 8001320:	4610      	mov	r0, r2
 8001322:	4619      	mov	r1, r3
 8001324:	f7ff fb2c 	bl	8000980 <__aeabi_d2iz>
 8001328:	463b      	mov	r3, r7
 800132a:	220a      	movs	r2, #10
 800132c:	4619      	mov	r1, r3
 800132e:	f003 fd7b 	bl	8004e28 <itoa>
	  HAL_UART_Transmit(&huart2, (uint8_t *)lin_accel_a, strlen(lin_accel_a), 1000);
 8001332:	463b      	mov	r3, r7
 8001334:	4618      	mov	r0, r3
 8001336:	f7fe ff4d 	bl	80001d4 <strlen>
 800133a:	4603      	mov	r3, r0
 800133c:	b29a      	uxth	r2, r3
 800133e:	4639      	mov	r1, r7
 8001340:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001344:	481a      	ldr	r0, [pc, #104]	; (80013b0 <main+0x158>)
 8001346:	f003 f8bf 	bl	80044c8 <HAL_UART_Transmit>

	  HAL_UART_Transmit(&huart2, (uint8_t *)" z: ", strlen(" z: "), 1000);
 800134a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800134e:	2204      	movs	r2, #4
 8001350:	491a      	ldr	r1, [pc, #104]	; (80013bc <main+0x164>)
 8001352:	4817      	ldr	r0, [pc, #92]	; (80013b0 <main+0x158>)
 8001354:	f003 f8b8 	bl	80044c8 <HAL_UART_Transmit>
	  itoa(d_linear_accel_dataz*100, lin_accel_a, 10);
 8001358:	f04f 0200 	mov.w	r2, #0
 800135c:	4b15      	ldr	r3, [pc, #84]	; (80013b4 <main+0x15c>)
 800135e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001362:	f7ff f8fb 	bl	800055c <__aeabi_dmul>
 8001366:	4602      	mov	r2, r0
 8001368:	460b      	mov	r3, r1
 800136a:	4610      	mov	r0, r2
 800136c:	4619      	mov	r1, r3
 800136e:	f7ff fb07 	bl	8000980 <__aeabi_d2iz>
 8001372:	463b      	mov	r3, r7
 8001374:	220a      	movs	r2, #10
 8001376:	4619      	mov	r1, r3
 8001378:	f003 fd56 	bl	8004e28 <itoa>
	  HAL_UART_Transmit(&huart2, (uint8_t *)lin_accel_a, strlen(lin_accel_a), 1000);
 800137c:	463b      	mov	r3, r7
 800137e:	4618      	mov	r0, r3
 8001380:	f7fe ff28 	bl	80001d4 <strlen>
 8001384:	4603      	mov	r3, r0
 8001386:	b29a      	uxth	r2, r3
 8001388:	4639      	mov	r1, r7
 800138a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800138e:	4808      	ldr	r0, [pc, #32]	; (80013b0 <main+0x158>)
 8001390:	f003 f89a 	bl	80044c8 <HAL_UART_Transmit>

	  HAL_UART_Transmit(&huart2, (uint8_t *)"\n\r", strlen("\n\r"), 1000); //carriage return
 8001394:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001398:	2202      	movs	r2, #2
 800139a:	4909      	ldr	r1, [pc, #36]	; (80013c0 <main+0x168>)
 800139c:	4804      	ldr	r0, [pc, #16]	; (80013b0 <main+0x158>)
 800139e:	f003 f893 	bl	80044c8 <HAL_UART_Transmit>
	  HAL_Delay(250);
 80013a2:	20fa      	movs	r0, #250	; 0xfa
 80013a4:	f000 fae0 	bl	8001968 <HAL_Delay>
  {
 80013a8:	e765      	b.n	8001276 <main+0x1e>
 80013aa:	bf00      	nop
 80013ac:	08004efc 	.word	0x08004efc
 80013b0:	200000a0 	.word	0x200000a0
 80013b4:	40590000 	.word	0x40590000
 80013b8:	08004f00 	.word	0x08004f00
 80013bc:	08004f08 	.word	0x08004f08
 80013c0:	08004f10 	.word	0x08004f10

080013c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b0a6      	sub	sp, #152	; 0x98
 80013c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ca:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80013ce:	2228      	movs	r2, #40	; 0x28
 80013d0:	2100      	movs	r1, #0
 80013d2:	4618      	mov	r0, r3
 80013d4:	f003 fd2a 	bl	8004e2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013d8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
 80013e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013e8:	1d3b      	adds	r3, r7, #4
 80013ea:	2258      	movs	r2, #88	; 0x58
 80013ec:	2100      	movs	r1, #0
 80013ee:	4618      	mov	r0, r3
 80013f0:	f003 fd1c 	bl	8004e2c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013f4:	2302      	movs	r3, #2
 80013f6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013f8:	2301      	movs	r3, #1
 80013fa:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013fc:	2310      	movs	r3, #16
 80013fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001402:	2302      	movs	r3, #2
 8001404:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001408:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800140c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001410:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001414:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001418:	2300      	movs	r3, #0
 800141a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800141e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001422:	4618      	mov	r0, r3
 8001424:	f001 fb5a 	bl	8002adc <HAL_RCC_OscConfig>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800142e:	f000 f901 	bl	8001634 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001432:	230f      	movs	r3, #15
 8001434:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001436:	2302      	movs	r3, #2
 8001438:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800143a:	2300      	movs	r3, #0
 800143c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800143e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001442:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001444:	2300      	movs	r3, #0
 8001446:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001448:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800144c:	2102      	movs	r1, #2
 800144e:	4618      	mov	r0, r3
 8001450:	f002 fb98 	bl	8003b84 <HAL_RCC_ClockConfig>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800145a:	f000 f8eb 	bl	8001634 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C3;
 800145e:	4b09      	ldr	r3, [pc, #36]	; (8001484 <SystemClock_Config+0xc0>)
 8001460:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001462:	2300      	movs	r3, #0
 8001464:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_HSI;
 8001466:	2300      	movs	r3, #0
 8001468:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800146a:	1d3b      	adds	r3, r7, #4
 800146c:	4618      	mov	r0, r3
 800146e:	f002 fdbf 	bl	8003ff0 <HAL_RCCEx_PeriphCLKConfig>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001478:	f000 f8dc 	bl	8001634 <Error_Handler>
  }
}
 800147c:	bf00      	nop
 800147e:	3798      	adds	r7, #152	; 0x98
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	00040002 	.word	0x00040002

08001488 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800148c:	4b1b      	ldr	r3, [pc, #108]	; (80014fc <MX_I2C3_Init+0x74>)
 800148e:	4a1c      	ldr	r2, [pc, #112]	; (8001500 <MX_I2C3_Init+0x78>)
 8001490:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x2000090E;
 8001492:	4b1a      	ldr	r3, [pc, #104]	; (80014fc <MX_I2C3_Init+0x74>)
 8001494:	4a1b      	ldr	r2, [pc, #108]	; (8001504 <MX_I2C3_Init+0x7c>)
 8001496:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001498:	4b18      	ldr	r3, [pc, #96]	; (80014fc <MX_I2C3_Init+0x74>)
 800149a:	2200      	movs	r2, #0
 800149c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800149e:	4b17      	ldr	r3, [pc, #92]	; (80014fc <MX_I2C3_Init+0x74>)
 80014a0:	2201      	movs	r2, #1
 80014a2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014a4:	4b15      	ldr	r3, [pc, #84]	; (80014fc <MX_I2C3_Init+0x74>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80014aa:	4b14      	ldr	r3, [pc, #80]	; (80014fc <MX_I2C3_Init+0x74>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014b0:	4b12      	ldr	r3, [pc, #72]	; (80014fc <MX_I2C3_Init+0x74>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014b6:	4b11      	ldr	r3, [pc, #68]	; (80014fc <MX_I2C3_Init+0x74>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014bc:	4b0f      	ldr	r3, [pc, #60]	; (80014fc <MX_I2C3_Init+0x74>)
 80014be:	2200      	movs	r2, #0
 80014c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80014c2:	480e      	ldr	r0, [pc, #56]	; (80014fc <MX_I2C3_Init+0x74>)
 80014c4:	f000 fcfc 	bl	8001ec0 <HAL_I2C_Init>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80014ce:	f000 f8b1 	bl	8001634 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014d2:	2100      	movs	r1, #0
 80014d4:	4809      	ldr	r0, [pc, #36]	; (80014fc <MX_I2C3_Init+0x74>)
 80014d6:	f001 fa69 	bl	80029ac <HAL_I2CEx_ConfigAnalogFilter>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80014e0:	f000 f8a8 	bl	8001634 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80014e4:	2100      	movs	r1, #0
 80014e6:	4805      	ldr	r0, [pc, #20]	; (80014fc <MX_I2C3_Init+0x74>)
 80014e8:	f001 faab 	bl	8002a42 <HAL_I2CEx_ConfigDigitalFilter>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80014f2:	f000 f89f 	bl	8001634 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	2000004c 	.word	0x2000004c
 8001500:	40007800 	.word	0x40007800
 8001504:	2000090e 	.word	0x2000090e

08001508 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800150c:	4b14      	ldr	r3, [pc, #80]	; (8001560 <MX_USART2_UART_Init+0x58>)
 800150e:	4a15      	ldr	r2, [pc, #84]	; (8001564 <MX_USART2_UART_Init+0x5c>)
 8001510:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001512:	4b13      	ldr	r3, [pc, #76]	; (8001560 <MX_USART2_UART_Init+0x58>)
 8001514:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001518:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800151a:	4b11      	ldr	r3, [pc, #68]	; (8001560 <MX_USART2_UART_Init+0x58>)
 800151c:	2200      	movs	r2, #0
 800151e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001520:	4b0f      	ldr	r3, [pc, #60]	; (8001560 <MX_USART2_UART_Init+0x58>)
 8001522:	2200      	movs	r2, #0
 8001524:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001526:	4b0e      	ldr	r3, [pc, #56]	; (8001560 <MX_USART2_UART_Init+0x58>)
 8001528:	2200      	movs	r2, #0
 800152a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800152c:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <MX_USART2_UART_Init+0x58>)
 800152e:	220c      	movs	r2, #12
 8001530:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001532:	4b0b      	ldr	r3, [pc, #44]	; (8001560 <MX_USART2_UART_Init+0x58>)
 8001534:	2200      	movs	r2, #0
 8001536:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001538:	4b09      	ldr	r3, [pc, #36]	; (8001560 <MX_USART2_UART_Init+0x58>)
 800153a:	2200      	movs	r2, #0
 800153c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800153e:	4b08      	ldr	r3, [pc, #32]	; (8001560 <MX_USART2_UART_Init+0x58>)
 8001540:	2200      	movs	r2, #0
 8001542:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001544:	4b06      	ldr	r3, [pc, #24]	; (8001560 <MX_USART2_UART_Init+0x58>)
 8001546:	2200      	movs	r2, #0
 8001548:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800154a:	4805      	ldr	r0, [pc, #20]	; (8001560 <MX_USART2_UART_Init+0x58>)
 800154c:	f002 ff6e 	bl	800442c <HAL_UART_Init>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001556:	f000 f86d 	bl	8001634 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	200000a0 	.word	0x200000a0
 8001564:	40004400 	.word	0x40004400

08001568 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b08a      	sub	sp, #40	; 0x28
 800156c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800156e:	f107 0314 	add.w	r3, r7, #20
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	605a      	str	r2, [r3, #4]
 8001578:	609a      	str	r2, [r3, #8]
 800157a:	60da      	str	r2, [r3, #12]
 800157c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800157e:	4b2b      	ldr	r3, [pc, #172]	; (800162c <MX_GPIO_Init+0xc4>)
 8001580:	695b      	ldr	r3, [r3, #20]
 8001582:	4a2a      	ldr	r2, [pc, #168]	; (800162c <MX_GPIO_Init+0xc4>)
 8001584:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001588:	6153      	str	r3, [r2, #20]
 800158a:	4b28      	ldr	r3, [pc, #160]	; (800162c <MX_GPIO_Init+0xc4>)
 800158c:	695b      	ldr	r3, [r3, #20]
 800158e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001592:	613b      	str	r3, [r7, #16]
 8001594:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001596:	4b25      	ldr	r3, [pc, #148]	; (800162c <MX_GPIO_Init+0xc4>)
 8001598:	695b      	ldr	r3, [r3, #20]
 800159a:	4a24      	ldr	r2, [pc, #144]	; (800162c <MX_GPIO_Init+0xc4>)
 800159c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015a0:	6153      	str	r3, [r2, #20]
 80015a2:	4b22      	ldr	r3, [pc, #136]	; (800162c <MX_GPIO_Init+0xc4>)
 80015a4:	695b      	ldr	r3, [r3, #20]
 80015a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ae:	4b1f      	ldr	r3, [pc, #124]	; (800162c <MX_GPIO_Init+0xc4>)
 80015b0:	695b      	ldr	r3, [r3, #20]
 80015b2:	4a1e      	ldr	r2, [pc, #120]	; (800162c <MX_GPIO_Init+0xc4>)
 80015b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015b8:	6153      	str	r3, [r2, #20]
 80015ba:	4b1c      	ldr	r3, [pc, #112]	; (800162c <MX_GPIO_Init+0xc4>)
 80015bc:	695b      	ldr	r3, [r3, #20]
 80015be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c2:	60bb      	str	r3, [r7, #8]
 80015c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015c6:	4b19      	ldr	r3, [pc, #100]	; (800162c <MX_GPIO_Init+0xc4>)
 80015c8:	695b      	ldr	r3, [r3, #20]
 80015ca:	4a18      	ldr	r2, [pc, #96]	; (800162c <MX_GPIO_Init+0xc4>)
 80015cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015d0:	6153      	str	r3, [r2, #20]
 80015d2:	4b16      	ldr	r3, [pc, #88]	; (800162c <MX_GPIO_Init+0xc4>)
 80015d4:	695b      	ldr	r3, [r3, #20]
 80015d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015da:	607b      	str	r3, [r7, #4]
 80015dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80015de:	2200      	movs	r2, #0
 80015e0:	2120      	movs	r1, #32
 80015e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015e6:	f000 fc53 	bl	8001e90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015f0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80015f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015fa:	f107 0314 	add.w	r3, r7, #20
 80015fe:	4619      	mov	r1, r3
 8001600:	480b      	ldr	r0, [pc, #44]	; (8001630 <MX_GPIO_Init+0xc8>)
 8001602:	f000 fabb 	bl	8001b7c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001606:	2320      	movs	r3, #32
 8001608:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800160a:	2301      	movs	r3, #1
 800160c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160e:	2300      	movs	r3, #0
 8001610:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001612:	2300      	movs	r3, #0
 8001614:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001616:	f107 0314 	add.w	r3, r7, #20
 800161a:	4619      	mov	r1, r3
 800161c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001620:	f000 faac 	bl	8001b7c <HAL_GPIO_Init>

}
 8001624:	bf00      	nop
 8001626:	3728      	adds	r7, #40	; 0x28
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	40021000 	.word	0x40021000
 8001630:	48000800 	.word	0x48000800

08001634 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001638:	b672      	cpsid	i
}
 800163a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800163c:	e7fe      	b.n	800163c <Error_Handler+0x8>
	...

08001640 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001646:	4b0f      	ldr	r3, [pc, #60]	; (8001684 <HAL_MspInit+0x44>)
 8001648:	699b      	ldr	r3, [r3, #24]
 800164a:	4a0e      	ldr	r2, [pc, #56]	; (8001684 <HAL_MspInit+0x44>)
 800164c:	f043 0301 	orr.w	r3, r3, #1
 8001650:	6193      	str	r3, [r2, #24]
 8001652:	4b0c      	ldr	r3, [pc, #48]	; (8001684 <HAL_MspInit+0x44>)
 8001654:	699b      	ldr	r3, [r3, #24]
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	607b      	str	r3, [r7, #4]
 800165c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800165e:	4b09      	ldr	r3, [pc, #36]	; (8001684 <HAL_MspInit+0x44>)
 8001660:	69db      	ldr	r3, [r3, #28]
 8001662:	4a08      	ldr	r2, [pc, #32]	; (8001684 <HAL_MspInit+0x44>)
 8001664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001668:	61d3      	str	r3, [r2, #28]
 800166a:	4b06      	ldr	r3, [pc, #24]	; (8001684 <HAL_MspInit+0x44>)
 800166c:	69db      	ldr	r3, [r3, #28]
 800166e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001672:	603b      	str	r3, [r7, #0]
 8001674:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001676:	2007      	movs	r0, #7
 8001678:	f000 fa4c 	bl	8001b14 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800167c:	bf00      	nop
 800167e:	3708      	adds	r7, #8
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	40021000 	.word	0x40021000

08001688 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b08a      	sub	sp, #40	; 0x28
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001690:	f107 0314 	add.w	r3, r7, #20
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	60da      	str	r2, [r3, #12]
 800169e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a26      	ldr	r2, [pc, #152]	; (8001740 <HAL_I2C_MspInit+0xb8>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d146      	bne.n	8001738 <HAL_I2C_MspInit+0xb0>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016aa:	4b26      	ldr	r3, [pc, #152]	; (8001744 <HAL_I2C_MspInit+0xbc>)
 80016ac:	695b      	ldr	r3, [r3, #20]
 80016ae:	4a25      	ldr	r2, [pc, #148]	; (8001744 <HAL_I2C_MspInit+0xbc>)
 80016b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80016b4:	6153      	str	r3, [r2, #20]
 80016b6:	4b23      	ldr	r3, [pc, #140]	; (8001744 <HAL_I2C_MspInit+0xbc>)
 80016b8:	695b      	ldr	r3, [r3, #20]
 80016ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016be:	613b      	str	r3, [r7, #16]
 80016c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c2:	4b20      	ldr	r3, [pc, #128]	; (8001744 <HAL_I2C_MspInit+0xbc>)
 80016c4:	695b      	ldr	r3, [r3, #20]
 80016c6:	4a1f      	ldr	r2, [pc, #124]	; (8001744 <HAL_I2C_MspInit+0xbc>)
 80016c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016cc:	6153      	str	r3, [r2, #20]
 80016ce:	4b1d      	ldr	r3, [pc, #116]	; (8001744 <HAL_I2C_MspInit+0xbc>)
 80016d0:	695b      	ldr	r3, [r3, #20]
 80016d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016e0:	2312      	movs	r3, #18
 80016e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e4:	2300      	movs	r3, #0
 80016e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016e8:	2303      	movs	r3, #3
 80016ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C3;
 80016ec:	2303      	movs	r3, #3
 80016ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016f0:	f107 0314 	add.w	r3, r7, #20
 80016f4:	4619      	mov	r1, r3
 80016f6:	4814      	ldr	r0, [pc, #80]	; (8001748 <HAL_I2C_MspInit+0xc0>)
 80016f8:	f000 fa40 	bl	8001b7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80016fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001700:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001702:	2312      	movs	r3, #18
 8001704:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001706:	2300      	movs	r3, #0
 8001708:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800170a:	2303      	movs	r3, #3
 800170c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C3;
 800170e:	2303      	movs	r3, #3
 8001710:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001712:	f107 0314 	add.w	r3, r7, #20
 8001716:	4619      	mov	r1, r3
 8001718:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800171c:	f000 fa2e 	bl	8001b7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001720:	4b08      	ldr	r3, [pc, #32]	; (8001744 <HAL_I2C_MspInit+0xbc>)
 8001722:	69db      	ldr	r3, [r3, #28]
 8001724:	4a07      	ldr	r2, [pc, #28]	; (8001744 <HAL_I2C_MspInit+0xbc>)
 8001726:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800172a:	61d3      	str	r3, [r2, #28]
 800172c:	4b05      	ldr	r3, [pc, #20]	; (8001744 <HAL_I2C_MspInit+0xbc>)
 800172e:	69db      	ldr	r3, [r3, #28]
 8001730:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001734:	60bb      	str	r3, [r7, #8]
 8001736:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001738:	bf00      	nop
 800173a:	3728      	adds	r7, #40	; 0x28
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40007800 	.word	0x40007800
 8001744:	40021000 	.word	0x40021000
 8001748:	48000800 	.word	0x48000800

0800174c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b08a      	sub	sp, #40	; 0x28
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001754:	f107 0314 	add.w	r3, r7, #20
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	609a      	str	r2, [r3, #8]
 8001760:	60da      	str	r2, [r3, #12]
 8001762:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a17      	ldr	r2, [pc, #92]	; (80017c8 <HAL_UART_MspInit+0x7c>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d128      	bne.n	80017c0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800176e:	4b17      	ldr	r3, [pc, #92]	; (80017cc <HAL_UART_MspInit+0x80>)
 8001770:	69db      	ldr	r3, [r3, #28]
 8001772:	4a16      	ldr	r2, [pc, #88]	; (80017cc <HAL_UART_MspInit+0x80>)
 8001774:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001778:	61d3      	str	r3, [r2, #28]
 800177a:	4b14      	ldr	r3, [pc, #80]	; (80017cc <HAL_UART_MspInit+0x80>)
 800177c:	69db      	ldr	r3, [r3, #28]
 800177e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001782:	613b      	str	r3, [r7, #16]
 8001784:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001786:	4b11      	ldr	r3, [pc, #68]	; (80017cc <HAL_UART_MspInit+0x80>)
 8001788:	695b      	ldr	r3, [r3, #20]
 800178a:	4a10      	ldr	r2, [pc, #64]	; (80017cc <HAL_UART_MspInit+0x80>)
 800178c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001790:	6153      	str	r3, [r2, #20]
 8001792:	4b0e      	ldr	r3, [pc, #56]	; (80017cc <HAL_UART_MspInit+0x80>)
 8001794:	695b      	ldr	r3, [r3, #20]
 8001796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800179e:	230c      	movs	r3, #12
 80017a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a2:	2302      	movs	r3, #2
 80017a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a6:	2300      	movs	r3, #0
 80017a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017aa:	2300      	movs	r3, #0
 80017ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017ae:	2307      	movs	r3, #7
 80017b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b2:	f107 0314 	add.w	r3, r7, #20
 80017b6:	4619      	mov	r1, r3
 80017b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017bc:	f000 f9de 	bl	8001b7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017c0:	bf00      	nop
 80017c2:	3728      	adds	r7, #40	; 0x28
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40004400 	.word	0x40004400
 80017cc:	40021000 	.word	0x40021000

080017d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017d4:	e7fe      	b.n	80017d4 <NMI_Handler+0x4>

080017d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017d6:	b480      	push	{r7}
 80017d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017da:	e7fe      	b.n	80017da <HardFault_Handler+0x4>

080017dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017e0:	e7fe      	b.n	80017e0 <MemManage_Handler+0x4>

080017e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017e2:	b480      	push	{r7}
 80017e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017e6:	e7fe      	b.n	80017e6 <BusFault_Handler+0x4>

080017e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017ec:	e7fe      	b.n	80017ec <UsageFault_Handler+0x4>

080017ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017ee:	b480      	push	{r7}
 80017f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001800:	bf00      	nop
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr

0800180a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800180a:	b480      	push	{r7}
 800180c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800181c:	f000 f884 	bl	8001928 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001820:	bf00      	nop
 8001822:	bd80      	pop	{r7, pc}

08001824 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001828:	4b06      	ldr	r3, [pc, #24]	; (8001844 <SystemInit+0x20>)
 800182a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800182e:	4a05      	ldr	r2, [pc, #20]	; (8001844 <SystemInit+0x20>)
 8001830:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001834:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001838:	bf00      	nop
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	e000ed00 	.word	0xe000ed00

08001848 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001848:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001880 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800184c:	f7ff ffea 	bl	8001824 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001850:	480c      	ldr	r0, [pc, #48]	; (8001884 <LoopForever+0x6>)
  ldr r1, =_edata
 8001852:	490d      	ldr	r1, [pc, #52]	; (8001888 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001854:	4a0d      	ldr	r2, [pc, #52]	; (800188c <LoopForever+0xe>)
  movs r3, #0
 8001856:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001858:	e002      	b.n	8001860 <LoopCopyDataInit>

0800185a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800185a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800185c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800185e:	3304      	adds	r3, #4

08001860 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001860:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001862:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001864:	d3f9      	bcc.n	800185a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001866:	4a0a      	ldr	r2, [pc, #40]	; (8001890 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001868:	4c0a      	ldr	r4, [pc, #40]	; (8001894 <LoopForever+0x16>)
  movs r3, #0
 800186a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800186c:	e001      	b.n	8001872 <LoopFillZerobss>

0800186e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800186e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001870:	3204      	adds	r2, #4

08001872 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001872:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001874:	d3fb      	bcc.n	800186e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001876:	f003 fa9b 	bl	8004db0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800187a:	f7ff fced 	bl	8001258 <main>

0800187e <LoopForever>:

LoopForever:
    b LoopForever
 800187e:	e7fe      	b.n	800187e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001880:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001884:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001888:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800188c:	08004f7c 	.word	0x08004f7c
  ldr r2, =_sbss
 8001890:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001894:	2000012c 	.word	0x2000012c

08001898 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001898:	e7fe      	b.n	8001898 <ADC1_2_IRQHandler>
	...

0800189c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018a0:	4b08      	ldr	r3, [pc, #32]	; (80018c4 <HAL_Init+0x28>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a07      	ldr	r2, [pc, #28]	; (80018c4 <HAL_Init+0x28>)
 80018a6:	f043 0310 	orr.w	r3, r3, #16
 80018aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018ac:	2003      	movs	r0, #3
 80018ae:	f000 f931 	bl	8001b14 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018b2:	2000      	movs	r0, #0
 80018b4:	f000 f808 	bl	80018c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018b8:	f7ff fec2 	bl	8001640 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018bc:	2300      	movs	r3, #0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	40022000 	.word	0x40022000

080018c8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018d0:	4b12      	ldr	r3, [pc, #72]	; (800191c <HAL_InitTick+0x54>)
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	4b12      	ldr	r3, [pc, #72]	; (8001920 <HAL_InitTick+0x58>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	4619      	mov	r1, r3
 80018da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018de:	fbb3 f3f1 	udiv	r3, r3, r1
 80018e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018e6:	4618      	mov	r0, r3
 80018e8:	f000 f93b 	bl	8001b62 <HAL_SYSTICK_Config>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e00e      	b.n	8001914 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2b0f      	cmp	r3, #15
 80018fa:	d80a      	bhi.n	8001912 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018fc:	2200      	movs	r2, #0
 80018fe:	6879      	ldr	r1, [r7, #4]
 8001900:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001904:	f000 f911 	bl	8001b2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001908:	4a06      	ldr	r2, [pc, #24]	; (8001924 <HAL_InitTick+0x5c>)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800190e:	2300      	movs	r3, #0
 8001910:	e000      	b.n	8001914 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
}
 8001914:	4618      	mov	r0, r3
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	20000004 	.word	0x20000004
 8001920:	2000000c 	.word	0x2000000c
 8001924:	20000008 	.word	0x20000008

08001928 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800192c:	4b06      	ldr	r3, [pc, #24]	; (8001948 <HAL_IncTick+0x20>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	461a      	mov	r2, r3
 8001932:	4b06      	ldr	r3, [pc, #24]	; (800194c <HAL_IncTick+0x24>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4413      	add	r3, r2
 8001938:	4a04      	ldr	r2, [pc, #16]	; (800194c <HAL_IncTick+0x24>)
 800193a:	6013      	str	r3, [r2, #0]
}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	2000000c 	.word	0x2000000c
 800194c:	20000128 	.word	0x20000128

08001950 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  return uwTick;  
 8001954:	4b03      	ldr	r3, [pc, #12]	; (8001964 <HAL_GetTick+0x14>)
 8001956:	681b      	ldr	r3, [r3, #0]
}
 8001958:	4618      	mov	r0, r3
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	20000128 	.word	0x20000128

08001968 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001970:	f7ff ffee 	bl	8001950 <HAL_GetTick>
 8001974:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001980:	d005      	beq.n	800198e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001982:	4b0a      	ldr	r3, [pc, #40]	; (80019ac <HAL_Delay+0x44>)
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	461a      	mov	r2, r3
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	4413      	add	r3, r2
 800198c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800198e:	bf00      	nop
 8001990:	f7ff ffde 	bl	8001950 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	68fa      	ldr	r2, [r7, #12]
 800199c:	429a      	cmp	r2, r3
 800199e:	d8f7      	bhi.n	8001990 <HAL_Delay+0x28>
  {
  }
}
 80019a0:	bf00      	nop
 80019a2:	bf00      	nop
 80019a4:	3710      	adds	r7, #16
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	2000000c 	.word	0x2000000c

080019b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b085      	sub	sp, #20
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f003 0307 	and.w	r3, r3, #7
 80019be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019c0:	4b0c      	ldr	r3, [pc, #48]	; (80019f4 <__NVIC_SetPriorityGrouping+0x44>)
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019c6:	68ba      	ldr	r2, [r7, #8]
 80019c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019cc:	4013      	ands	r3, r2
 80019ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019e2:	4a04      	ldr	r2, [pc, #16]	; (80019f4 <__NVIC_SetPriorityGrouping+0x44>)
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	60d3      	str	r3, [r2, #12]
}
 80019e8:	bf00      	nop
 80019ea:	3714      	adds	r7, #20
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	e000ed00 	.word	0xe000ed00

080019f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019fc:	4b04      	ldr	r3, [pc, #16]	; (8001a10 <__NVIC_GetPriorityGrouping+0x18>)
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	0a1b      	lsrs	r3, r3, #8
 8001a02:	f003 0307 	and.w	r3, r3, #7
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr
 8001a10:	e000ed00 	.word	0xe000ed00

08001a14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	6039      	str	r1, [r7, #0]
 8001a1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	db0a      	blt.n	8001a3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	b2da      	uxtb	r2, r3
 8001a2c:	490c      	ldr	r1, [pc, #48]	; (8001a60 <__NVIC_SetPriority+0x4c>)
 8001a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a32:	0112      	lsls	r2, r2, #4
 8001a34:	b2d2      	uxtb	r2, r2
 8001a36:	440b      	add	r3, r1
 8001a38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a3c:	e00a      	b.n	8001a54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	b2da      	uxtb	r2, r3
 8001a42:	4908      	ldr	r1, [pc, #32]	; (8001a64 <__NVIC_SetPriority+0x50>)
 8001a44:	79fb      	ldrb	r3, [r7, #7]
 8001a46:	f003 030f 	and.w	r3, r3, #15
 8001a4a:	3b04      	subs	r3, #4
 8001a4c:	0112      	lsls	r2, r2, #4
 8001a4e:	b2d2      	uxtb	r2, r2
 8001a50:	440b      	add	r3, r1
 8001a52:	761a      	strb	r2, [r3, #24]
}
 8001a54:	bf00      	nop
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	e000e100 	.word	0xe000e100
 8001a64:	e000ed00 	.word	0xe000ed00

08001a68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b089      	sub	sp, #36	; 0x24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	60b9      	str	r1, [r7, #8]
 8001a72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	f003 0307 	and.w	r3, r3, #7
 8001a7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	f1c3 0307 	rsb	r3, r3, #7
 8001a82:	2b04      	cmp	r3, #4
 8001a84:	bf28      	it	cs
 8001a86:	2304      	movcs	r3, #4
 8001a88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	3304      	adds	r3, #4
 8001a8e:	2b06      	cmp	r3, #6
 8001a90:	d902      	bls.n	8001a98 <NVIC_EncodePriority+0x30>
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	3b03      	subs	r3, #3
 8001a96:	e000      	b.n	8001a9a <NVIC_EncodePriority+0x32>
 8001a98:	2300      	movs	r3, #0
 8001a9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	43da      	mvns	r2, r3
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	401a      	ands	r2, r3
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ab0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aba:	43d9      	mvns	r1, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac0:	4313      	orrs	r3, r2
         );
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3724      	adds	r7, #36	; 0x24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
	...

08001ad0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	3b01      	subs	r3, #1
 8001adc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ae0:	d301      	bcc.n	8001ae6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e00f      	b.n	8001b06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ae6:	4a0a      	ldr	r2, [pc, #40]	; (8001b10 <SysTick_Config+0x40>)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	3b01      	subs	r3, #1
 8001aec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aee:	210f      	movs	r1, #15
 8001af0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001af4:	f7ff ff8e 	bl	8001a14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001af8:	4b05      	ldr	r3, [pc, #20]	; (8001b10 <SysTick_Config+0x40>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001afe:	4b04      	ldr	r3, [pc, #16]	; (8001b10 <SysTick_Config+0x40>)
 8001b00:	2207      	movs	r2, #7
 8001b02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b04:	2300      	movs	r3, #0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	e000e010 	.word	0xe000e010

08001b14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f7ff ff47 	bl	80019b0 <__NVIC_SetPriorityGrouping>
}
 8001b22:	bf00      	nop
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b086      	sub	sp, #24
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	4603      	mov	r3, r0
 8001b32:	60b9      	str	r1, [r7, #8]
 8001b34:	607a      	str	r2, [r7, #4]
 8001b36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b3c:	f7ff ff5c 	bl	80019f8 <__NVIC_GetPriorityGrouping>
 8001b40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	68b9      	ldr	r1, [r7, #8]
 8001b46:	6978      	ldr	r0, [r7, #20]
 8001b48:	f7ff ff8e 	bl	8001a68 <NVIC_EncodePriority>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b52:	4611      	mov	r1, r2
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff ff5d 	bl	8001a14 <__NVIC_SetPriority>
}
 8001b5a:	bf00      	nop
 8001b5c:	3718      	adds	r7, #24
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b082      	sub	sp, #8
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f7ff ffb0 	bl	8001ad0 <SysTick_Config>
 8001b70:	4603      	mov	r3, r0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
	...

08001b7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b087      	sub	sp, #28
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b86:	2300      	movs	r3, #0
 8001b88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b8a:	e160      	b.n	8001e4e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	2101      	movs	r1, #1
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	fa01 f303 	lsl.w	r3, r1, r3
 8001b98:	4013      	ands	r3, r2
 8001b9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f000 8152 	beq.w	8001e48 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f003 0303 	and.w	r3, r3, #3
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d005      	beq.n	8001bbc <HAL_GPIO_Init+0x40>
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f003 0303 	and.w	r3, r3, #3
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d130      	bne.n	8001c1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	2203      	movs	r2, #3
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	68da      	ldr	r2, [r3, #12]
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	693a      	ldr	r2, [r7, #16]
 8001bea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	43db      	mvns	r3, r3
 8001bfc:	693a      	ldr	r2, [r7, #16]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	091b      	lsrs	r3, r3, #4
 8001c08:	f003 0201 	and.w	r2, r3, #1
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f003 0303 	and.w	r3, r3, #3
 8001c26:	2b03      	cmp	r3, #3
 8001c28:	d017      	beq.n	8001c5a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	2203      	movs	r2, #3
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	693a      	ldr	r2, [r7, #16]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	689a      	ldr	r2, [r3, #8]
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f003 0303 	and.w	r3, r3, #3
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d123      	bne.n	8001cae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	08da      	lsrs	r2, r3, #3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	3208      	adds	r2, #8
 8001c6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	f003 0307 	and.w	r3, r3, #7
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	220f      	movs	r2, #15
 8001c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c82:	43db      	mvns	r3, r3
 8001c84:	693a      	ldr	r2, [r7, #16]
 8001c86:	4013      	ands	r3, r2
 8001c88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	691a      	ldr	r2, [r3, #16]
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	f003 0307 	and.w	r3, r3, #7
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	08da      	lsrs	r2, r3, #3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	3208      	adds	r2, #8
 8001ca8:	6939      	ldr	r1, [r7, #16]
 8001caa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	2203      	movs	r2, #3
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	693a      	ldr	r2, [r7, #16]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f003 0203 	and.w	r2, r3, #3
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	f000 80ac 	beq.w	8001e48 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cf0:	4b5e      	ldr	r3, [pc, #376]	; (8001e6c <HAL_GPIO_Init+0x2f0>)
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	4a5d      	ldr	r2, [pc, #372]	; (8001e6c <HAL_GPIO_Init+0x2f0>)
 8001cf6:	f043 0301 	orr.w	r3, r3, #1
 8001cfa:	6193      	str	r3, [r2, #24]
 8001cfc:	4b5b      	ldr	r3, [pc, #364]	; (8001e6c <HAL_GPIO_Init+0x2f0>)
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	f003 0301 	and.w	r3, r3, #1
 8001d04:	60bb      	str	r3, [r7, #8]
 8001d06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d08:	4a59      	ldr	r2, [pc, #356]	; (8001e70 <HAL_GPIO_Init+0x2f4>)
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	089b      	lsrs	r3, r3, #2
 8001d0e:	3302      	adds	r3, #2
 8001d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	f003 0303 	and.w	r3, r3, #3
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	220f      	movs	r2, #15
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	43db      	mvns	r3, r3
 8001d26:	693a      	ldr	r2, [r7, #16]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d32:	d025      	beq.n	8001d80 <HAL_GPIO_Init+0x204>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	4a4f      	ldr	r2, [pc, #316]	; (8001e74 <HAL_GPIO_Init+0x2f8>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d01f      	beq.n	8001d7c <HAL_GPIO_Init+0x200>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4a4e      	ldr	r2, [pc, #312]	; (8001e78 <HAL_GPIO_Init+0x2fc>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d019      	beq.n	8001d78 <HAL_GPIO_Init+0x1fc>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4a4d      	ldr	r2, [pc, #308]	; (8001e7c <HAL_GPIO_Init+0x300>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d013      	beq.n	8001d74 <HAL_GPIO_Init+0x1f8>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4a4c      	ldr	r2, [pc, #304]	; (8001e80 <HAL_GPIO_Init+0x304>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d00d      	beq.n	8001d70 <HAL_GPIO_Init+0x1f4>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	4a4b      	ldr	r2, [pc, #300]	; (8001e84 <HAL_GPIO_Init+0x308>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d007      	beq.n	8001d6c <HAL_GPIO_Init+0x1f0>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	4a4a      	ldr	r2, [pc, #296]	; (8001e88 <HAL_GPIO_Init+0x30c>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d101      	bne.n	8001d68 <HAL_GPIO_Init+0x1ec>
 8001d64:	2306      	movs	r3, #6
 8001d66:	e00c      	b.n	8001d82 <HAL_GPIO_Init+0x206>
 8001d68:	2307      	movs	r3, #7
 8001d6a:	e00a      	b.n	8001d82 <HAL_GPIO_Init+0x206>
 8001d6c:	2305      	movs	r3, #5
 8001d6e:	e008      	b.n	8001d82 <HAL_GPIO_Init+0x206>
 8001d70:	2304      	movs	r3, #4
 8001d72:	e006      	b.n	8001d82 <HAL_GPIO_Init+0x206>
 8001d74:	2303      	movs	r3, #3
 8001d76:	e004      	b.n	8001d82 <HAL_GPIO_Init+0x206>
 8001d78:	2302      	movs	r3, #2
 8001d7a:	e002      	b.n	8001d82 <HAL_GPIO_Init+0x206>
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e000      	b.n	8001d82 <HAL_GPIO_Init+0x206>
 8001d80:	2300      	movs	r3, #0
 8001d82:	697a      	ldr	r2, [r7, #20]
 8001d84:	f002 0203 	and.w	r2, r2, #3
 8001d88:	0092      	lsls	r2, r2, #2
 8001d8a:	4093      	lsls	r3, r2
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d92:	4937      	ldr	r1, [pc, #220]	; (8001e70 <HAL_GPIO_Init+0x2f4>)
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	089b      	lsrs	r3, r3, #2
 8001d98:	3302      	adds	r3, #2
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001da0:	4b3a      	ldr	r3, [pc, #232]	; (8001e8c <HAL_GPIO_Init+0x310>)
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	43db      	mvns	r3, r3
 8001daa:	693a      	ldr	r2, [r7, #16]
 8001dac:	4013      	ands	r3, r2
 8001dae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d003      	beq.n	8001dc4 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001dbc:	693a      	ldr	r2, [r7, #16]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001dc4:	4a31      	ldr	r2, [pc, #196]	; (8001e8c <HAL_GPIO_Init+0x310>)
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dca:	4b30      	ldr	r3, [pc, #192]	; (8001e8c <HAL_GPIO_Init+0x310>)
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	43db      	mvns	r3, r3
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d003      	beq.n	8001dee <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001dee:	4a27      	ldr	r2, [pc, #156]	; (8001e8c <HAL_GPIO_Init+0x310>)
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001df4:	4b25      	ldr	r3, [pc, #148]	; (8001e8c <HAL_GPIO_Init+0x310>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	4013      	ands	r3, r2
 8001e02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d003      	beq.n	8001e18 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001e18:	4a1c      	ldr	r2, [pc, #112]	; (8001e8c <HAL_GPIO_Init+0x310>)
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e1e:	4b1b      	ldr	r3, [pc, #108]	; (8001e8c <HAL_GPIO_Init+0x310>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	43db      	mvns	r3, r3
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d003      	beq.n	8001e42 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001e3a:	693a      	ldr	r2, [r7, #16]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001e42:	4a12      	ldr	r2, [pc, #72]	; (8001e8c <HAL_GPIO_Init+0x310>)
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	fa22 f303 	lsr.w	r3, r2, r3
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f47f ae97 	bne.w	8001b8c <HAL_GPIO_Init+0x10>
  }
}
 8001e5e:	bf00      	nop
 8001e60:	bf00      	nop
 8001e62:	371c      	adds	r7, #28
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	40010000 	.word	0x40010000
 8001e74:	48000400 	.word	0x48000400
 8001e78:	48000800 	.word	0x48000800
 8001e7c:	48000c00 	.word	0x48000c00
 8001e80:	48001000 	.word	0x48001000
 8001e84:	48001400 	.word	0x48001400
 8001e88:	48001800 	.word	0x48001800
 8001e8c:	40010400 	.word	0x40010400

08001e90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	460b      	mov	r3, r1
 8001e9a:	807b      	strh	r3, [r7, #2]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ea0:	787b      	ldrb	r3, [r7, #1]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d003      	beq.n	8001eae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ea6:	887a      	ldrh	r2, [r7, #2]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001eac:	e002      	b.n	8001eb4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001eae:	887a      	ldrh	r2, [r7, #2]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d101      	bne.n	8001ed2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e081      	b.n	8001fd6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d106      	bne.n	8001eec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f7ff fbce 	bl	8001688 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2224      	movs	r2, #36	; 0x24
 8001ef0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f022 0201 	bic.w	r2, r2, #1
 8001f02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685a      	ldr	r2, [r3, #4]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f10:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	689a      	ldr	r2, [r3, #8]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f20:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d107      	bne.n	8001f3a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	689a      	ldr	r2, [r3, #8]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f36:	609a      	str	r2, [r3, #8]
 8001f38:	e006      	b.n	8001f48 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	689a      	ldr	r2, [r3, #8]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001f46:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d104      	bne.n	8001f5a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f58:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	6812      	ldr	r2, [r2, #0]
 8001f64:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f6c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	68da      	ldr	r2, [r3, #12]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f7c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	691a      	ldr	r2, [r3, #16]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	695b      	ldr	r3, [r3, #20]
 8001f86:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	699b      	ldr	r3, [r3, #24]
 8001f8e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	430a      	orrs	r2, r1
 8001f96:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	69d9      	ldr	r1, [r3, #28]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6a1a      	ldr	r2, [r3, #32]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	430a      	orrs	r2, r1
 8001fa6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f042 0201 	orr.w	r2, r2, #1
 8001fb6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2220      	movs	r2, #32
 8001fc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
	...

08001fe0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b088      	sub	sp, #32
 8001fe4:	af02      	add	r7, sp, #8
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	4608      	mov	r0, r1
 8001fea:	4611      	mov	r1, r2
 8001fec:	461a      	mov	r2, r3
 8001fee:	4603      	mov	r3, r0
 8001ff0:	817b      	strh	r3, [r7, #10]
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	813b      	strh	r3, [r7, #8]
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002000:	b2db      	uxtb	r3, r3
 8002002:	2b20      	cmp	r3, #32
 8002004:	f040 80f9 	bne.w	80021fa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002008:	6a3b      	ldr	r3, [r7, #32]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d002      	beq.n	8002014 <HAL_I2C_Mem_Write+0x34>
 800200e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002010:	2b00      	cmp	r3, #0
 8002012:	d105      	bne.n	8002020 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f44f 7200 	mov.w	r2, #512	; 0x200
 800201a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e0ed      	b.n	80021fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002026:	2b01      	cmp	r3, #1
 8002028:	d101      	bne.n	800202e <HAL_I2C_Mem_Write+0x4e>
 800202a:	2302      	movs	r3, #2
 800202c:	e0e6      	b.n	80021fc <HAL_I2C_Mem_Write+0x21c>
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2201      	movs	r2, #1
 8002032:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002036:	f7ff fc8b 	bl	8001950 <HAL_GetTick>
 800203a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	9300      	str	r3, [sp, #0]
 8002040:	2319      	movs	r3, #25
 8002042:	2201      	movs	r2, #1
 8002044:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002048:	68f8      	ldr	r0, [r7, #12]
 800204a:	f000 fac3 	bl	80025d4 <I2C_WaitOnFlagUntilTimeout>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e0d1      	b.n	80021fc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2221      	movs	r2, #33	; 0x21
 800205c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2240      	movs	r2, #64	; 0x40
 8002064:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2200      	movs	r2, #0
 800206c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	6a3a      	ldr	r2, [r7, #32]
 8002072:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002078:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2200      	movs	r2, #0
 800207e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002080:	88f8      	ldrh	r0, [r7, #6]
 8002082:	893a      	ldrh	r2, [r7, #8]
 8002084:	8979      	ldrh	r1, [r7, #10]
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	9301      	str	r3, [sp, #4]
 800208a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800208c:	9300      	str	r3, [sp, #0]
 800208e:	4603      	mov	r3, r0
 8002090:	68f8      	ldr	r0, [r7, #12]
 8002092:	f000 f9d3 	bl	800243c <I2C_RequestMemoryWrite>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d005      	beq.n	80020a8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e0a9      	b.n	80021fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	2bff      	cmp	r3, #255	; 0xff
 80020b0:	d90e      	bls.n	80020d0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	22ff      	movs	r2, #255	; 0xff
 80020b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020bc:	b2da      	uxtb	r2, r3
 80020be:	8979      	ldrh	r1, [r7, #10]
 80020c0:	2300      	movs	r3, #0
 80020c2:	9300      	str	r3, [sp, #0]
 80020c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020c8:	68f8      	ldr	r0, [r7, #12]
 80020ca:	f000 fc3d 	bl	8002948 <I2C_TransferConfig>
 80020ce:	e00f      	b.n	80020f0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020d4:	b29a      	uxth	r2, r3
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020de:	b2da      	uxtb	r2, r3
 80020e0:	8979      	ldrh	r1, [r7, #10]
 80020e2:	2300      	movs	r3, #0
 80020e4:	9300      	str	r3, [sp, #0]
 80020e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020ea:	68f8      	ldr	r0, [r7, #12]
 80020ec:	f000 fc2c 	bl	8002948 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020f0:	697a      	ldr	r2, [r7, #20]
 80020f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020f4:	68f8      	ldr	r0, [r7, #12]
 80020f6:	f000 fabc 	bl	8002672 <I2C_WaitOnTXISFlagUntilTimeout>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e07b      	b.n	80021fc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002108:	781a      	ldrb	r2, [r3, #0]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002114:	1c5a      	adds	r2, r3, #1
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800211e:	b29b      	uxth	r3, r3
 8002120:	3b01      	subs	r3, #1
 8002122:	b29a      	uxth	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800212c:	3b01      	subs	r3, #1
 800212e:	b29a      	uxth	r2, r3
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002138:	b29b      	uxth	r3, r3
 800213a:	2b00      	cmp	r3, #0
 800213c:	d034      	beq.n	80021a8 <HAL_I2C_Mem_Write+0x1c8>
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002142:	2b00      	cmp	r3, #0
 8002144:	d130      	bne.n	80021a8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	9300      	str	r3, [sp, #0]
 800214a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800214c:	2200      	movs	r2, #0
 800214e:	2180      	movs	r1, #128	; 0x80
 8002150:	68f8      	ldr	r0, [r7, #12]
 8002152:	f000 fa3f 	bl	80025d4 <I2C_WaitOnFlagUntilTimeout>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e04d      	b.n	80021fc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002164:	b29b      	uxth	r3, r3
 8002166:	2bff      	cmp	r3, #255	; 0xff
 8002168:	d90e      	bls.n	8002188 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	22ff      	movs	r2, #255	; 0xff
 800216e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002174:	b2da      	uxtb	r2, r3
 8002176:	8979      	ldrh	r1, [r7, #10]
 8002178:	2300      	movs	r3, #0
 800217a:	9300      	str	r3, [sp, #0]
 800217c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002180:	68f8      	ldr	r0, [r7, #12]
 8002182:	f000 fbe1 	bl	8002948 <I2C_TransferConfig>
 8002186:	e00f      	b.n	80021a8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800218c:	b29a      	uxth	r2, r3
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002196:	b2da      	uxtb	r2, r3
 8002198:	8979      	ldrh	r1, [r7, #10]
 800219a:	2300      	movs	r3, #0
 800219c:	9300      	str	r3, [sp, #0]
 800219e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021a2:	68f8      	ldr	r0, [r7, #12]
 80021a4:	f000 fbd0 	bl	8002948 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d19e      	bne.n	80020f0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021b2:	697a      	ldr	r2, [r7, #20]
 80021b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80021b6:	68f8      	ldr	r0, [r7, #12]
 80021b8:	f000 faa2 	bl	8002700 <I2C_WaitOnSTOPFlagUntilTimeout>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e01a      	b.n	80021fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2220      	movs	r2, #32
 80021cc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	6859      	ldr	r1, [r3, #4]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	4b0a      	ldr	r3, [pc, #40]	; (8002204 <HAL_I2C_Mem_Write+0x224>)
 80021da:	400b      	ands	r3, r1
 80021dc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2220      	movs	r2, #32
 80021e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80021f6:	2300      	movs	r3, #0
 80021f8:	e000      	b.n	80021fc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80021fa:	2302      	movs	r3, #2
  }
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3718      	adds	r7, #24
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	fe00e800 	.word	0xfe00e800

08002208 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b088      	sub	sp, #32
 800220c:	af02      	add	r7, sp, #8
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	4608      	mov	r0, r1
 8002212:	4611      	mov	r1, r2
 8002214:	461a      	mov	r2, r3
 8002216:	4603      	mov	r3, r0
 8002218:	817b      	strh	r3, [r7, #10]
 800221a:	460b      	mov	r3, r1
 800221c:	813b      	strh	r3, [r7, #8]
 800221e:	4613      	mov	r3, r2
 8002220:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b20      	cmp	r3, #32
 800222c:	f040 80fd 	bne.w	800242a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002230:	6a3b      	ldr	r3, [r7, #32]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d002      	beq.n	800223c <HAL_I2C_Mem_Read+0x34>
 8002236:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002238:	2b00      	cmp	r3, #0
 800223a:	d105      	bne.n	8002248 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002242:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e0f1      	b.n	800242c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800224e:	2b01      	cmp	r3, #1
 8002250:	d101      	bne.n	8002256 <HAL_I2C_Mem_Read+0x4e>
 8002252:	2302      	movs	r3, #2
 8002254:	e0ea      	b.n	800242c <HAL_I2C_Mem_Read+0x224>
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2201      	movs	r2, #1
 800225a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800225e:	f7ff fb77 	bl	8001950 <HAL_GetTick>
 8002262:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	9300      	str	r3, [sp, #0]
 8002268:	2319      	movs	r3, #25
 800226a:	2201      	movs	r2, #1
 800226c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002270:	68f8      	ldr	r0, [r7, #12]
 8002272:	f000 f9af 	bl	80025d4 <I2C_WaitOnFlagUntilTimeout>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e0d5      	b.n	800242c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2222      	movs	r2, #34	; 0x22
 8002284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2240      	movs	r2, #64	; 0x40
 800228c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2200      	movs	r2, #0
 8002294:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6a3a      	ldr	r2, [r7, #32]
 800229a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80022a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2200      	movs	r2, #0
 80022a6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80022a8:	88f8      	ldrh	r0, [r7, #6]
 80022aa:	893a      	ldrh	r2, [r7, #8]
 80022ac:	8979      	ldrh	r1, [r7, #10]
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	9301      	str	r3, [sp, #4]
 80022b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022b4:	9300      	str	r3, [sp, #0]
 80022b6:	4603      	mov	r3, r0
 80022b8:	68f8      	ldr	r0, [r7, #12]
 80022ba:	f000 f913 	bl	80024e4 <I2C_RequestMemoryRead>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d005      	beq.n	80022d0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e0ad      	b.n	800242c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	2bff      	cmp	r3, #255	; 0xff
 80022d8:	d90e      	bls.n	80022f8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	22ff      	movs	r2, #255	; 0xff
 80022de:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022e4:	b2da      	uxtb	r2, r3
 80022e6:	8979      	ldrh	r1, [r7, #10]
 80022e8:	4b52      	ldr	r3, [pc, #328]	; (8002434 <HAL_I2C_Mem_Read+0x22c>)
 80022ea:	9300      	str	r3, [sp, #0]
 80022ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022f0:	68f8      	ldr	r0, [r7, #12]
 80022f2:	f000 fb29 	bl	8002948 <I2C_TransferConfig>
 80022f6:	e00f      	b.n	8002318 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002306:	b2da      	uxtb	r2, r3
 8002308:	8979      	ldrh	r1, [r7, #10]
 800230a:	4b4a      	ldr	r3, [pc, #296]	; (8002434 <HAL_I2C_Mem_Read+0x22c>)
 800230c:	9300      	str	r3, [sp, #0]
 800230e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002312:	68f8      	ldr	r0, [r7, #12]
 8002314:	f000 fb18 	bl	8002948 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	9300      	str	r3, [sp, #0]
 800231c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800231e:	2200      	movs	r2, #0
 8002320:	2104      	movs	r1, #4
 8002322:	68f8      	ldr	r0, [r7, #12]
 8002324:	f000 f956 	bl	80025d4 <I2C_WaitOnFlagUntilTimeout>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e07c      	b.n	800242c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233c:	b2d2      	uxtb	r2, r2
 800233e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002344:	1c5a      	adds	r2, r3, #1
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800234e:	3b01      	subs	r3, #1
 8002350:	b29a      	uxth	r2, r3
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800235a:	b29b      	uxth	r3, r3
 800235c:	3b01      	subs	r3, #1
 800235e:	b29a      	uxth	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002368:	b29b      	uxth	r3, r3
 800236a:	2b00      	cmp	r3, #0
 800236c:	d034      	beq.n	80023d8 <HAL_I2C_Mem_Read+0x1d0>
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002372:	2b00      	cmp	r3, #0
 8002374:	d130      	bne.n	80023d8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	9300      	str	r3, [sp, #0]
 800237a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800237c:	2200      	movs	r2, #0
 800237e:	2180      	movs	r1, #128	; 0x80
 8002380:	68f8      	ldr	r0, [r7, #12]
 8002382:	f000 f927 	bl	80025d4 <I2C_WaitOnFlagUntilTimeout>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e04d      	b.n	800242c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002394:	b29b      	uxth	r3, r3
 8002396:	2bff      	cmp	r3, #255	; 0xff
 8002398:	d90e      	bls.n	80023b8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	22ff      	movs	r2, #255	; 0xff
 800239e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023a4:	b2da      	uxtb	r2, r3
 80023a6:	8979      	ldrh	r1, [r7, #10]
 80023a8:	2300      	movs	r3, #0
 80023aa:	9300      	str	r3, [sp, #0]
 80023ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023b0:	68f8      	ldr	r0, [r7, #12]
 80023b2:	f000 fac9 	bl	8002948 <I2C_TransferConfig>
 80023b6:	e00f      	b.n	80023d8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023bc:	b29a      	uxth	r2, r3
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023c6:	b2da      	uxtb	r2, r3
 80023c8:	8979      	ldrh	r1, [r7, #10]
 80023ca:	2300      	movs	r3, #0
 80023cc:	9300      	str	r3, [sp, #0]
 80023ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023d2:	68f8      	ldr	r0, [r7, #12]
 80023d4:	f000 fab8 	bl	8002948 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023dc:	b29b      	uxth	r3, r3
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d19a      	bne.n	8002318 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023e2:	697a      	ldr	r2, [r7, #20]
 80023e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023e6:	68f8      	ldr	r0, [r7, #12]
 80023e8:	f000 f98a 	bl	8002700 <I2C_WaitOnSTOPFlagUntilTimeout>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e01a      	b.n	800242c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2220      	movs	r2, #32
 80023fc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	6859      	ldr	r1, [r3, #4]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	4b0b      	ldr	r3, [pc, #44]	; (8002438 <HAL_I2C_Mem_Read+0x230>)
 800240a:	400b      	ands	r3, r1
 800240c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2220      	movs	r2, #32
 8002412:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002426:	2300      	movs	r3, #0
 8002428:	e000      	b.n	800242c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800242a:	2302      	movs	r3, #2
  }
}
 800242c:	4618      	mov	r0, r3
 800242e:	3718      	adds	r7, #24
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	80002400 	.word	0x80002400
 8002438:	fe00e800 	.word	0xfe00e800

0800243c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b086      	sub	sp, #24
 8002440:	af02      	add	r7, sp, #8
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	4608      	mov	r0, r1
 8002446:	4611      	mov	r1, r2
 8002448:	461a      	mov	r2, r3
 800244a:	4603      	mov	r3, r0
 800244c:	817b      	strh	r3, [r7, #10]
 800244e:	460b      	mov	r3, r1
 8002450:	813b      	strh	r3, [r7, #8]
 8002452:	4613      	mov	r3, r2
 8002454:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002456:	88fb      	ldrh	r3, [r7, #6]
 8002458:	b2da      	uxtb	r2, r3
 800245a:	8979      	ldrh	r1, [r7, #10]
 800245c:	4b20      	ldr	r3, [pc, #128]	; (80024e0 <I2C_RequestMemoryWrite+0xa4>)
 800245e:	9300      	str	r3, [sp, #0]
 8002460:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002464:	68f8      	ldr	r0, [r7, #12]
 8002466:	f000 fa6f 	bl	8002948 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800246a:	69fa      	ldr	r2, [r7, #28]
 800246c:	69b9      	ldr	r1, [r7, #24]
 800246e:	68f8      	ldr	r0, [r7, #12]
 8002470:	f000 f8ff 	bl	8002672 <I2C_WaitOnTXISFlagUntilTimeout>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e02c      	b.n	80024d8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800247e:	88fb      	ldrh	r3, [r7, #6]
 8002480:	2b01      	cmp	r3, #1
 8002482:	d105      	bne.n	8002490 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002484:	893b      	ldrh	r3, [r7, #8]
 8002486:	b2da      	uxtb	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	629a      	str	r2, [r3, #40]	; 0x28
 800248e:	e015      	b.n	80024bc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002490:	893b      	ldrh	r3, [r7, #8]
 8002492:	0a1b      	lsrs	r3, r3, #8
 8002494:	b29b      	uxth	r3, r3
 8002496:	b2da      	uxtb	r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800249e:	69fa      	ldr	r2, [r7, #28]
 80024a0:	69b9      	ldr	r1, [r7, #24]
 80024a2:	68f8      	ldr	r0, [r7, #12]
 80024a4:	f000 f8e5 	bl	8002672 <I2C_WaitOnTXISFlagUntilTimeout>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e012      	b.n	80024d8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80024b2:	893b      	ldrh	r3, [r7, #8]
 80024b4:	b2da      	uxtb	r2, r3
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	9300      	str	r3, [sp, #0]
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	2200      	movs	r2, #0
 80024c4:	2180      	movs	r1, #128	; 0x80
 80024c6:	68f8      	ldr	r0, [r7, #12]
 80024c8:	f000 f884 	bl	80025d4 <I2C_WaitOnFlagUntilTimeout>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e000      	b.n	80024d8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80024d6:	2300      	movs	r3, #0
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3710      	adds	r7, #16
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	80002000 	.word	0x80002000

080024e4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af02      	add	r7, sp, #8
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	4608      	mov	r0, r1
 80024ee:	4611      	mov	r1, r2
 80024f0:	461a      	mov	r2, r3
 80024f2:	4603      	mov	r3, r0
 80024f4:	817b      	strh	r3, [r7, #10]
 80024f6:	460b      	mov	r3, r1
 80024f8:	813b      	strh	r3, [r7, #8]
 80024fa:	4613      	mov	r3, r2
 80024fc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80024fe:	88fb      	ldrh	r3, [r7, #6]
 8002500:	b2da      	uxtb	r2, r3
 8002502:	8979      	ldrh	r1, [r7, #10]
 8002504:	4b20      	ldr	r3, [pc, #128]	; (8002588 <I2C_RequestMemoryRead+0xa4>)
 8002506:	9300      	str	r3, [sp, #0]
 8002508:	2300      	movs	r3, #0
 800250a:	68f8      	ldr	r0, [r7, #12]
 800250c:	f000 fa1c 	bl	8002948 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002510:	69fa      	ldr	r2, [r7, #28]
 8002512:	69b9      	ldr	r1, [r7, #24]
 8002514:	68f8      	ldr	r0, [r7, #12]
 8002516:	f000 f8ac 	bl	8002672 <I2C_WaitOnTXISFlagUntilTimeout>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e02c      	b.n	800257e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002524:	88fb      	ldrh	r3, [r7, #6]
 8002526:	2b01      	cmp	r3, #1
 8002528:	d105      	bne.n	8002536 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800252a:	893b      	ldrh	r3, [r7, #8]
 800252c:	b2da      	uxtb	r2, r3
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	629a      	str	r2, [r3, #40]	; 0x28
 8002534:	e015      	b.n	8002562 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002536:	893b      	ldrh	r3, [r7, #8]
 8002538:	0a1b      	lsrs	r3, r3, #8
 800253a:	b29b      	uxth	r3, r3
 800253c:	b2da      	uxtb	r2, r3
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002544:	69fa      	ldr	r2, [r7, #28]
 8002546:	69b9      	ldr	r1, [r7, #24]
 8002548:	68f8      	ldr	r0, [r7, #12]
 800254a:	f000 f892 	bl	8002672 <I2C_WaitOnTXISFlagUntilTimeout>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e012      	b.n	800257e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002558:	893b      	ldrh	r3, [r7, #8]
 800255a:	b2da      	uxtb	r2, r3
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	9300      	str	r3, [sp, #0]
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	2200      	movs	r2, #0
 800256a:	2140      	movs	r1, #64	; 0x40
 800256c:	68f8      	ldr	r0, [r7, #12]
 800256e:	f000 f831 	bl	80025d4 <I2C_WaitOnFlagUntilTimeout>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e000      	b.n	800257e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3710      	adds	r7, #16
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	80002000 	.word	0x80002000

0800258c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	699b      	ldr	r3, [r3, #24]
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d103      	bne.n	80025aa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2200      	movs	r2, #0
 80025a8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	699b      	ldr	r3, [r3, #24]
 80025b0:	f003 0301 	and.w	r3, r3, #1
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d007      	beq.n	80025c8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	699a      	ldr	r2, [r3, #24]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f042 0201 	orr.w	r2, r2, #1
 80025c6:	619a      	str	r2, [r3, #24]
  }
}
 80025c8:	bf00      	nop
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	603b      	str	r3, [r7, #0]
 80025e0:	4613      	mov	r3, r2
 80025e2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025e4:	e031      	b.n	800264a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025ec:	d02d      	beq.n	800264a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025ee:	f7ff f9af 	bl	8001950 <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	683a      	ldr	r2, [r7, #0]
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d302      	bcc.n	8002604 <I2C_WaitOnFlagUntilTimeout+0x30>
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d122      	bne.n	800264a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	699a      	ldr	r2, [r3, #24]
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	4013      	ands	r3, r2
 800260e:	68ba      	ldr	r2, [r7, #8]
 8002610:	429a      	cmp	r2, r3
 8002612:	bf0c      	ite	eq
 8002614:	2301      	moveq	r3, #1
 8002616:	2300      	movne	r3, #0
 8002618:	b2db      	uxtb	r3, r3
 800261a:	461a      	mov	r2, r3
 800261c:	79fb      	ldrb	r3, [r7, #7]
 800261e:	429a      	cmp	r2, r3
 8002620:	d113      	bne.n	800264a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002626:	f043 0220 	orr.w	r2, r3, #32
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2220      	movs	r2, #32
 8002632:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e00f      	b.n	800266a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	699a      	ldr	r2, [r3, #24]
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	4013      	ands	r3, r2
 8002654:	68ba      	ldr	r2, [r7, #8]
 8002656:	429a      	cmp	r2, r3
 8002658:	bf0c      	ite	eq
 800265a:	2301      	moveq	r3, #1
 800265c:	2300      	movne	r3, #0
 800265e:	b2db      	uxtb	r3, r3
 8002660:	461a      	mov	r2, r3
 8002662:	79fb      	ldrb	r3, [r7, #7]
 8002664:	429a      	cmp	r2, r3
 8002666:	d0be      	beq.n	80025e6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	3710      	adds	r7, #16
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}

08002672 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002672:	b580      	push	{r7, lr}
 8002674:	b084      	sub	sp, #16
 8002676:	af00      	add	r7, sp, #0
 8002678:	60f8      	str	r0, [r7, #12]
 800267a:	60b9      	str	r1, [r7, #8]
 800267c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800267e:	e033      	b.n	80026e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	68b9      	ldr	r1, [r7, #8]
 8002684:	68f8      	ldr	r0, [r7, #12]
 8002686:	f000 f87f 	bl	8002788 <I2C_IsErrorOccurred>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e031      	b.n	80026f8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800269a:	d025      	beq.n	80026e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800269c:	f7ff f958 	bl	8001950 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	68ba      	ldr	r2, [r7, #8]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d302      	bcc.n	80026b2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d11a      	bne.n	80026e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	699b      	ldr	r3, [r3, #24]
 80026b8:	f003 0302 	and.w	r3, r3, #2
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d013      	beq.n	80026e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c4:	f043 0220 	orr.w	r2, r3, #32
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2220      	movs	r2, #32
 80026d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2200      	movs	r2, #0
 80026e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e007      	b.n	80026f8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	699b      	ldr	r3, [r3, #24]
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d1c4      	bne.n	8002680 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80026f6:	2300      	movs	r3, #0
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3710      	adds	r7, #16
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}

08002700 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800270c:	e02f      	b.n	800276e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	68b9      	ldr	r1, [r7, #8]
 8002712:	68f8      	ldr	r0, [r7, #12]
 8002714:	f000 f838 	bl	8002788 <I2C_IsErrorOccurred>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e02d      	b.n	800277e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002722:	f7ff f915 	bl	8001950 <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	68ba      	ldr	r2, [r7, #8]
 800272e:	429a      	cmp	r2, r3
 8002730:	d302      	bcc.n	8002738 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d11a      	bne.n	800276e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	f003 0320 	and.w	r3, r3, #32
 8002742:	2b20      	cmp	r3, #32
 8002744:	d013      	beq.n	800276e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274a:	f043 0220 	orr.w	r2, r3, #32
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2220      	movs	r2, #32
 8002756:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e007      	b.n	800277e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	f003 0320 	and.w	r3, r3, #32
 8002778:	2b20      	cmp	r3, #32
 800277a:	d1c8      	bne.n	800270e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
	...

08002788 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b08a      	sub	sp, #40	; 0x28
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002794:	2300      	movs	r3, #0
 8002796:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80027a2:	2300      	movs	r3, #0
 80027a4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	f003 0310 	and.w	r3, r3, #16
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d068      	beq.n	8002886 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2210      	movs	r2, #16
 80027ba:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80027bc:	e049      	b.n	8002852 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027c4:	d045      	beq.n	8002852 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80027c6:	f7ff f8c3 	bl	8001950 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	68ba      	ldr	r2, [r7, #8]
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d302      	bcc.n	80027dc <I2C_IsErrorOccurred+0x54>
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d13a      	bne.n	8002852 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027e6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80027ee:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	699b      	ldr	r3, [r3, #24]
 80027f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027fe:	d121      	bne.n	8002844 <I2C_IsErrorOccurred+0xbc>
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002806:	d01d      	beq.n	8002844 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002808:	7cfb      	ldrb	r3, [r7, #19]
 800280a:	2b20      	cmp	r3, #32
 800280c:	d01a      	beq.n	8002844 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	685a      	ldr	r2, [r3, #4]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800281c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800281e:	f7ff f897 	bl	8001950 <HAL_GetTick>
 8002822:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002824:	e00e      	b.n	8002844 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002826:	f7ff f893 	bl	8001950 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	2b19      	cmp	r3, #25
 8002832:	d907      	bls.n	8002844 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002834:	6a3b      	ldr	r3, [r7, #32]
 8002836:	f043 0320 	orr.w	r3, r3, #32
 800283a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002842:	e006      	b.n	8002852 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	699b      	ldr	r3, [r3, #24]
 800284a:	f003 0320 	and.w	r3, r3, #32
 800284e:	2b20      	cmp	r3, #32
 8002850:	d1e9      	bne.n	8002826 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	699b      	ldr	r3, [r3, #24]
 8002858:	f003 0320 	and.w	r3, r3, #32
 800285c:	2b20      	cmp	r3, #32
 800285e:	d003      	beq.n	8002868 <I2C_IsErrorOccurred+0xe0>
 8002860:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002864:	2b00      	cmp	r3, #0
 8002866:	d0aa      	beq.n	80027be <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002868:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800286c:	2b00      	cmp	r3, #0
 800286e:	d103      	bne.n	8002878 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2220      	movs	r2, #32
 8002876:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002878:	6a3b      	ldr	r3, [r7, #32]
 800287a:	f043 0304 	orr.w	r3, r3, #4
 800287e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	699b      	ldr	r3, [r3, #24]
 800288c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002894:	2b00      	cmp	r3, #0
 8002896:	d00b      	beq.n	80028b0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002898:	6a3b      	ldr	r3, [r7, #32]
 800289a:	f043 0301 	orr.w	r3, r3, #1
 800289e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028a8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d00b      	beq.n	80028d2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80028ba:	6a3b      	ldr	r3, [r7, #32]
 80028bc:	f043 0308 	orr.w	r3, r3, #8
 80028c0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028ca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d00b      	beq.n	80028f4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80028dc:	6a3b      	ldr	r3, [r7, #32]
 80028de:	f043 0302 	orr.w	r3, r3, #2
 80028e2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028ec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80028f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d01c      	beq.n	8002936 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80028fc:	68f8      	ldr	r0, [r7, #12]
 80028fe:	f7ff fe45 	bl	800258c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	6859      	ldr	r1, [r3, #4]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	4b0d      	ldr	r3, [pc, #52]	; (8002944 <I2C_IsErrorOccurred+0x1bc>)
 800290e:	400b      	ands	r3, r1
 8002910:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002916:	6a3b      	ldr	r3, [r7, #32]
 8002918:	431a      	orrs	r2, r3
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2220      	movs	r2, #32
 8002922:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002936:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800293a:	4618      	mov	r0, r3
 800293c:	3728      	adds	r7, #40	; 0x28
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	fe00e800 	.word	0xfe00e800

08002948 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002948:	b480      	push	{r7}
 800294a:	b087      	sub	sp, #28
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	607b      	str	r3, [r7, #4]
 8002952:	460b      	mov	r3, r1
 8002954:	817b      	strh	r3, [r7, #10]
 8002956:	4613      	mov	r3, r2
 8002958:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800295a:	897b      	ldrh	r3, [r7, #10]
 800295c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002960:	7a7b      	ldrb	r3, [r7, #9]
 8002962:	041b      	lsls	r3, r3, #16
 8002964:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002968:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800296e:	6a3b      	ldr	r3, [r7, #32]
 8002970:	4313      	orrs	r3, r2
 8002972:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002976:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	685a      	ldr	r2, [r3, #4]
 800297e:	6a3b      	ldr	r3, [r7, #32]
 8002980:	0d5b      	lsrs	r3, r3, #21
 8002982:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002986:	4b08      	ldr	r3, [pc, #32]	; (80029a8 <I2C_TransferConfig+0x60>)
 8002988:	430b      	orrs	r3, r1
 800298a:	43db      	mvns	r3, r3
 800298c:	ea02 0103 	and.w	r1, r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	697a      	ldr	r2, [r7, #20]
 8002996:	430a      	orrs	r2, r1
 8002998:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800299a:	bf00      	nop
 800299c:	371c      	adds	r7, #28
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	03ff63ff 	.word	0x03ff63ff

080029ac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b20      	cmp	r3, #32
 80029c0:	d138      	bne.n	8002a34 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d101      	bne.n	80029d0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80029cc:	2302      	movs	r3, #2
 80029ce:	e032      	b.n	8002a36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2224      	movs	r2, #36	; 0x24
 80029dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f022 0201 	bic.w	r2, r2, #1
 80029ee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80029fe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	6819      	ldr	r1, [r3, #0]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	683a      	ldr	r2, [r7, #0]
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f042 0201 	orr.w	r2, r2, #1
 8002a1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2220      	movs	r2, #32
 8002a24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a30:	2300      	movs	r3, #0
 8002a32:	e000      	b.n	8002a36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002a34:	2302      	movs	r3, #2
  }
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	370c      	adds	r7, #12
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr

08002a42 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002a42:	b480      	push	{r7}
 8002a44:	b085      	sub	sp, #20
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
 8002a4a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	2b20      	cmp	r3, #32
 8002a56:	d139      	bne.n	8002acc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d101      	bne.n	8002a66 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002a62:	2302      	movs	r3, #2
 8002a64:	e033      	b.n	8002ace <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2201      	movs	r2, #1
 8002a6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2224      	movs	r2, #36	; 0x24
 8002a72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f022 0201 	bic.w	r2, r2, #1
 8002a84:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a94:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	021b      	lsls	r3, r3, #8
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	68fa      	ldr	r2, [r7, #12]
 8002aa6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f042 0201 	orr.w	r2, r2, #1
 8002ab6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2220      	movs	r2, #32
 8002abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	e000      	b.n	8002ace <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002acc:	2302      	movs	r3, #2
  }
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3714      	adds	r7, #20
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
	...

08002adc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ae8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002aec:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002aee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002af2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d102      	bne.n	8002b02 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	f001 b83a 	b.w	8003b76 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b06:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	f000 816f 	beq.w	8002df6 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002b18:	4bb5      	ldr	r3, [pc, #724]	; (8002df0 <HAL_RCC_OscConfig+0x314>)
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f003 030c 	and.w	r3, r3, #12
 8002b20:	2b04      	cmp	r3, #4
 8002b22:	d00c      	beq.n	8002b3e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b24:	4bb2      	ldr	r3, [pc, #712]	; (8002df0 <HAL_RCC_OscConfig+0x314>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f003 030c 	and.w	r3, r3, #12
 8002b2c:	2b08      	cmp	r3, #8
 8002b2e:	d15c      	bne.n	8002bea <HAL_RCC_OscConfig+0x10e>
 8002b30:	4baf      	ldr	r3, [pc, #700]	; (8002df0 <HAL_RCC_OscConfig+0x314>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002b38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b3c:	d155      	bne.n	8002bea <HAL_RCC_OscConfig+0x10e>
 8002b3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b42:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b46:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002b4a:	fa93 f3a3 	rbit	r3, r3
 8002b4e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002b52:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b56:	fab3 f383 	clz	r3, r3
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	095b      	lsrs	r3, r3, #5
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	f043 0301 	orr.w	r3, r3, #1
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d102      	bne.n	8002b70 <HAL_RCC_OscConfig+0x94>
 8002b6a:	4ba1      	ldr	r3, [pc, #644]	; (8002df0 <HAL_RCC_OscConfig+0x314>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	e015      	b.n	8002b9c <HAL_RCC_OscConfig+0xc0>
 8002b70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b74:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b78:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8002b7c:	fa93 f3a3 	rbit	r3, r3
 8002b80:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8002b84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b88:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002b8c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8002b90:	fa93 f3a3 	rbit	r3, r3
 8002b94:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002b98:	4b95      	ldr	r3, [pc, #596]	; (8002df0 <HAL_RCC_OscConfig+0x314>)
 8002b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ba0:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8002ba4:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8002ba8:	fa92 f2a2 	rbit	r2, r2
 8002bac:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8002bb0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002bb4:	fab2 f282 	clz	r2, r2
 8002bb8:	b2d2      	uxtb	r2, r2
 8002bba:	f042 0220 	orr.w	r2, r2, #32
 8002bbe:	b2d2      	uxtb	r2, r2
 8002bc0:	f002 021f 	and.w	r2, r2, #31
 8002bc4:	2101      	movs	r1, #1
 8002bc6:	fa01 f202 	lsl.w	r2, r1, r2
 8002bca:	4013      	ands	r3, r2
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	f000 8111 	beq.w	8002df4 <HAL_RCC_OscConfig+0x318>
 8002bd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bd6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	f040 8108 	bne.w	8002df4 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	f000 bfc6 	b.w	8003b76 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bee:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bfa:	d106      	bne.n	8002c0a <HAL_RCC_OscConfig+0x12e>
 8002bfc:	4b7c      	ldr	r3, [pc, #496]	; (8002df0 <HAL_RCC_OscConfig+0x314>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a7b      	ldr	r2, [pc, #492]	; (8002df0 <HAL_RCC_OscConfig+0x314>)
 8002c02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c06:	6013      	str	r3, [r2, #0]
 8002c08:	e036      	b.n	8002c78 <HAL_RCC_OscConfig+0x19c>
 8002c0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c0e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d10c      	bne.n	8002c34 <HAL_RCC_OscConfig+0x158>
 8002c1a:	4b75      	ldr	r3, [pc, #468]	; (8002df0 <HAL_RCC_OscConfig+0x314>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a74      	ldr	r2, [pc, #464]	; (8002df0 <HAL_RCC_OscConfig+0x314>)
 8002c20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c24:	6013      	str	r3, [r2, #0]
 8002c26:	4b72      	ldr	r3, [pc, #456]	; (8002df0 <HAL_RCC_OscConfig+0x314>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a71      	ldr	r2, [pc, #452]	; (8002df0 <HAL_RCC_OscConfig+0x314>)
 8002c2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c30:	6013      	str	r3, [r2, #0]
 8002c32:	e021      	b.n	8002c78 <HAL_RCC_OscConfig+0x19c>
 8002c34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c38:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c44:	d10c      	bne.n	8002c60 <HAL_RCC_OscConfig+0x184>
 8002c46:	4b6a      	ldr	r3, [pc, #424]	; (8002df0 <HAL_RCC_OscConfig+0x314>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a69      	ldr	r2, [pc, #420]	; (8002df0 <HAL_RCC_OscConfig+0x314>)
 8002c4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c50:	6013      	str	r3, [r2, #0]
 8002c52:	4b67      	ldr	r3, [pc, #412]	; (8002df0 <HAL_RCC_OscConfig+0x314>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a66      	ldr	r2, [pc, #408]	; (8002df0 <HAL_RCC_OscConfig+0x314>)
 8002c58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c5c:	6013      	str	r3, [r2, #0]
 8002c5e:	e00b      	b.n	8002c78 <HAL_RCC_OscConfig+0x19c>
 8002c60:	4b63      	ldr	r3, [pc, #396]	; (8002df0 <HAL_RCC_OscConfig+0x314>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a62      	ldr	r2, [pc, #392]	; (8002df0 <HAL_RCC_OscConfig+0x314>)
 8002c66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c6a:	6013      	str	r3, [r2, #0]
 8002c6c:	4b60      	ldr	r3, [pc, #384]	; (8002df0 <HAL_RCC_OscConfig+0x314>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a5f      	ldr	r2, [pc, #380]	; (8002df0 <HAL_RCC_OscConfig+0x314>)
 8002c72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c76:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c7c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d059      	beq.n	8002d3c <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c88:	f7fe fe62 	bl	8001950 <HAL_GetTick>
 8002c8c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c90:	e00a      	b.n	8002ca8 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c92:	f7fe fe5d 	bl	8001950 <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b64      	cmp	r3, #100	; 0x64
 8002ca0:	d902      	bls.n	8002ca8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	f000 bf67 	b.w	8003b76 <HAL_RCC_OscConfig+0x109a>
 8002ca8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cac:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002cb4:	fa93 f3a3 	rbit	r3, r3
 8002cb8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8002cbc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cc0:	fab3 f383 	clz	r3, r3
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	095b      	lsrs	r3, r3, #5
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	f043 0301 	orr.w	r3, r3, #1
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d102      	bne.n	8002cda <HAL_RCC_OscConfig+0x1fe>
 8002cd4:	4b46      	ldr	r3, [pc, #280]	; (8002df0 <HAL_RCC_OscConfig+0x314>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	e015      	b.n	8002d06 <HAL_RCC_OscConfig+0x22a>
 8002cda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cde:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002ce6:	fa93 f3a3 	rbit	r3, r3
 8002cea:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8002cee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cf2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002cf6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002cfa:	fa93 f3a3 	rbit	r3, r3
 8002cfe:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002d02:	4b3b      	ldr	r3, [pc, #236]	; (8002df0 <HAL_RCC_OscConfig+0x314>)
 8002d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d06:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d0a:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8002d0e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8002d12:	fa92 f2a2 	rbit	r2, r2
 8002d16:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8002d1a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002d1e:	fab2 f282 	clz	r2, r2
 8002d22:	b2d2      	uxtb	r2, r2
 8002d24:	f042 0220 	orr.w	r2, r2, #32
 8002d28:	b2d2      	uxtb	r2, r2
 8002d2a:	f002 021f 	and.w	r2, r2, #31
 8002d2e:	2101      	movs	r1, #1
 8002d30:	fa01 f202 	lsl.w	r2, r1, r2
 8002d34:	4013      	ands	r3, r2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d0ab      	beq.n	8002c92 <HAL_RCC_OscConfig+0x1b6>
 8002d3a:	e05c      	b.n	8002df6 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d3c:	f7fe fe08 	bl	8001950 <HAL_GetTick>
 8002d40:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d44:	e00a      	b.n	8002d5c <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d46:	f7fe fe03 	bl	8001950 <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b64      	cmp	r3, #100	; 0x64
 8002d54:	d902      	bls.n	8002d5c <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	f000 bf0d 	b.w	8003b76 <HAL_RCC_OscConfig+0x109a>
 8002d5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d60:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d64:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002d68:	fa93 f3a3 	rbit	r3, r3
 8002d6c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8002d70:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d74:	fab3 f383 	clz	r3, r3
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	095b      	lsrs	r3, r3, #5
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	f043 0301 	orr.w	r3, r3, #1
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d102      	bne.n	8002d8e <HAL_RCC_OscConfig+0x2b2>
 8002d88:	4b19      	ldr	r3, [pc, #100]	; (8002df0 <HAL_RCC_OscConfig+0x314>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	e015      	b.n	8002dba <HAL_RCC_OscConfig+0x2de>
 8002d8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d92:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d96:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002d9a:	fa93 f3a3 	rbit	r3, r3
 8002d9e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8002da2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002da6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002daa:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002dae:	fa93 f3a3 	rbit	r3, r3
 8002db2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002db6:	4b0e      	ldr	r3, [pc, #56]	; (8002df0 <HAL_RCC_OscConfig+0x314>)
 8002db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002dbe:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8002dc2:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002dc6:	fa92 f2a2 	rbit	r2, r2
 8002dca:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8002dce:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002dd2:	fab2 f282 	clz	r2, r2
 8002dd6:	b2d2      	uxtb	r2, r2
 8002dd8:	f042 0220 	orr.w	r2, r2, #32
 8002ddc:	b2d2      	uxtb	r2, r2
 8002dde:	f002 021f 	and.w	r2, r2, #31
 8002de2:	2101      	movs	r1, #1
 8002de4:	fa01 f202 	lsl.w	r2, r1, r2
 8002de8:	4013      	ands	r3, r2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1ab      	bne.n	8002d46 <HAL_RCC_OscConfig+0x26a>
 8002dee:	e002      	b.n	8002df6 <HAL_RCC_OscConfig+0x31a>
 8002df0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002df4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002df6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dfa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	f000 817f 	beq.w	800310a <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002e0c:	4ba7      	ldr	r3, [pc, #668]	; (80030ac <HAL_RCC_OscConfig+0x5d0>)
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f003 030c 	and.w	r3, r3, #12
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d00c      	beq.n	8002e32 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002e18:	4ba4      	ldr	r3, [pc, #656]	; (80030ac <HAL_RCC_OscConfig+0x5d0>)
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f003 030c 	and.w	r3, r3, #12
 8002e20:	2b08      	cmp	r3, #8
 8002e22:	d173      	bne.n	8002f0c <HAL_RCC_OscConfig+0x430>
 8002e24:	4ba1      	ldr	r3, [pc, #644]	; (80030ac <HAL_RCC_OscConfig+0x5d0>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002e2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e30:	d16c      	bne.n	8002f0c <HAL_RCC_OscConfig+0x430>
 8002e32:	2302      	movs	r3, #2
 8002e34:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e38:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002e3c:	fa93 f3a3 	rbit	r3, r3
 8002e40:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8002e44:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e48:	fab3 f383 	clz	r3, r3
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	095b      	lsrs	r3, r3, #5
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	f043 0301 	orr.w	r3, r3, #1
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d102      	bne.n	8002e62 <HAL_RCC_OscConfig+0x386>
 8002e5c:	4b93      	ldr	r3, [pc, #588]	; (80030ac <HAL_RCC_OscConfig+0x5d0>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	e013      	b.n	8002e8a <HAL_RCC_OscConfig+0x3ae>
 8002e62:	2302      	movs	r3, #2
 8002e64:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e68:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002e6c:	fa93 f3a3 	rbit	r3, r3
 8002e70:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002e74:	2302      	movs	r3, #2
 8002e76:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002e7a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002e7e:	fa93 f3a3 	rbit	r3, r3
 8002e82:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002e86:	4b89      	ldr	r3, [pc, #548]	; (80030ac <HAL_RCC_OscConfig+0x5d0>)
 8002e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8a:	2202      	movs	r2, #2
 8002e8c:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8002e90:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002e94:	fa92 f2a2 	rbit	r2, r2
 8002e98:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8002e9c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002ea0:	fab2 f282 	clz	r2, r2
 8002ea4:	b2d2      	uxtb	r2, r2
 8002ea6:	f042 0220 	orr.w	r2, r2, #32
 8002eaa:	b2d2      	uxtb	r2, r2
 8002eac:	f002 021f 	and.w	r2, r2, #31
 8002eb0:	2101      	movs	r1, #1
 8002eb2:	fa01 f202 	lsl.w	r2, r1, r2
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d00a      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x3f6>
 8002ebc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ec0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d002      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	f000 be52 	b.w	8003b76 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ed2:	4b76      	ldr	r3, [pc, #472]	; (80030ac <HAL_RCC_OscConfig+0x5d0>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002eda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ede:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	21f8      	movs	r1, #248	; 0xf8
 8002ee8:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eec:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8002ef0:	fa91 f1a1 	rbit	r1, r1
 8002ef4:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8002ef8:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002efc:	fab1 f181 	clz	r1, r1
 8002f00:	b2c9      	uxtb	r1, r1
 8002f02:	408b      	lsls	r3, r1
 8002f04:	4969      	ldr	r1, [pc, #420]	; (80030ac <HAL_RCC_OscConfig+0x5d0>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f0a:	e0fe      	b.n	800310a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f10:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	f000 8088 	beq.w	800302e <HAL_RCC_OscConfig+0x552>
 8002f1e:	2301      	movs	r3, #1
 8002f20:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f24:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002f28:	fa93 f3a3 	rbit	r3, r3
 8002f2c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002f30:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f34:	fab3 f383 	clz	r3, r3
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f3e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	461a      	mov	r2, r3
 8002f46:	2301      	movs	r3, #1
 8002f48:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f4a:	f7fe fd01 	bl	8001950 <HAL_GetTick>
 8002f4e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f52:	e00a      	b.n	8002f6a <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f54:	f7fe fcfc 	bl	8001950 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d902      	bls.n	8002f6a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	f000 be06 	b.w	8003b76 <HAL_RCC_OscConfig+0x109a>
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f70:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002f74:	fa93 f3a3 	rbit	r3, r3
 8002f78:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002f7c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f80:	fab3 f383 	clz	r3, r3
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	095b      	lsrs	r3, r3, #5
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	f043 0301 	orr.w	r3, r3, #1
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d102      	bne.n	8002f9a <HAL_RCC_OscConfig+0x4be>
 8002f94:	4b45      	ldr	r3, [pc, #276]	; (80030ac <HAL_RCC_OscConfig+0x5d0>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	e013      	b.n	8002fc2 <HAL_RCC_OscConfig+0x4e6>
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002fa4:	fa93 f3a3 	rbit	r3, r3
 8002fa8:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002fac:	2302      	movs	r3, #2
 8002fae:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002fb2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002fb6:	fa93 f3a3 	rbit	r3, r3
 8002fba:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002fbe:	4b3b      	ldr	r3, [pc, #236]	; (80030ac <HAL_RCC_OscConfig+0x5d0>)
 8002fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc2:	2202      	movs	r2, #2
 8002fc4:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002fc8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002fcc:	fa92 f2a2 	rbit	r2, r2
 8002fd0:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8002fd4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002fd8:	fab2 f282 	clz	r2, r2
 8002fdc:	b2d2      	uxtb	r2, r2
 8002fde:	f042 0220 	orr.w	r2, r2, #32
 8002fe2:	b2d2      	uxtb	r2, r2
 8002fe4:	f002 021f 	and.w	r2, r2, #31
 8002fe8:	2101      	movs	r1, #1
 8002fea:	fa01 f202 	lsl.w	r2, r1, r2
 8002fee:	4013      	ands	r3, r2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d0af      	beq.n	8002f54 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ff4:	4b2d      	ldr	r3, [pc, #180]	; (80030ac <HAL_RCC_OscConfig+0x5d0>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ffc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003000:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	691b      	ldr	r3, [r3, #16]
 8003008:	21f8      	movs	r1, #248	; 0xf8
 800300a:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300e:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8003012:	fa91 f1a1 	rbit	r1, r1
 8003016:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800301a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800301e:	fab1 f181 	clz	r1, r1
 8003022:	b2c9      	uxtb	r1, r1
 8003024:	408b      	lsls	r3, r1
 8003026:	4921      	ldr	r1, [pc, #132]	; (80030ac <HAL_RCC_OscConfig+0x5d0>)
 8003028:	4313      	orrs	r3, r2
 800302a:	600b      	str	r3, [r1, #0]
 800302c:	e06d      	b.n	800310a <HAL_RCC_OscConfig+0x62e>
 800302e:	2301      	movs	r3, #1
 8003030:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003034:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003038:	fa93 f3a3 	rbit	r3, r3
 800303c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8003040:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003044:	fab3 f383 	clz	r3, r3
 8003048:	b2db      	uxtb	r3, r3
 800304a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800304e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	461a      	mov	r2, r3
 8003056:	2300      	movs	r3, #0
 8003058:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800305a:	f7fe fc79 	bl	8001950 <HAL_GetTick>
 800305e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003062:	e00a      	b.n	800307a <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003064:	f7fe fc74 	bl	8001950 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	2b02      	cmp	r3, #2
 8003072:	d902      	bls.n	800307a <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	f000 bd7e 	b.w	8003b76 <HAL_RCC_OscConfig+0x109a>
 800307a:	2302      	movs	r3, #2
 800307c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003080:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003084:	fa93 f3a3 	rbit	r3, r3
 8003088:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800308c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003090:	fab3 f383 	clz	r3, r3
 8003094:	b2db      	uxtb	r3, r3
 8003096:	095b      	lsrs	r3, r3, #5
 8003098:	b2db      	uxtb	r3, r3
 800309a:	f043 0301 	orr.w	r3, r3, #1
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d105      	bne.n	80030b0 <HAL_RCC_OscConfig+0x5d4>
 80030a4:	4b01      	ldr	r3, [pc, #4]	; (80030ac <HAL_RCC_OscConfig+0x5d0>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	e016      	b.n	80030d8 <HAL_RCC_OscConfig+0x5fc>
 80030aa:	bf00      	nop
 80030ac:	40021000 	.word	0x40021000
 80030b0:	2302      	movs	r3, #2
 80030b2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80030ba:	fa93 f3a3 	rbit	r3, r3
 80030be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80030c2:	2302      	movs	r3, #2
 80030c4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80030c8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80030cc:	fa93 f3a3 	rbit	r3, r3
 80030d0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80030d4:	4bbf      	ldr	r3, [pc, #764]	; (80033d4 <HAL_RCC_OscConfig+0x8f8>)
 80030d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d8:	2202      	movs	r2, #2
 80030da:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80030de:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80030e2:	fa92 f2a2 	rbit	r2, r2
 80030e6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80030ea:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80030ee:	fab2 f282 	clz	r2, r2
 80030f2:	b2d2      	uxtb	r2, r2
 80030f4:	f042 0220 	orr.w	r2, r2, #32
 80030f8:	b2d2      	uxtb	r2, r2
 80030fa:	f002 021f 	and.w	r2, r2, #31
 80030fe:	2101      	movs	r1, #1
 8003100:	fa01 f202 	lsl.w	r2, r1, r2
 8003104:	4013      	ands	r3, r2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d1ac      	bne.n	8003064 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800310a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800310e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0308 	and.w	r3, r3, #8
 800311a:	2b00      	cmp	r3, #0
 800311c:	f000 8113 	beq.w	8003346 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003120:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003124:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	695b      	ldr	r3, [r3, #20]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d07c      	beq.n	800322a <HAL_RCC_OscConfig+0x74e>
 8003130:	2301      	movs	r3, #1
 8003132:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003136:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800313a:	fa93 f3a3 	rbit	r3, r3
 800313e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8003142:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003146:	fab3 f383 	clz	r3, r3
 800314a:	b2db      	uxtb	r3, r3
 800314c:	461a      	mov	r2, r3
 800314e:	4ba2      	ldr	r3, [pc, #648]	; (80033d8 <HAL_RCC_OscConfig+0x8fc>)
 8003150:	4413      	add	r3, r2
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	461a      	mov	r2, r3
 8003156:	2301      	movs	r3, #1
 8003158:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800315a:	f7fe fbf9 	bl	8001950 <HAL_GetTick>
 800315e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003162:	e00a      	b.n	800317a <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003164:	f7fe fbf4 	bl	8001950 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	2b02      	cmp	r3, #2
 8003172:	d902      	bls.n	800317a <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	f000 bcfe 	b.w	8003b76 <HAL_RCC_OscConfig+0x109a>
 800317a:	2302      	movs	r3, #2
 800317c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003180:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003184:	fa93 f2a3 	rbit	r2, r3
 8003188:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800318c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003190:	601a      	str	r2, [r3, #0]
 8003192:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003196:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800319a:	2202      	movs	r2, #2
 800319c:	601a      	str	r2, [r3, #0]
 800319e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	fa93 f2a3 	rbit	r2, r3
 80031ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80031b4:	601a      	str	r2, [r3, #0]
 80031b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031ba:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80031be:	2202      	movs	r2, #2
 80031c0:	601a      	str	r2, [r3, #0]
 80031c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031c6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	fa93 f2a3 	rbit	r2, r3
 80031d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031d4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80031d8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031da:	4b7e      	ldr	r3, [pc, #504]	; (80033d4 <HAL_RCC_OscConfig+0x8f8>)
 80031dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031e2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80031e6:	2102      	movs	r1, #2
 80031e8:	6019      	str	r1, [r3, #0]
 80031ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031ee:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	fa93 f1a3 	rbit	r1, r3
 80031f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031fc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003200:	6019      	str	r1, [r3, #0]
  return result;
 8003202:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003206:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	fab3 f383 	clz	r3, r3
 8003210:	b2db      	uxtb	r3, r3
 8003212:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003216:	b2db      	uxtb	r3, r3
 8003218:	f003 031f 	and.w	r3, r3, #31
 800321c:	2101      	movs	r1, #1
 800321e:	fa01 f303 	lsl.w	r3, r1, r3
 8003222:	4013      	ands	r3, r2
 8003224:	2b00      	cmp	r3, #0
 8003226:	d09d      	beq.n	8003164 <HAL_RCC_OscConfig+0x688>
 8003228:	e08d      	b.n	8003346 <HAL_RCC_OscConfig+0x86a>
 800322a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800322e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003232:	2201      	movs	r2, #1
 8003234:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003236:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800323a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	fa93 f2a3 	rbit	r2, r3
 8003244:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003248:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800324c:	601a      	str	r2, [r3, #0]
  return result;
 800324e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003252:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003256:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003258:	fab3 f383 	clz	r3, r3
 800325c:	b2db      	uxtb	r3, r3
 800325e:	461a      	mov	r2, r3
 8003260:	4b5d      	ldr	r3, [pc, #372]	; (80033d8 <HAL_RCC_OscConfig+0x8fc>)
 8003262:	4413      	add	r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	461a      	mov	r2, r3
 8003268:	2300      	movs	r3, #0
 800326a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800326c:	f7fe fb70 	bl	8001950 <HAL_GetTick>
 8003270:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003274:	e00a      	b.n	800328c <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003276:	f7fe fb6b 	bl	8001950 <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	2b02      	cmp	r3, #2
 8003284:	d902      	bls.n	800328c <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	f000 bc75 	b.w	8003b76 <HAL_RCC_OscConfig+0x109a>
 800328c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003290:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003294:	2202      	movs	r2, #2
 8003296:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003298:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800329c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	fa93 f2a3 	rbit	r2, r3
 80032a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032aa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80032ae:	601a      	str	r2, [r3, #0]
 80032b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80032b8:	2202      	movs	r2, #2
 80032ba:	601a      	str	r2, [r3, #0]
 80032bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	fa93 f2a3 	rbit	r2, r3
 80032ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80032d2:	601a      	str	r2, [r3, #0]
 80032d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032d8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80032dc:	2202      	movs	r2, #2
 80032de:	601a      	str	r2, [r3, #0]
 80032e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032e4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	fa93 f2a3 	rbit	r2, r3
 80032ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032f2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80032f6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032f8:	4b36      	ldr	r3, [pc, #216]	; (80033d4 <HAL_RCC_OscConfig+0x8f8>)
 80032fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003300:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003304:	2102      	movs	r1, #2
 8003306:	6019      	str	r1, [r3, #0]
 8003308:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800330c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	fa93 f1a3 	rbit	r1, r3
 8003316:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800331a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800331e:	6019      	str	r1, [r3, #0]
  return result;
 8003320:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003324:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	fab3 f383 	clz	r3, r3
 800332e:	b2db      	uxtb	r3, r3
 8003330:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003334:	b2db      	uxtb	r3, r3
 8003336:	f003 031f 	and.w	r3, r3, #31
 800333a:	2101      	movs	r1, #1
 800333c:	fa01 f303 	lsl.w	r3, r1, r3
 8003340:	4013      	ands	r3, r2
 8003342:	2b00      	cmp	r3, #0
 8003344:	d197      	bne.n	8003276 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003346:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800334a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0304 	and.w	r3, r3, #4
 8003356:	2b00      	cmp	r3, #0
 8003358:	f000 81a5 	beq.w	80036a6 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800335c:	2300      	movs	r3, #0
 800335e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003362:	4b1c      	ldr	r3, [pc, #112]	; (80033d4 <HAL_RCC_OscConfig+0x8f8>)
 8003364:	69db      	ldr	r3, [r3, #28]
 8003366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d116      	bne.n	800339c <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800336e:	4b19      	ldr	r3, [pc, #100]	; (80033d4 <HAL_RCC_OscConfig+0x8f8>)
 8003370:	69db      	ldr	r3, [r3, #28]
 8003372:	4a18      	ldr	r2, [pc, #96]	; (80033d4 <HAL_RCC_OscConfig+0x8f8>)
 8003374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003378:	61d3      	str	r3, [r2, #28]
 800337a:	4b16      	ldr	r3, [pc, #88]	; (80033d4 <HAL_RCC_OscConfig+0x8f8>)
 800337c:	69db      	ldr	r3, [r3, #28]
 800337e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003382:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003386:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800338a:	601a      	str	r2, [r3, #0]
 800338c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003390:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003394:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003396:	2301      	movs	r3, #1
 8003398:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800339c:	4b0f      	ldr	r3, [pc, #60]	; (80033dc <HAL_RCC_OscConfig+0x900>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d121      	bne.n	80033ec <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033a8:	4b0c      	ldr	r3, [pc, #48]	; (80033dc <HAL_RCC_OscConfig+0x900>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a0b      	ldr	r2, [pc, #44]	; (80033dc <HAL_RCC_OscConfig+0x900>)
 80033ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033b2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033b4:	f7fe facc 	bl	8001950 <HAL_GetTick>
 80033b8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033bc:	e010      	b.n	80033e0 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033be:	f7fe fac7 	bl	8001950 <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b64      	cmp	r3, #100	; 0x64
 80033cc:	d908      	bls.n	80033e0 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e3d1      	b.n	8003b76 <HAL_RCC_OscConfig+0x109a>
 80033d2:	bf00      	nop
 80033d4:	40021000 	.word	0x40021000
 80033d8:	10908120 	.word	0x10908120
 80033dc:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033e0:	4b8d      	ldr	r3, [pc, #564]	; (8003618 <HAL_RCC_OscConfig+0xb3c>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d0e8      	beq.n	80033be <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033f0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d106      	bne.n	800340a <HAL_RCC_OscConfig+0x92e>
 80033fc:	4b87      	ldr	r3, [pc, #540]	; (800361c <HAL_RCC_OscConfig+0xb40>)
 80033fe:	6a1b      	ldr	r3, [r3, #32]
 8003400:	4a86      	ldr	r2, [pc, #536]	; (800361c <HAL_RCC_OscConfig+0xb40>)
 8003402:	f043 0301 	orr.w	r3, r3, #1
 8003406:	6213      	str	r3, [r2, #32]
 8003408:	e035      	b.n	8003476 <HAL_RCC_OscConfig+0x99a>
 800340a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800340e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d10c      	bne.n	8003434 <HAL_RCC_OscConfig+0x958>
 800341a:	4b80      	ldr	r3, [pc, #512]	; (800361c <HAL_RCC_OscConfig+0xb40>)
 800341c:	6a1b      	ldr	r3, [r3, #32]
 800341e:	4a7f      	ldr	r2, [pc, #508]	; (800361c <HAL_RCC_OscConfig+0xb40>)
 8003420:	f023 0301 	bic.w	r3, r3, #1
 8003424:	6213      	str	r3, [r2, #32]
 8003426:	4b7d      	ldr	r3, [pc, #500]	; (800361c <HAL_RCC_OscConfig+0xb40>)
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	4a7c      	ldr	r2, [pc, #496]	; (800361c <HAL_RCC_OscConfig+0xb40>)
 800342c:	f023 0304 	bic.w	r3, r3, #4
 8003430:	6213      	str	r3, [r2, #32]
 8003432:	e020      	b.n	8003476 <HAL_RCC_OscConfig+0x99a>
 8003434:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003438:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	2b05      	cmp	r3, #5
 8003442:	d10c      	bne.n	800345e <HAL_RCC_OscConfig+0x982>
 8003444:	4b75      	ldr	r3, [pc, #468]	; (800361c <HAL_RCC_OscConfig+0xb40>)
 8003446:	6a1b      	ldr	r3, [r3, #32]
 8003448:	4a74      	ldr	r2, [pc, #464]	; (800361c <HAL_RCC_OscConfig+0xb40>)
 800344a:	f043 0304 	orr.w	r3, r3, #4
 800344e:	6213      	str	r3, [r2, #32]
 8003450:	4b72      	ldr	r3, [pc, #456]	; (800361c <HAL_RCC_OscConfig+0xb40>)
 8003452:	6a1b      	ldr	r3, [r3, #32]
 8003454:	4a71      	ldr	r2, [pc, #452]	; (800361c <HAL_RCC_OscConfig+0xb40>)
 8003456:	f043 0301 	orr.w	r3, r3, #1
 800345a:	6213      	str	r3, [r2, #32]
 800345c:	e00b      	b.n	8003476 <HAL_RCC_OscConfig+0x99a>
 800345e:	4b6f      	ldr	r3, [pc, #444]	; (800361c <HAL_RCC_OscConfig+0xb40>)
 8003460:	6a1b      	ldr	r3, [r3, #32]
 8003462:	4a6e      	ldr	r2, [pc, #440]	; (800361c <HAL_RCC_OscConfig+0xb40>)
 8003464:	f023 0301 	bic.w	r3, r3, #1
 8003468:	6213      	str	r3, [r2, #32]
 800346a:	4b6c      	ldr	r3, [pc, #432]	; (800361c <HAL_RCC_OscConfig+0xb40>)
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	4a6b      	ldr	r2, [pc, #428]	; (800361c <HAL_RCC_OscConfig+0xb40>)
 8003470:	f023 0304 	bic.w	r3, r3, #4
 8003474:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003476:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800347a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	2b00      	cmp	r3, #0
 8003484:	f000 8081 	beq.w	800358a <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003488:	f7fe fa62 	bl	8001950 <HAL_GetTick>
 800348c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003490:	e00b      	b.n	80034aa <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003492:	f7fe fa5d 	bl	8001950 <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	f241 3288 	movw	r2, #5000	; 0x1388
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e365      	b.n	8003b76 <HAL_RCC_OscConfig+0x109a>
 80034aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034ae:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80034b2:	2202      	movs	r2, #2
 80034b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034ba:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	fa93 f2a3 	rbit	r2, r3
 80034c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034c8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80034cc:	601a      	str	r2, [r3, #0]
 80034ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034d2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80034d6:	2202      	movs	r2, #2
 80034d8:	601a      	str	r2, [r3, #0]
 80034da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034de:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	fa93 f2a3 	rbit	r2, r3
 80034e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034ec:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80034f0:	601a      	str	r2, [r3, #0]
  return result;
 80034f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034f6:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80034fa:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034fc:	fab3 f383 	clz	r3, r3
 8003500:	b2db      	uxtb	r3, r3
 8003502:	095b      	lsrs	r3, r3, #5
 8003504:	b2db      	uxtb	r3, r3
 8003506:	f043 0302 	orr.w	r3, r3, #2
 800350a:	b2db      	uxtb	r3, r3
 800350c:	2b02      	cmp	r3, #2
 800350e:	d102      	bne.n	8003516 <HAL_RCC_OscConfig+0xa3a>
 8003510:	4b42      	ldr	r3, [pc, #264]	; (800361c <HAL_RCC_OscConfig+0xb40>)
 8003512:	6a1b      	ldr	r3, [r3, #32]
 8003514:	e013      	b.n	800353e <HAL_RCC_OscConfig+0xa62>
 8003516:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800351a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800351e:	2202      	movs	r2, #2
 8003520:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003522:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003526:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	fa93 f2a3 	rbit	r2, r3
 8003530:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003534:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003538:	601a      	str	r2, [r3, #0]
 800353a:	4b38      	ldr	r3, [pc, #224]	; (800361c <HAL_RCC_OscConfig+0xb40>)
 800353c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003542:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003546:	2102      	movs	r1, #2
 8003548:	6011      	str	r1, [r2, #0]
 800354a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800354e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003552:	6812      	ldr	r2, [r2, #0]
 8003554:	fa92 f1a2 	rbit	r1, r2
 8003558:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800355c:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003560:	6011      	str	r1, [r2, #0]
  return result;
 8003562:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003566:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800356a:	6812      	ldr	r2, [r2, #0]
 800356c:	fab2 f282 	clz	r2, r2
 8003570:	b2d2      	uxtb	r2, r2
 8003572:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003576:	b2d2      	uxtb	r2, r2
 8003578:	f002 021f 	and.w	r2, r2, #31
 800357c:	2101      	movs	r1, #1
 800357e:	fa01 f202 	lsl.w	r2, r1, r2
 8003582:	4013      	ands	r3, r2
 8003584:	2b00      	cmp	r3, #0
 8003586:	d084      	beq.n	8003492 <HAL_RCC_OscConfig+0x9b6>
 8003588:	e083      	b.n	8003692 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800358a:	f7fe f9e1 	bl	8001950 <HAL_GetTick>
 800358e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003592:	e00b      	b.n	80035ac <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003594:	f7fe f9dc 	bl	8001950 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d901      	bls.n	80035ac <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e2e4      	b.n	8003b76 <HAL_RCC_OscConfig+0x109a>
 80035ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035b0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80035b4:	2202      	movs	r2, #2
 80035b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035bc:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	fa93 f2a3 	rbit	r2, r3
 80035c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035ca:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80035ce:	601a      	str	r2, [r3, #0]
 80035d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035d4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80035d8:	2202      	movs	r2, #2
 80035da:	601a      	str	r2, [r3, #0]
 80035dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035e0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	fa93 f2a3 	rbit	r2, r3
 80035ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035ee:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80035f2:	601a      	str	r2, [r3, #0]
  return result;
 80035f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035f8:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80035fc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035fe:	fab3 f383 	clz	r3, r3
 8003602:	b2db      	uxtb	r3, r3
 8003604:	095b      	lsrs	r3, r3, #5
 8003606:	b2db      	uxtb	r3, r3
 8003608:	f043 0302 	orr.w	r3, r3, #2
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b02      	cmp	r3, #2
 8003610:	d106      	bne.n	8003620 <HAL_RCC_OscConfig+0xb44>
 8003612:	4b02      	ldr	r3, [pc, #8]	; (800361c <HAL_RCC_OscConfig+0xb40>)
 8003614:	6a1b      	ldr	r3, [r3, #32]
 8003616:	e017      	b.n	8003648 <HAL_RCC_OscConfig+0xb6c>
 8003618:	40007000 	.word	0x40007000
 800361c:	40021000 	.word	0x40021000
 8003620:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003624:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003628:	2202      	movs	r2, #2
 800362a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800362c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003630:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	fa93 f2a3 	rbit	r2, r3
 800363a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800363e:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8003642:	601a      	str	r2, [r3, #0]
 8003644:	4bb3      	ldr	r3, [pc, #716]	; (8003914 <HAL_RCC_OscConfig+0xe38>)
 8003646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003648:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800364c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003650:	2102      	movs	r1, #2
 8003652:	6011      	str	r1, [r2, #0]
 8003654:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003658:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800365c:	6812      	ldr	r2, [r2, #0]
 800365e:	fa92 f1a2 	rbit	r1, r2
 8003662:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003666:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 800366a:	6011      	str	r1, [r2, #0]
  return result;
 800366c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003670:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003674:	6812      	ldr	r2, [r2, #0]
 8003676:	fab2 f282 	clz	r2, r2
 800367a:	b2d2      	uxtb	r2, r2
 800367c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003680:	b2d2      	uxtb	r2, r2
 8003682:	f002 021f 	and.w	r2, r2, #31
 8003686:	2101      	movs	r1, #1
 8003688:	fa01 f202 	lsl.w	r2, r1, r2
 800368c:	4013      	ands	r3, r2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d180      	bne.n	8003594 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003692:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003696:	2b01      	cmp	r3, #1
 8003698:	d105      	bne.n	80036a6 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800369a:	4b9e      	ldr	r3, [pc, #632]	; (8003914 <HAL_RCC_OscConfig+0xe38>)
 800369c:	69db      	ldr	r3, [r3, #28]
 800369e:	4a9d      	ldr	r2, [pc, #628]	; (8003914 <HAL_RCC_OscConfig+0xe38>)
 80036a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036a4:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036aa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	699b      	ldr	r3, [r3, #24]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	f000 825e 	beq.w	8003b74 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036b8:	4b96      	ldr	r3, [pc, #600]	; (8003914 <HAL_RCC_OscConfig+0xe38>)
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f003 030c 	and.w	r3, r3, #12
 80036c0:	2b08      	cmp	r3, #8
 80036c2:	f000 821f 	beq.w	8003b04 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036ca:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	f040 8170 	bne.w	80039b8 <HAL_RCC_OscConfig+0xedc>
 80036d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036dc:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80036e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80036e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036ea:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	fa93 f2a3 	rbit	r2, r3
 80036f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036f8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80036fc:	601a      	str	r2, [r3, #0]
  return result;
 80036fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003702:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003706:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003708:	fab3 f383 	clz	r3, r3
 800370c:	b2db      	uxtb	r3, r3
 800370e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003712:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	461a      	mov	r2, r3
 800371a:	2300      	movs	r3, #0
 800371c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800371e:	f7fe f917 	bl	8001950 <HAL_GetTick>
 8003722:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003726:	e009      	b.n	800373c <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003728:	f7fe f912 	bl	8001950 <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	2b02      	cmp	r3, #2
 8003736:	d901      	bls.n	800373c <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e21c      	b.n	8003b76 <HAL_RCC_OscConfig+0x109a>
 800373c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003740:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003744:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003748:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800374a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800374e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	fa93 f2a3 	rbit	r2, r3
 8003758:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800375c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003760:	601a      	str	r2, [r3, #0]
  return result;
 8003762:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003766:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800376a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800376c:	fab3 f383 	clz	r3, r3
 8003770:	b2db      	uxtb	r3, r3
 8003772:	095b      	lsrs	r3, r3, #5
 8003774:	b2db      	uxtb	r3, r3
 8003776:	f043 0301 	orr.w	r3, r3, #1
 800377a:	b2db      	uxtb	r3, r3
 800377c:	2b01      	cmp	r3, #1
 800377e:	d102      	bne.n	8003786 <HAL_RCC_OscConfig+0xcaa>
 8003780:	4b64      	ldr	r3, [pc, #400]	; (8003914 <HAL_RCC_OscConfig+0xe38>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	e027      	b.n	80037d6 <HAL_RCC_OscConfig+0xcfa>
 8003786:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800378a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800378e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003792:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003794:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003798:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	fa93 f2a3 	rbit	r2, r3
 80037a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037a6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80037aa:	601a      	str	r2, [r3, #0]
 80037ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037b0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80037b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037b8:	601a      	str	r2, [r3, #0]
 80037ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037be:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	fa93 f2a3 	rbit	r2, r3
 80037c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037cc:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80037d0:	601a      	str	r2, [r3, #0]
 80037d2:	4b50      	ldr	r3, [pc, #320]	; (8003914 <HAL_RCC_OscConfig+0xe38>)
 80037d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80037da:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80037de:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80037e2:	6011      	str	r1, [r2, #0]
 80037e4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80037e8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80037ec:	6812      	ldr	r2, [r2, #0]
 80037ee:	fa92 f1a2 	rbit	r1, r2
 80037f2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80037f6:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80037fa:	6011      	str	r1, [r2, #0]
  return result;
 80037fc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003800:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8003804:	6812      	ldr	r2, [r2, #0]
 8003806:	fab2 f282 	clz	r2, r2
 800380a:	b2d2      	uxtb	r2, r2
 800380c:	f042 0220 	orr.w	r2, r2, #32
 8003810:	b2d2      	uxtb	r2, r2
 8003812:	f002 021f 	and.w	r2, r2, #31
 8003816:	2101      	movs	r1, #1
 8003818:	fa01 f202 	lsl.w	r2, r1, r2
 800381c:	4013      	ands	r3, r2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d182      	bne.n	8003728 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003822:	4b3c      	ldr	r3, [pc, #240]	; (8003914 <HAL_RCC_OscConfig+0xe38>)
 8003824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003826:	f023 020f 	bic.w	r2, r3, #15
 800382a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800382e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003836:	4937      	ldr	r1, [pc, #220]	; (8003914 <HAL_RCC_OscConfig+0xe38>)
 8003838:	4313      	orrs	r3, r2
 800383a:	62cb      	str	r3, [r1, #44]	; 0x2c
 800383c:	4b35      	ldr	r3, [pc, #212]	; (8003914 <HAL_RCC_OscConfig+0xe38>)
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8003844:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003848:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	6a19      	ldr	r1, [r3, #32]
 8003850:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003854:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	69db      	ldr	r3, [r3, #28]
 800385c:	430b      	orrs	r3, r1
 800385e:	492d      	ldr	r1, [pc, #180]	; (8003914 <HAL_RCC_OscConfig+0xe38>)
 8003860:	4313      	orrs	r3, r2
 8003862:	604b      	str	r3, [r1, #4]
 8003864:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003868:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800386c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003870:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003872:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003876:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	fa93 f2a3 	rbit	r2, r3
 8003880:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003884:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003888:	601a      	str	r2, [r3, #0]
  return result;
 800388a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800388e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003892:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003894:	fab3 f383 	clz	r3, r3
 8003898:	b2db      	uxtb	r3, r3
 800389a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800389e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	461a      	mov	r2, r3
 80038a6:	2301      	movs	r3, #1
 80038a8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038aa:	f7fe f851 	bl	8001950 <HAL_GetTick>
 80038ae:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038b2:	e009      	b.n	80038c8 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038b4:	f7fe f84c 	bl	8001950 <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d901      	bls.n	80038c8 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e156      	b.n	8003b76 <HAL_RCC_OscConfig+0x109a>
 80038c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038cc:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80038d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038da:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	fa93 f2a3 	rbit	r2, r3
 80038e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038e8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80038ec:	601a      	str	r2, [r3, #0]
  return result;
 80038ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038f2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80038f6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038f8:	fab3 f383 	clz	r3, r3
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	095b      	lsrs	r3, r3, #5
 8003900:	b2db      	uxtb	r3, r3
 8003902:	f043 0301 	orr.w	r3, r3, #1
 8003906:	b2db      	uxtb	r3, r3
 8003908:	2b01      	cmp	r3, #1
 800390a:	d105      	bne.n	8003918 <HAL_RCC_OscConfig+0xe3c>
 800390c:	4b01      	ldr	r3, [pc, #4]	; (8003914 <HAL_RCC_OscConfig+0xe38>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	e02a      	b.n	8003968 <HAL_RCC_OscConfig+0xe8c>
 8003912:	bf00      	nop
 8003914:	40021000 	.word	0x40021000
 8003918:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800391c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003920:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003924:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003926:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800392a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	fa93 f2a3 	rbit	r2, r3
 8003934:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003938:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800393c:	601a      	str	r2, [r3, #0]
 800393e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003942:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003946:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800394a:	601a      	str	r2, [r3, #0]
 800394c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003950:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	fa93 f2a3 	rbit	r2, r3
 800395a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800395e:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003962:	601a      	str	r2, [r3, #0]
 8003964:	4b86      	ldr	r3, [pc, #536]	; (8003b80 <HAL_RCC_OscConfig+0x10a4>)
 8003966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003968:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800396c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003970:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003974:	6011      	str	r1, [r2, #0]
 8003976:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800397a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800397e:	6812      	ldr	r2, [r2, #0]
 8003980:	fa92 f1a2 	rbit	r1, r2
 8003984:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003988:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 800398c:	6011      	str	r1, [r2, #0]
  return result;
 800398e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003992:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8003996:	6812      	ldr	r2, [r2, #0]
 8003998:	fab2 f282 	clz	r2, r2
 800399c:	b2d2      	uxtb	r2, r2
 800399e:	f042 0220 	orr.w	r2, r2, #32
 80039a2:	b2d2      	uxtb	r2, r2
 80039a4:	f002 021f 	and.w	r2, r2, #31
 80039a8:	2101      	movs	r1, #1
 80039aa:	fa01 f202 	lsl.w	r2, r1, r2
 80039ae:	4013      	ands	r3, r2
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	f43f af7f 	beq.w	80038b4 <HAL_RCC_OscConfig+0xdd8>
 80039b6:	e0dd      	b.n	8003b74 <HAL_RCC_OscConfig+0x1098>
 80039b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039bc:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80039c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80039c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039ca:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	fa93 f2a3 	rbit	r2, r3
 80039d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039d8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80039dc:	601a      	str	r2, [r3, #0]
  return result;
 80039de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039e2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80039e6:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039e8:	fab3 f383 	clz	r3, r3
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80039f2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	461a      	mov	r2, r3
 80039fa:	2300      	movs	r3, #0
 80039fc:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039fe:	f7fd ffa7 	bl	8001950 <HAL_GetTick>
 8003a02:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a06:	e009      	b.n	8003a1c <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a08:	f7fd ffa2 	bl	8001950 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d901      	bls.n	8003a1c <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e0ac      	b.n	8003b76 <HAL_RCC_OscConfig+0x109a>
 8003a1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a20:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003a24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a2e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	fa93 f2a3 	rbit	r2, r3
 8003a38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a3c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003a40:	601a      	str	r2, [r3, #0]
  return result;
 8003a42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a46:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003a4a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a4c:	fab3 f383 	clz	r3, r3
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	095b      	lsrs	r3, r3, #5
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	f043 0301 	orr.w	r3, r3, #1
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d102      	bne.n	8003a66 <HAL_RCC_OscConfig+0xf8a>
 8003a60:	4b47      	ldr	r3, [pc, #284]	; (8003b80 <HAL_RCC_OscConfig+0x10a4>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	e027      	b.n	8003ab6 <HAL_RCC_OscConfig+0xfda>
 8003a66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a6a:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003a6e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a78:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	fa93 f2a3 	rbit	r2, r3
 8003a82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a86:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003a8a:	601a      	str	r2, [r3, #0]
 8003a8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a90:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003a94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a98:	601a      	str	r2, [r3, #0]
 8003a9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a9e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	fa93 f2a3 	rbit	r2, r3
 8003aa8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003aac:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8003ab0:	601a      	str	r2, [r3, #0]
 8003ab2:	4b33      	ldr	r3, [pc, #204]	; (8003b80 <HAL_RCC_OscConfig+0x10a4>)
 8003ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003aba:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003abe:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003ac2:	6011      	str	r1, [r2, #0]
 8003ac4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003ac8:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003acc:	6812      	ldr	r2, [r2, #0]
 8003ace:	fa92 f1a2 	rbit	r1, r2
 8003ad2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003ad6:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8003ada:	6011      	str	r1, [r2, #0]
  return result;
 8003adc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003ae0:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8003ae4:	6812      	ldr	r2, [r2, #0]
 8003ae6:	fab2 f282 	clz	r2, r2
 8003aea:	b2d2      	uxtb	r2, r2
 8003aec:	f042 0220 	orr.w	r2, r2, #32
 8003af0:	b2d2      	uxtb	r2, r2
 8003af2:	f002 021f 	and.w	r2, r2, #31
 8003af6:	2101      	movs	r1, #1
 8003af8:	fa01 f202 	lsl.w	r2, r1, r2
 8003afc:	4013      	ands	r3, r2
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d182      	bne.n	8003a08 <HAL_RCC_OscConfig+0xf2c>
 8003b02:	e037      	b.n	8003b74 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b08:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	699b      	ldr	r3, [r3, #24]
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d101      	bne.n	8003b18 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e02e      	b.n	8003b76 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b18:	4b19      	ldr	r3, [pc, #100]	; (8003b80 <HAL_RCC_OscConfig+0x10a4>)
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003b20:	4b17      	ldr	r3, [pc, #92]	; (8003b80 <HAL_RCC_OscConfig+0x10a4>)
 8003b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b24:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003b28:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003b2c:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8003b30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b34:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	69db      	ldr	r3, [r3, #28]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d117      	bne.n	8003b70 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003b40:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003b44:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003b48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b4c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d10b      	bne.n	8003b70 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003b58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b5c:	f003 020f 	and.w	r2, r3, #15
 8003b60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b64:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d001      	beq.n	8003b74 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e000      	b.n	8003b76 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	40021000 	.word	0x40021000

08003b84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b09e      	sub	sp, #120	; 0x78
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d101      	bne.n	8003b9c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e162      	b.n	8003e62 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b9c:	4b90      	ldr	r3, [pc, #576]	; (8003de0 <HAL_RCC_ClockConfig+0x25c>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0307 	and.w	r3, r3, #7
 8003ba4:	683a      	ldr	r2, [r7, #0]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d910      	bls.n	8003bcc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003baa:	4b8d      	ldr	r3, [pc, #564]	; (8003de0 <HAL_RCC_ClockConfig+0x25c>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f023 0207 	bic.w	r2, r3, #7
 8003bb2:	498b      	ldr	r1, [pc, #556]	; (8003de0 <HAL_RCC_ClockConfig+0x25c>)
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bba:	4b89      	ldr	r3, [pc, #548]	; (8003de0 <HAL_RCC_ClockConfig+0x25c>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0307 	and.w	r3, r3, #7
 8003bc2:	683a      	ldr	r2, [r7, #0]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d001      	beq.n	8003bcc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e14a      	b.n	8003e62 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0302 	and.w	r3, r3, #2
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d008      	beq.n	8003bea <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bd8:	4b82      	ldr	r3, [pc, #520]	; (8003de4 <HAL_RCC_ClockConfig+0x260>)
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	497f      	ldr	r1, [pc, #508]	; (8003de4 <HAL_RCC_ClockConfig+0x260>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0301 	and.w	r3, r3, #1
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	f000 80dc 	beq.w	8003db0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d13c      	bne.n	8003c7a <HAL_RCC_ClockConfig+0xf6>
 8003c00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c04:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c08:	fa93 f3a3 	rbit	r3, r3
 8003c0c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003c0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c10:	fab3 f383 	clz	r3, r3
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	095b      	lsrs	r3, r3, #5
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	f043 0301 	orr.w	r3, r3, #1
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d102      	bne.n	8003c2a <HAL_RCC_ClockConfig+0xa6>
 8003c24:	4b6f      	ldr	r3, [pc, #444]	; (8003de4 <HAL_RCC_ClockConfig+0x260>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	e00f      	b.n	8003c4a <HAL_RCC_ClockConfig+0xc6>
 8003c2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c2e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c32:	fa93 f3a3 	rbit	r3, r3
 8003c36:	667b      	str	r3, [r7, #100]	; 0x64
 8003c38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c3c:	663b      	str	r3, [r7, #96]	; 0x60
 8003c3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c40:	fa93 f3a3 	rbit	r3, r3
 8003c44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c46:	4b67      	ldr	r3, [pc, #412]	; (8003de4 <HAL_RCC_ClockConfig+0x260>)
 8003c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003c4e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003c50:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c52:	fa92 f2a2 	rbit	r2, r2
 8003c56:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003c58:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003c5a:	fab2 f282 	clz	r2, r2
 8003c5e:	b2d2      	uxtb	r2, r2
 8003c60:	f042 0220 	orr.w	r2, r2, #32
 8003c64:	b2d2      	uxtb	r2, r2
 8003c66:	f002 021f 	and.w	r2, r2, #31
 8003c6a:	2101      	movs	r1, #1
 8003c6c:	fa01 f202 	lsl.w	r2, r1, r2
 8003c70:	4013      	ands	r3, r2
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d17b      	bne.n	8003d6e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e0f3      	b.n	8003e62 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d13c      	bne.n	8003cfc <HAL_RCC_ClockConfig+0x178>
 8003c82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c86:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c8a:	fa93 f3a3 	rbit	r3, r3
 8003c8e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003c90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c92:	fab3 f383 	clz	r3, r3
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	095b      	lsrs	r3, r3, #5
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	f043 0301 	orr.w	r3, r3, #1
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d102      	bne.n	8003cac <HAL_RCC_ClockConfig+0x128>
 8003ca6:	4b4f      	ldr	r3, [pc, #316]	; (8003de4 <HAL_RCC_ClockConfig+0x260>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	e00f      	b.n	8003ccc <HAL_RCC_ClockConfig+0x148>
 8003cac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003cb0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cb4:	fa93 f3a3 	rbit	r3, r3
 8003cb8:	647b      	str	r3, [r7, #68]	; 0x44
 8003cba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003cbe:	643b      	str	r3, [r7, #64]	; 0x40
 8003cc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cc2:	fa93 f3a3 	rbit	r3, r3
 8003cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cc8:	4b46      	ldr	r3, [pc, #280]	; (8003de4 <HAL_RCC_ClockConfig+0x260>)
 8003cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ccc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003cd0:	63ba      	str	r2, [r7, #56]	; 0x38
 8003cd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003cd4:	fa92 f2a2 	rbit	r2, r2
 8003cd8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003cda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003cdc:	fab2 f282 	clz	r2, r2
 8003ce0:	b2d2      	uxtb	r2, r2
 8003ce2:	f042 0220 	orr.w	r2, r2, #32
 8003ce6:	b2d2      	uxtb	r2, r2
 8003ce8:	f002 021f 	and.w	r2, r2, #31
 8003cec:	2101      	movs	r1, #1
 8003cee:	fa01 f202 	lsl.w	r2, r1, r2
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d13a      	bne.n	8003d6e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e0b2      	b.n	8003e62 <HAL_RCC_ClockConfig+0x2de>
 8003cfc:	2302      	movs	r3, #2
 8003cfe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d02:	fa93 f3a3 	rbit	r3, r3
 8003d06:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d0a:	fab3 f383 	clz	r3, r3
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	095b      	lsrs	r3, r3, #5
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	f043 0301 	orr.w	r3, r3, #1
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d102      	bne.n	8003d24 <HAL_RCC_ClockConfig+0x1a0>
 8003d1e:	4b31      	ldr	r3, [pc, #196]	; (8003de4 <HAL_RCC_ClockConfig+0x260>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	e00d      	b.n	8003d40 <HAL_RCC_ClockConfig+0x1bc>
 8003d24:	2302      	movs	r3, #2
 8003d26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d2a:	fa93 f3a3 	rbit	r3, r3
 8003d2e:	627b      	str	r3, [r7, #36]	; 0x24
 8003d30:	2302      	movs	r3, #2
 8003d32:	623b      	str	r3, [r7, #32]
 8003d34:	6a3b      	ldr	r3, [r7, #32]
 8003d36:	fa93 f3a3 	rbit	r3, r3
 8003d3a:	61fb      	str	r3, [r7, #28]
 8003d3c:	4b29      	ldr	r3, [pc, #164]	; (8003de4 <HAL_RCC_ClockConfig+0x260>)
 8003d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d40:	2202      	movs	r2, #2
 8003d42:	61ba      	str	r2, [r7, #24]
 8003d44:	69ba      	ldr	r2, [r7, #24]
 8003d46:	fa92 f2a2 	rbit	r2, r2
 8003d4a:	617a      	str	r2, [r7, #20]
  return result;
 8003d4c:	697a      	ldr	r2, [r7, #20]
 8003d4e:	fab2 f282 	clz	r2, r2
 8003d52:	b2d2      	uxtb	r2, r2
 8003d54:	f042 0220 	orr.w	r2, r2, #32
 8003d58:	b2d2      	uxtb	r2, r2
 8003d5a:	f002 021f 	and.w	r2, r2, #31
 8003d5e:	2101      	movs	r1, #1
 8003d60:	fa01 f202 	lsl.w	r2, r1, r2
 8003d64:	4013      	ands	r3, r2
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d101      	bne.n	8003d6e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e079      	b.n	8003e62 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d6e:	4b1d      	ldr	r3, [pc, #116]	; (8003de4 <HAL_RCC_ClockConfig+0x260>)
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f023 0203 	bic.w	r2, r3, #3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	491a      	ldr	r1, [pc, #104]	; (8003de4 <HAL_RCC_ClockConfig+0x260>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d80:	f7fd fde6 	bl	8001950 <HAL_GetTick>
 8003d84:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d86:	e00a      	b.n	8003d9e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d88:	f7fd fde2 	bl	8001950 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d901      	bls.n	8003d9e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e061      	b.n	8003e62 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d9e:	4b11      	ldr	r3, [pc, #68]	; (8003de4 <HAL_RCC_ClockConfig+0x260>)
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f003 020c 	and.w	r2, r3, #12
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d1eb      	bne.n	8003d88 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003db0:	4b0b      	ldr	r3, [pc, #44]	; (8003de0 <HAL_RCC_ClockConfig+0x25c>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0307 	and.w	r3, r3, #7
 8003db8:	683a      	ldr	r2, [r7, #0]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d214      	bcs.n	8003de8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dbe:	4b08      	ldr	r3, [pc, #32]	; (8003de0 <HAL_RCC_ClockConfig+0x25c>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f023 0207 	bic.w	r2, r3, #7
 8003dc6:	4906      	ldr	r1, [pc, #24]	; (8003de0 <HAL_RCC_ClockConfig+0x25c>)
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dce:	4b04      	ldr	r3, [pc, #16]	; (8003de0 <HAL_RCC_ClockConfig+0x25c>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0307 	and.w	r3, r3, #7
 8003dd6:	683a      	ldr	r2, [r7, #0]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d005      	beq.n	8003de8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e040      	b.n	8003e62 <HAL_RCC_ClockConfig+0x2de>
 8003de0:	40022000 	.word	0x40022000
 8003de4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0304 	and.w	r3, r3, #4
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d008      	beq.n	8003e06 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003df4:	4b1d      	ldr	r3, [pc, #116]	; (8003e6c <HAL_RCC_ClockConfig+0x2e8>)
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	491a      	ldr	r1, [pc, #104]	; (8003e6c <HAL_RCC_ClockConfig+0x2e8>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0308 	and.w	r3, r3, #8
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d009      	beq.n	8003e26 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e12:	4b16      	ldr	r3, [pc, #88]	; (8003e6c <HAL_RCC_ClockConfig+0x2e8>)
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	691b      	ldr	r3, [r3, #16]
 8003e1e:	00db      	lsls	r3, r3, #3
 8003e20:	4912      	ldr	r1, [pc, #72]	; (8003e6c <HAL_RCC_ClockConfig+0x2e8>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003e26:	f000 f829 	bl	8003e7c <HAL_RCC_GetSysClockFreq>
 8003e2a:	4601      	mov	r1, r0
 8003e2c:	4b0f      	ldr	r3, [pc, #60]	; (8003e6c <HAL_RCC_ClockConfig+0x2e8>)
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e34:	22f0      	movs	r2, #240	; 0xf0
 8003e36:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	fa92 f2a2 	rbit	r2, r2
 8003e3e:	60fa      	str	r2, [r7, #12]
  return result;
 8003e40:	68fa      	ldr	r2, [r7, #12]
 8003e42:	fab2 f282 	clz	r2, r2
 8003e46:	b2d2      	uxtb	r2, r2
 8003e48:	40d3      	lsrs	r3, r2
 8003e4a:	4a09      	ldr	r2, [pc, #36]	; (8003e70 <HAL_RCC_ClockConfig+0x2ec>)
 8003e4c:	5cd3      	ldrb	r3, [r2, r3]
 8003e4e:	fa21 f303 	lsr.w	r3, r1, r3
 8003e52:	4a08      	ldr	r2, [pc, #32]	; (8003e74 <HAL_RCC_ClockConfig+0x2f0>)
 8003e54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003e56:	4b08      	ldr	r3, [pc, #32]	; (8003e78 <HAL_RCC_ClockConfig+0x2f4>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7fd fd34 	bl	80018c8 <HAL_InitTick>
  
  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3778      	adds	r7, #120	; 0x78
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	40021000 	.word	0x40021000
 8003e70:	08004f14 	.word	0x08004f14
 8003e74:	20000004 	.word	0x20000004
 8003e78:	20000008 	.word	0x20000008

08003e7c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b08b      	sub	sp, #44	; 0x2c
 8003e80:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003e82:	2300      	movs	r3, #0
 8003e84:	61fb      	str	r3, [r7, #28]
 8003e86:	2300      	movs	r3, #0
 8003e88:	61bb      	str	r3, [r7, #24]
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e8e:	2300      	movs	r3, #0
 8003e90:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003e92:	2300      	movs	r3, #0
 8003e94:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003e96:	4b2a      	ldr	r3, [pc, #168]	; (8003f40 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	f003 030c 	and.w	r3, r3, #12
 8003ea2:	2b04      	cmp	r3, #4
 8003ea4:	d002      	beq.n	8003eac <HAL_RCC_GetSysClockFreq+0x30>
 8003ea6:	2b08      	cmp	r3, #8
 8003ea8:	d003      	beq.n	8003eb2 <HAL_RCC_GetSysClockFreq+0x36>
 8003eaa:	e03f      	b.n	8003f2c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003eac:	4b25      	ldr	r3, [pc, #148]	; (8003f44 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003eae:	623b      	str	r3, [r7, #32]
      break;
 8003eb0:	e03f      	b.n	8003f32 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003eb8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003ebc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ebe:	68ba      	ldr	r2, [r7, #8]
 8003ec0:	fa92 f2a2 	rbit	r2, r2
 8003ec4:	607a      	str	r2, [r7, #4]
  return result;
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	fab2 f282 	clz	r2, r2
 8003ecc:	b2d2      	uxtb	r2, r2
 8003ece:	40d3      	lsrs	r3, r2
 8003ed0:	4a1d      	ldr	r2, [pc, #116]	; (8003f48 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003ed2:	5cd3      	ldrb	r3, [r2, r3]
 8003ed4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003ed6:	4b1a      	ldr	r3, [pc, #104]	; (8003f40 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eda:	f003 030f 	and.w	r3, r3, #15
 8003ede:	220f      	movs	r2, #15
 8003ee0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ee2:	693a      	ldr	r2, [r7, #16]
 8003ee4:	fa92 f2a2 	rbit	r2, r2
 8003ee8:	60fa      	str	r2, [r7, #12]
  return result;
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	fab2 f282 	clz	r2, r2
 8003ef0:	b2d2      	uxtb	r2, r2
 8003ef2:	40d3      	lsrs	r3, r2
 8003ef4:	4a15      	ldr	r2, [pc, #84]	; (8003f4c <HAL_RCC_GetSysClockFreq+0xd0>)
 8003ef6:	5cd3      	ldrb	r3, [r2, r3]
 8003ef8:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d008      	beq.n	8003f16 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003f04:	4a0f      	ldr	r2, [pc, #60]	; (8003f44 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	fb02 f303 	mul.w	r3, r2, r3
 8003f12:	627b      	str	r3, [r7, #36]	; 0x24
 8003f14:	e007      	b.n	8003f26 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003f16:	4a0b      	ldr	r2, [pc, #44]	; (8003f44 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003f18:	69bb      	ldr	r3, [r7, #24]
 8003f1a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	fb02 f303 	mul.w	r3, r2, r3
 8003f24:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f28:	623b      	str	r3, [r7, #32]
      break;
 8003f2a:	e002      	b.n	8003f32 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f2c:	4b05      	ldr	r3, [pc, #20]	; (8003f44 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003f2e:	623b      	str	r3, [r7, #32]
      break;
 8003f30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f32:	6a3b      	ldr	r3, [r7, #32]
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	372c      	adds	r7, #44	; 0x2c
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr
 8003f40:	40021000 	.word	0x40021000
 8003f44:	007a1200 	.word	0x007a1200
 8003f48:	08004f2c 	.word	0x08004f2c
 8003f4c:	08004f3c 	.word	0x08004f3c

08003f50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f50:	b480      	push	{r7}
 8003f52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f54:	4b03      	ldr	r3, [pc, #12]	; (8003f64 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f56:	681b      	ldr	r3, [r3, #0]
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	20000004 	.word	0x20000004

08003f68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003f6e:	f7ff ffef 	bl	8003f50 <HAL_RCC_GetHCLKFreq>
 8003f72:	4601      	mov	r1, r0
 8003f74:	4b0b      	ldr	r3, [pc, #44]	; (8003fa4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f7c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003f80:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	fa92 f2a2 	rbit	r2, r2
 8003f88:	603a      	str	r2, [r7, #0]
  return result;
 8003f8a:	683a      	ldr	r2, [r7, #0]
 8003f8c:	fab2 f282 	clz	r2, r2
 8003f90:	b2d2      	uxtb	r2, r2
 8003f92:	40d3      	lsrs	r3, r2
 8003f94:	4a04      	ldr	r2, [pc, #16]	; (8003fa8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003f96:	5cd3      	ldrb	r3, [r2, r3]
 8003f98:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3708      	adds	r7, #8
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	40021000 	.word	0x40021000
 8003fa8:	08004f24 	.word	0x08004f24

08003fac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003fb2:	f7ff ffcd 	bl	8003f50 <HAL_RCC_GetHCLKFreq>
 8003fb6:	4601      	mov	r1, r0
 8003fb8:	4b0b      	ldr	r3, [pc, #44]	; (8003fe8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003fc0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003fc4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	fa92 f2a2 	rbit	r2, r2
 8003fcc:	603a      	str	r2, [r7, #0]
  return result;
 8003fce:	683a      	ldr	r2, [r7, #0]
 8003fd0:	fab2 f282 	clz	r2, r2
 8003fd4:	b2d2      	uxtb	r2, r2
 8003fd6:	40d3      	lsrs	r3, r2
 8003fd8:	4a04      	ldr	r2, [pc, #16]	; (8003fec <HAL_RCC_GetPCLK2Freq+0x40>)
 8003fda:	5cd3      	ldrb	r3, [r2, r3]
 8003fdc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3708      	adds	r7, #8
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	40021000 	.word	0x40021000
 8003fec:	08004f24 	.word	0x08004f24

08003ff0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b092      	sub	sp, #72	; 0x48
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004000:	2300      	movs	r3, #0
 8004002:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800400e:	2b00      	cmp	r3, #0
 8004010:	f000 80d4 	beq.w	80041bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004014:	4b4e      	ldr	r3, [pc, #312]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004016:	69db      	ldr	r3, [r3, #28]
 8004018:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d10e      	bne.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004020:	4b4b      	ldr	r3, [pc, #300]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004022:	69db      	ldr	r3, [r3, #28]
 8004024:	4a4a      	ldr	r2, [pc, #296]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004026:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800402a:	61d3      	str	r3, [r2, #28]
 800402c:	4b48      	ldr	r3, [pc, #288]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800402e:	69db      	ldr	r3, [r3, #28]
 8004030:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004034:	60bb      	str	r3, [r7, #8]
 8004036:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004038:	2301      	movs	r3, #1
 800403a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800403e:	4b45      	ldr	r3, [pc, #276]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004046:	2b00      	cmp	r3, #0
 8004048:	d118      	bne.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800404a:	4b42      	ldr	r3, [pc, #264]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a41      	ldr	r2, [pc, #260]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004050:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004054:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004056:	f7fd fc7b 	bl	8001950 <HAL_GetTick>
 800405a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800405c:	e008      	b.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800405e:	f7fd fc77 	bl	8001950 <HAL_GetTick>
 8004062:	4602      	mov	r2, r0
 8004064:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	2b64      	cmp	r3, #100	; 0x64
 800406a:	d901      	bls.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800406c:	2303      	movs	r3, #3
 800406e:	e1d6      	b.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004070:	4b38      	ldr	r3, [pc, #224]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004078:	2b00      	cmp	r3, #0
 800407a:	d0f0      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800407c:	4b34      	ldr	r3, [pc, #208]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800407e:	6a1b      	ldr	r3, [r3, #32]
 8004080:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004084:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004088:	2b00      	cmp	r3, #0
 800408a:	f000 8084 	beq.w	8004196 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004096:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004098:	429a      	cmp	r2, r3
 800409a:	d07c      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800409c:	4b2c      	ldr	r3, [pc, #176]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800409e:	6a1b      	ldr	r3, [r3, #32]
 80040a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80040aa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ae:	fa93 f3a3 	rbit	r3, r3
 80040b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80040b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80040b6:	fab3 f383 	clz	r3, r3
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	461a      	mov	r2, r3
 80040be:	4b26      	ldr	r3, [pc, #152]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80040c0:	4413      	add	r3, r2
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	461a      	mov	r2, r3
 80040c6:	2301      	movs	r3, #1
 80040c8:	6013      	str	r3, [r2, #0]
 80040ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80040ce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040d2:	fa93 f3a3 	rbit	r3, r3
 80040d6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80040d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80040da:	fab3 f383 	clz	r3, r3
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	461a      	mov	r2, r3
 80040e2:	4b1d      	ldr	r3, [pc, #116]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80040e4:	4413      	add	r3, r2
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	461a      	mov	r2, r3
 80040ea:	2300      	movs	r3, #0
 80040ec:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80040ee:	4a18      	ldr	r2, [pc, #96]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040f2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80040f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040f6:	f003 0301 	and.w	r3, r3, #1
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d04b      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040fe:	f7fd fc27 	bl	8001950 <HAL_GetTick>
 8004102:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004104:	e00a      	b.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004106:	f7fd fc23 	bl	8001950 <HAL_GetTick>
 800410a:	4602      	mov	r2, r0
 800410c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	f241 3288 	movw	r2, #5000	; 0x1388
 8004114:	4293      	cmp	r3, r2
 8004116:	d901      	bls.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	e180      	b.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800411c:	2302      	movs	r3, #2
 800411e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004122:	fa93 f3a3 	rbit	r3, r3
 8004126:	627b      	str	r3, [r7, #36]	; 0x24
 8004128:	2302      	movs	r3, #2
 800412a:	623b      	str	r3, [r7, #32]
 800412c:	6a3b      	ldr	r3, [r7, #32]
 800412e:	fa93 f3a3 	rbit	r3, r3
 8004132:	61fb      	str	r3, [r7, #28]
  return result;
 8004134:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004136:	fab3 f383 	clz	r3, r3
 800413a:	b2db      	uxtb	r3, r3
 800413c:	095b      	lsrs	r3, r3, #5
 800413e:	b2db      	uxtb	r3, r3
 8004140:	f043 0302 	orr.w	r3, r3, #2
 8004144:	b2db      	uxtb	r3, r3
 8004146:	2b02      	cmp	r3, #2
 8004148:	d108      	bne.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800414a:	4b01      	ldr	r3, [pc, #4]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800414c:	6a1b      	ldr	r3, [r3, #32]
 800414e:	e00d      	b.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004150:	40021000 	.word	0x40021000
 8004154:	40007000 	.word	0x40007000
 8004158:	10908100 	.word	0x10908100
 800415c:	2302      	movs	r3, #2
 800415e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	fa93 f3a3 	rbit	r3, r3
 8004166:	617b      	str	r3, [r7, #20]
 8004168:	4b9a      	ldr	r3, [pc, #616]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800416a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416c:	2202      	movs	r2, #2
 800416e:	613a      	str	r2, [r7, #16]
 8004170:	693a      	ldr	r2, [r7, #16]
 8004172:	fa92 f2a2 	rbit	r2, r2
 8004176:	60fa      	str	r2, [r7, #12]
  return result;
 8004178:	68fa      	ldr	r2, [r7, #12]
 800417a:	fab2 f282 	clz	r2, r2
 800417e:	b2d2      	uxtb	r2, r2
 8004180:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004184:	b2d2      	uxtb	r2, r2
 8004186:	f002 021f 	and.w	r2, r2, #31
 800418a:	2101      	movs	r1, #1
 800418c:	fa01 f202 	lsl.w	r2, r1, r2
 8004190:	4013      	ands	r3, r2
 8004192:	2b00      	cmp	r3, #0
 8004194:	d0b7      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004196:	4b8f      	ldr	r3, [pc, #572]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004198:	6a1b      	ldr	r3, [r3, #32]
 800419a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	498c      	ldr	r1, [pc, #560]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80041a8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d105      	bne.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041b0:	4b88      	ldr	r3, [pc, #544]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80041b2:	69db      	ldr	r3, [r3, #28]
 80041b4:	4a87      	ldr	r2, [pc, #540]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80041b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041ba:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0301 	and.w	r3, r3, #1
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d008      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80041c8:	4b82      	ldr	r3, [pc, #520]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80041ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041cc:	f023 0203 	bic.w	r2, r3, #3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	497f      	ldr	r1, [pc, #508]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0302 	and.w	r3, r3, #2
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d008      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80041e6:	4b7b      	ldr	r3, [pc, #492]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80041e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	4978      	ldr	r1, [pc, #480]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0304 	and.w	r3, r3, #4
 8004200:	2b00      	cmp	r3, #0
 8004202:	d008      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004204:	4b73      	ldr	r3, [pc, #460]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004208:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	691b      	ldr	r3, [r3, #16]
 8004210:	4970      	ldr	r1, [pc, #448]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004212:	4313      	orrs	r3, r2
 8004214:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0320 	and.w	r3, r3, #32
 800421e:	2b00      	cmp	r3, #0
 8004220:	d008      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004222:	4b6c      	ldr	r3, [pc, #432]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004226:	f023 0210 	bic.w	r2, r3, #16
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	69db      	ldr	r3, [r3, #28]
 800422e:	4969      	ldr	r1, [pc, #420]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004230:	4313      	orrs	r3, r2
 8004232:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d008      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004240:	4b64      	ldr	r3, [pc, #400]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800424c:	4961      	ldr	r1, [pc, #388]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800424e:	4313      	orrs	r3, r2
 8004250:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800425a:	2b00      	cmp	r3, #0
 800425c:	d008      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800425e:	4b5d      	ldr	r3, [pc, #372]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004262:	f023 0220 	bic.w	r2, r3, #32
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a1b      	ldr	r3, [r3, #32]
 800426a:	495a      	ldr	r1, [pc, #360]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800426c:	4313      	orrs	r3, r2
 800426e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004278:	2b00      	cmp	r3, #0
 800427a:	d008      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800427c:	4b55      	ldr	r3, [pc, #340]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800427e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004280:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004288:	4952      	ldr	r1, [pc, #328]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800428a:	4313      	orrs	r3, r2
 800428c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0308 	and.w	r3, r3, #8
 8004296:	2b00      	cmp	r3, #0
 8004298:	d008      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800429a:	4b4e      	ldr	r3, [pc, #312]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800429c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	695b      	ldr	r3, [r3, #20]
 80042a6:	494b      	ldr	r1, [pc, #300]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042a8:	4313      	orrs	r3, r2
 80042aa:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0310 	and.w	r3, r3, #16
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d008      	beq.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80042b8:	4b46      	ldr	r3, [pc, #280]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042bc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	699b      	ldr	r3, [r3, #24]
 80042c4:	4943      	ldr	r1, [pc, #268]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d008      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80042d6:	4b3f      	ldr	r3, [pc, #252]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e2:	493c      	ldr	r1, [pc, #240]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d008      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80042f4:	4b37      	ldr	r3, [pc, #220]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f8:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004300:	4934      	ldr	r1, [pc, #208]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004302:	4313      	orrs	r3, r2
 8004304:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800430e:	2b00      	cmp	r3, #0
 8004310:	d008      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004312:	4b30      	ldr	r3, [pc, #192]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004316:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800431e:	492d      	ldr	r1, [pc, #180]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004320:	4313      	orrs	r3, r2
 8004322:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d008      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004330:	4b28      	ldr	r3, [pc, #160]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004334:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800433c:	4925      	ldr	r1, [pc, #148]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800433e:	4313      	orrs	r3, r2
 8004340:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d008      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800434e:	4b21      	ldr	r3, [pc, #132]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004352:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435a:	491e      	ldr	r1, [pc, #120]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800435c:	4313      	orrs	r3, r2
 800435e:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d008      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800436c:	4b19      	ldr	r3, [pc, #100]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800436e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004370:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004378:	4916      	ldr	r1, [pc, #88]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800437a:	4313      	orrs	r3, r2
 800437c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d008      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800438a:	4b12      	ldr	r3, [pc, #72]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800438c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004396:	490f      	ldr	r1, [pc, #60]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004398:	4313      	orrs	r3, r2
 800439a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d008      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80043a8:	4b0a      	ldr	r3, [pc, #40]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ac:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043b4:	4907      	ldr	r1, [pc, #28]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d00c      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80043c6:	4b03      	ldr	r3, [pc, #12]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ca:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	e002      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80043d2:	bf00      	nop
 80043d4:	40021000 	.word	0x40021000
 80043d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043da:	4913      	ldr	r1, [pc, #76]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d008      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80043ec:	4b0e      	ldr	r3, [pc, #56]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80043ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043f8:	490b      	ldr	r1, [pc, #44]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d008      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800440a:	4b07      	ldr	r3, [pc, #28]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800440c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004416:	4904      	ldr	r1, [pc, #16]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004418:	4313      	orrs	r3, r2
 800441a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	3748      	adds	r7, #72	; 0x48
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	40021000 	.word	0x40021000

0800442c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d101      	bne.n	800443e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e040      	b.n	80044c0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004442:	2b00      	cmp	r3, #0
 8004444:	d106      	bne.n	8004454 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f7fd f97c 	bl	800174c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2224      	movs	r2, #36	; 0x24
 8004458:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f022 0201 	bic.w	r2, r2, #1
 8004468:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 f8b6 	bl	80045dc <UART_SetConfig>
 8004470:	4603      	mov	r3, r0
 8004472:	2b01      	cmp	r3, #1
 8004474:	d101      	bne.n	800447a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e022      	b.n	80044c0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447e:	2b00      	cmp	r3, #0
 8004480:	d002      	beq.n	8004488 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 fa7e 	bl	8004984 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	685a      	ldr	r2, [r3, #4]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004496:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	689a      	ldr	r2, [r3, #8]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f042 0201 	orr.w	r2, r2, #1
 80044b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f000 fb05 	bl	8004ac8 <UART_CheckIdleState>
 80044be:	4603      	mov	r3, r0
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3708      	adds	r7, #8
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b08a      	sub	sp, #40	; 0x28
 80044cc:	af02      	add	r7, sp, #8
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	60b9      	str	r1, [r7, #8]
 80044d2:	603b      	str	r3, [r7, #0]
 80044d4:	4613      	mov	r3, r2
 80044d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044dc:	2b20      	cmp	r3, #32
 80044de:	d178      	bne.n	80045d2 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d002      	beq.n	80044ec <HAL_UART_Transmit+0x24>
 80044e6:	88fb      	ldrh	r3, [r7, #6]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d101      	bne.n	80044f0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e071      	b.n	80045d4 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2221      	movs	r2, #33	; 0x21
 80044fc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044fe:	f7fd fa27 	bl	8001950 <HAL_GetTick>
 8004502:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	88fa      	ldrh	r2, [r7, #6]
 8004508:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	88fa      	ldrh	r2, [r7, #6]
 8004510:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800451c:	d108      	bne.n	8004530 <HAL_UART_Transmit+0x68>
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	691b      	ldr	r3, [r3, #16]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d104      	bne.n	8004530 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004526:	2300      	movs	r3, #0
 8004528:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	61bb      	str	r3, [r7, #24]
 800452e:	e003      	b.n	8004538 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004534:	2300      	movs	r3, #0
 8004536:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004538:	e030      	b.n	800459c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	9300      	str	r3, [sp, #0]
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	2200      	movs	r2, #0
 8004542:	2180      	movs	r1, #128	; 0x80
 8004544:	68f8      	ldr	r0, [r7, #12]
 8004546:	f000 fb67 	bl	8004c18 <UART_WaitOnFlagUntilTimeout>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d004      	beq.n	800455a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2220      	movs	r2, #32
 8004554:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e03c      	b.n	80045d4 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d10b      	bne.n	8004578 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	881a      	ldrh	r2, [r3, #0]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800456c:	b292      	uxth	r2, r2
 800456e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004570:	69bb      	ldr	r3, [r7, #24]
 8004572:	3302      	adds	r3, #2
 8004574:	61bb      	str	r3, [r7, #24]
 8004576:	e008      	b.n	800458a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	781a      	ldrb	r2, [r3, #0]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	b292      	uxth	r2, r2
 8004582:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	3301      	adds	r3, #1
 8004588:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004590:	b29b      	uxth	r3, r3
 8004592:	3b01      	subs	r3, #1
 8004594:	b29a      	uxth	r2, r3
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d1c8      	bne.n	800453a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	9300      	str	r3, [sp, #0]
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	2200      	movs	r2, #0
 80045b0:	2140      	movs	r1, #64	; 0x40
 80045b2:	68f8      	ldr	r0, [r7, #12]
 80045b4:	f000 fb30 	bl	8004c18 <UART_WaitOnFlagUntilTimeout>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d004      	beq.n	80045c8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2220      	movs	r2, #32
 80045c2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80045c4:	2303      	movs	r3, #3
 80045c6:	e005      	b.n	80045d4 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2220      	movs	r2, #32
 80045cc:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80045ce:	2300      	movs	r3, #0
 80045d0:	e000      	b.n	80045d4 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80045d2:	2302      	movs	r3, #2
  }
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3720      	adds	r7, #32
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b088      	sub	sp, #32
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80045e4:	2300      	movs	r3, #0
 80045e6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	689a      	ldr	r2, [r3, #8]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	691b      	ldr	r3, [r3, #16]
 80045f0:	431a      	orrs	r2, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	695b      	ldr	r3, [r3, #20]
 80045f6:	431a      	orrs	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	69db      	ldr	r3, [r3, #28]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	4b92      	ldr	r3, [pc, #584]	; (8004850 <UART_SetConfig+0x274>)
 8004608:	4013      	ands	r3, r2
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	6812      	ldr	r2, [r2, #0]
 800460e:	6979      	ldr	r1, [r7, #20]
 8004610:	430b      	orrs	r3, r1
 8004612:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	68da      	ldr	r2, [r3, #12]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	430a      	orrs	r2, r1
 8004628:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	699b      	ldr	r3, [r3, #24]
 800462e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6a1b      	ldr	r3, [r3, #32]
 8004634:	697a      	ldr	r2, [r7, #20]
 8004636:	4313      	orrs	r3, r2
 8004638:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	697a      	ldr	r2, [r7, #20]
 800464a:	430a      	orrs	r2, r1
 800464c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a80      	ldr	r2, [pc, #512]	; (8004854 <UART_SetConfig+0x278>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d120      	bne.n	800469a <UART_SetConfig+0xbe>
 8004658:	4b7f      	ldr	r3, [pc, #508]	; (8004858 <UART_SetConfig+0x27c>)
 800465a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465c:	f003 0303 	and.w	r3, r3, #3
 8004660:	2b03      	cmp	r3, #3
 8004662:	d817      	bhi.n	8004694 <UART_SetConfig+0xb8>
 8004664:	a201      	add	r2, pc, #4	; (adr r2, 800466c <UART_SetConfig+0x90>)
 8004666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800466a:	bf00      	nop
 800466c:	0800467d 	.word	0x0800467d
 8004670:	08004689 	.word	0x08004689
 8004674:	0800468f 	.word	0x0800468f
 8004678:	08004683 	.word	0x08004683
 800467c:	2301      	movs	r3, #1
 800467e:	77fb      	strb	r3, [r7, #31]
 8004680:	e0b5      	b.n	80047ee <UART_SetConfig+0x212>
 8004682:	2302      	movs	r3, #2
 8004684:	77fb      	strb	r3, [r7, #31]
 8004686:	e0b2      	b.n	80047ee <UART_SetConfig+0x212>
 8004688:	2304      	movs	r3, #4
 800468a:	77fb      	strb	r3, [r7, #31]
 800468c:	e0af      	b.n	80047ee <UART_SetConfig+0x212>
 800468e:	2308      	movs	r3, #8
 8004690:	77fb      	strb	r3, [r7, #31]
 8004692:	e0ac      	b.n	80047ee <UART_SetConfig+0x212>
 8004694:	2310      	movs	r3, #16
 8004696:	77fb      	strb	r3, [r7, #31]
 8004698:	e0a9      	b.n	80047ee <UART_SetConfig+0x212>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a6f      	ldr	r2, [pc, #444]	; (800485c <UART_SetConfig+0x280>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d124      	bne.n	80046ee <UART_SetConfig+0x112>
 80046a4:	4b6c      	ldr	r3, [pc, #432]	; (8004858 <UART_SetConfig+0x27c>)
 80046a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80046ac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80046b0:	d011      	beq.n	80046d6 <UART_SetConfig+0xfa>
 80046b2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80046b6:	d817      	bhi.n	80046e8 <UART_SetConfig+0x10c>
 80046b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80046bc:	d011      	beq.n	80046e2 <UART_SetConfig+0x106>
 80046be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80046c2:	d811      	bhi.n	80046e8 <UART_SetConfig+0x10c>
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d003      	beq.n	80046d0 <UART_SetConfig+0xf4>
 80046c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046cc:	d006      	beq.n	80046dc <UART_SetConfig+0x100>
 80046ce:	e00b      	b.n	80046e8 <UART_SetConfig+0x10c>
 80046d0:	2300      	movs	r3, #0
 80046d2:	77fb      	strb	r3, [r7, #31]
 80046d4:	e08b      	b.n	80047ee <UART_SetConfig+0x212>
 80046d6:	2302      	movs	r3, #2
 80046d8:	77fb      	strb	r3, [r7, #31]
 80046da:	e088      	b.n	80047ee <UART_SetConfig+0x212>
 80046dc:	2304      	movs	r3, #4
 80046de:	77fb      	strb	r3, [r7, #31]
 80046e0:	e085      	b.n	80047ee <UART_SetConfig+0x212>
 80046e2:	2308      	movs	r3, #8
 80046e4:	77fb      	strb	r3, [r7, #31]
 80046e6:	e082      	b.n	80047ee <UART_SetConfig+0x212>
 80046e8:	2310      	movs	r3, #16
 80046ea:	77fb      	strb	r3, [r7, #31]
 80046ec:	e07f      	b.n	80047ee <UART_SetConfig+0x212>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a5b      	ldr	r2, [pc, #364]	; (8004860 <UART_SetConfig+0x284>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d124      	bne.n	8004742 <UART_SetConfig+0x166>
 80046f8:	4b57      	ldr	r3, [pc, #348]	; (8004858 <UART_SetConfig+0x27c>)
 80046fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046fc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004700:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004704:	d011      	beq.n	800472a <UART_SetConfig+0x14e>
 8004706:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800470a:	d817      	bhi.n	800473c <UART_SetConfig+0x160>
 800470c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004710:	d011      	beq.n	8004736 <UART_SetConfig+0x15a>
 8004712:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004716:	d811      	bhi.n	800473c <UART_SetConfig+0x160>
 8004718:	2b00      	cmp	r3, #0
 800471a:	d003      	beq.n	8004724 <UART_SetConfig+0x148>
 800471c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004720:	d006      	beq.n	8004730 <UART_SetConfig+0x154>
 8004722:	e00b      	b.n	800473c <UART_SetConfig+0x160>
 8004724:	2300      	movs	r3, #0
 8004726:	77fb      	strb	r3, [r7, #31]
 8004728:	e061      	b.n	80047ee <UART_SetConfig+0x212>
 800472a:	2302      	movs	r3, #2
 800472c:	77fb      	strb	r3, [r7, #31]
 800472e:	e05e      	b.n	80047ee <UART_SetConfig+0x212>
 8004730:	2304      	movs	r3, #4
 8004732:	77fb      	strb	r3, [r7, #31]
 8004734:	e05b      	b.n	80047ee <UART_SetConfig+0x212>
 8004736:	2308      	movs	r3, #8
 8004738:	77fb      	strb	r3, [r7, #31]
 800473a:	e058      	b.n	80047ee <UART_SetConfig+0x212>
 800473c:	2310      	movs	r3, #16
 800473e:	77fb      	strb	r3, [r7, #31]
 8004740:	e055      	b.n	80047ee <UART_SetConfig+0x212>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a47      	ldr	r2, [pc, #284]	; (8004864 <UART_SetConfig+0x288>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d124      	bne.n	8004796 <UART_SetConfig+0x1ba>
 800474c:	4b42      	ldr	r3, [pc, #264]	; (8004858 <UART_SetConfig+0x27c>)
 800474e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004750:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004754:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004758:	d011      	beq.n	800477e <UART_SetConfig+0x1a2>
 800475a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800475e:	d817      	bhi.n	8004790 <UART_SetConfig+0x1b4>
 8004760:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004764:	d011      	beq.n	800478a <UART_SetConfig+0x1ae>
 8004766:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800476a:	d811      	bhi.n	8004790 <UART_SetConfig+0x1b4>
 800476c:	2b00      	cmp	r3, #0
 800476e:	d003      	beq.n	8004778 <UART_SetConfig+0x19c>
 8004770:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004774:	d006      	beq.n	8004784 <UART_SetConfig+0x1a8>
 8004776:	e00b      	b.n	8004790 <UART_SetConfig+0x1b4>
 8004778:	2300      	movs	r3, #0
 800477a:	77fb      	strb	r3, [r7, #31]
 800477c:	e037      	b.n	80047ee <UART_SetConfig+0x212>
 800477e:	2302      	movs	r3, #2
 8004780:	77fb      	strb	r3, [r7, #31]
 8004782:	e034      	b.n	80047ee <UART_SetConfig+0x212>
 8004784:	2304      	movs	r3, #4
 8004786:	77fb      	strb	r3, [r7, #31]
 8004788:	e031      	b.n	80047ee <UART_SetConfig+0x212>
 800478a:	2308      	movs	r3, #8
 800478c:	77fb      	strb	r3, [r7, #31]
 800478e:	e02e      	b.n	80047ee <UART_SetConfig+0x212>
 8004790:	2310      	movs	r3, #16
 8004792:	77fb      	strb	r3, [r7, #31]
 8004794:	e02b      	b.n	80047ee <UART_SetConfig+0x212>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a33      	ldr	r2, [pc, #204]	; (8004868 <UART_SetConfig+0x28c>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d124      	bne.n	80047ea <UART_SetConfig+0x20e>
 80047a0:	4b2d      	ldr	r3, [pc, #180]	; (8004858 <UART_SetConfig+0x27c>)
 80047a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80047a8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80047ac:	d011      	beq.n	80047d2 <UART_SetConfig+0x1f6>
 80047ae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80047b2:	d817      	bhi.n	80047e4 <UART_SetConfig+0x208>
 80047b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80047b8:	d011      	beq.n	80047de <UART_SetConfig+0x202>
 80047ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80047be:	d811      	bhi.n	80047e4 <UART_SetConfig+0x208>
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d003      	beq.n	80047cc <UART_SetConfig+0x1f0>
 80047c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047c8:	d006      	beq.n	80047d8 <UART_SetConfig+0x1fc>
 80047ca:	e00b      	b.n	80047e4 <UART_SetConfig+0x208>
 80047cc:	2300      	movs	r3, #0
 80047ce:	77fb      	strb	r3, [r7, #31]
 80047d0:	e00d      	b.n	80047ee <UART_SetConfig+0x212>
 80047d2:	2302      	movs	r3, #2
 80047d4:	77fb      	strb	r3, [r7, #31]
 80047d6:	e00a      	b.n	80047ee <UART_SetConfig+0x212>
 80047d8:	2304      	movs	r3, #4
 80047da:	77fb      	strb	r3, [r7, #31]
 80047dc:	e007      	b.n	80047ee <UART_SetConfig+0x212>
 80047de:	2308      	movs	r3, #8
 80047e0:	77fb      	strb	r3, [r7, #31]
 80047e2:	e004      	b.n	80047ee <UART_SetConfig+0x212>
 80047e4:	2310      	movs	r3, #16
 80047e6:	77fb      	strb	r3, [r7, #31]
 80047e8:	e001      	b.n	80047ee <UART_SetConfig+0x212>
 80047ea:	2310      	movs	r3, #16
 80047ec:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	69db      	ldr	r3, [r3, #28]
 80047f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047f6:	d16b      	bne.n	80048d0 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80047f8:	7ffb      	ldrb	r3, [r7, #31]
 80047fa:	2b08      	cmp	r3, #8
 80047fc:	d838      	bhi.n	8004870 <UART_SetConfig+0x294>
 80047fe:	a201      	add	r2, pc, #4	; (adr r2, 8004804 <UART_SetConfig+0x228>)
 8004800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004804:	08004829 	.word	0x08004829
 8004808:	08004831 	.word	0x08004831
 800480c:	08004839 	.word	0x08004839
 8004810:	08004871 	.word	0x08004871
 8004814:	0800483f 	.word	0x0800483f
 8004818:	08004871 	.word	0x08004871
 800481c:	08004871 	.word	0x08004871
 8004820:	08004871 	.word	0x08004871
 8004824:	08004847 	.word	0x08004847
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004828:	f7ff fb9e 	bl	8003f68 <HAL_RCC_GetPCLK1Freq>
 800482c:	61b8      	str	r0, [r7, #24]
        break;
 800482e:	e024      	b.n	800487a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004830:	f7ff fbbc 	bl	8003fac <HAL_RCC_GetPCLK2Freq>
 8004834:	61b8      	str	r0, [r7, #24]
        break;
 8004836:	e020      	b.n	800487a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004838:	4b0c      	ldr	r3, [pc, #48]	; (800486c <UART_SetConfig+0x290>)
 800483a:	61bb      	str	r3, [r7, #24]
        break;
 800483c:	e01d      	b.n	800487a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800483e:	f7ff fb1d 	bl	8003e7c <HAL_RCC_GetSysClockFreq>
 8004842:	61b8      	str	r0, [r7, #24]
        break;
 8004844:	e019      	b.n	800487a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004846:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800484a:	61bb      	str	r3, [r7, #24]
        break;
 800484c:	e015      	b.n	800487a <UART_SetConfig+0x29e>
 800484e:	bf00      	nop
 8004850:	efff69f3 	.word	0xefff69f3
 8004854:	40013800 	.word	0x40013800
 8004858:	40021000 	.word	0x40021000
 800485c:	40004400 	.word	0x40004400
 8004860:	40004800 	.word	0x40004800
 8004864:	40004c00 	.word	0x40004c00
 8004868:	40005000 	.word	0x40005000
 800486c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8004870:	2300      	movs	r3, #0
 8004872:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	77bb      	strb	r3, [r7, #30]
        break;
 8004878:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d073      	beq.n	8004968 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004880:	69bb      	ldr	r3, [r7, #24]
 8004882:	005a      	lsls	r2, r3, #1
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	085b      	lsrs	r3, r3, #1
 800488a:	441a      	add	r2, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	fbb2 f3f3 	udiv	r3, r2, r3
 8004894:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	2b0f      	cmp	r3, #15
 800489a:	d916      	bls.n	80048ca <UART_SetConfig+0x2ee>
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048a2:	d212      	bcs.n	80048ca <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	f023 030f 	bic.w	r3, r3, #15
 80048ac:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	085b      	lsrs	r3, r3, #1
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	f003 0307 	and.w	r3, r3, #7
 80048b8:	b29a      	uxth	r2, r3
 80048ba:	89fb      	ldrh	r3, [r7, #14]
 80048bc:	4313      	orrs	r3, r2
 80048be:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	89fa      	ldrh	r2, [r7, #14]
 80048c6:	60da      	str	r2, [r3, #12]
 80048c8:	e04e      	b.n	8004968 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	77bb      	strb	r3, [r7, #30]
 80048ce:	e04b      	b.n	8004968 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80048d0:	7ffb      	ldrb	r3, [r7, #31]
 80048d2:	2b08      	cmp	r3, #8
 80048d4:	d827      	bhi.n	8004926 <UART_SetConfig+0x34a>
 80048d6:	a201      	add	r2, pc, #4	; (adr r2, 80048dc <UART_SetConfig+0x300>)
 80048d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048dc:	08004901 	.word	0x08004901
 80048e0:	08004909 	.word	0x08004909
 80048e4:	08004911 	.word	0x08004911
 80048e8:	08004927 	.word	0x08004927
 80048ec:	08004917 	.word	0x08004917
 80048f0:	08004927 	.word	0x08004927
 80048f4:	08004927 	.word	0x08004927
 80048f8:	08004927 	.word	0x08004927
 80048fc:	0800491f 	.word	0x0800491f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004900:	f7ff fb32 	bl	8003f68 <HAL_RCC_GetPCLK1Freq>
 8004904:	61b8      	str	r0, [r7, #24]
        break;
 8004906:	e013      	b.n	8004930 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004908:	f7ff fb50 	bl	8003fac <HAL_RCC_GetPCLK2Freq>
 800490c:	61b8      	str	r0, [r7, #24]
        break;
 800490e:	e00f      	b.n	8004930 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004910:	4b1b      	ldr	r3, [pc, #108]	; (8004980 <UART_SetConfig+0x3a4>)
 8004912:	61bb      	str	r3, [r7, #24]
        break;
 8004914:	e00c      	b.n	8004930 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004916:	f7ff fab1 	bl	8003e7c <HAL_RCC_GetSysClockFreq>
 800491a:	61b8      	str	r0, [r7, #24]
        break;
 800491c:	e008      	b.n	8004930 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800491e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004922:	61bb      	str	r3, [r7, #24]
        break;
 8004924:	e004      	b.n	8004930 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8004926:	2300      	movs	r3, #0
 8004928:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	77bb      	strb	r3, [r7, #30]
        break;
 800492e:	bf00      	nop
    }

    if (pclk != 0U)
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d018      	beq.n	8004968 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	085a      	lsrs	r2, r3, #1
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	441a      	add	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	fbb2 f3f3 	udiv	r3, r2, r3
 8004948:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	2b0f      	cmp	r3, #15
 800494e:	d909      	bls.n	8004964 <UART_SetConfig+0x388>
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004956:	d205      	bcs.n	8004964 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	b29a      	uxth	r2, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	60da      	str	r2, [r3, #12]
 8004962:	e001      	b.n	8004968 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004974:	7fbb      	ldrb	r3, [r7, #30]
}
 8004976:	4618      	mov	r0, r3
 8004978:	3720      	adds	r7, #32
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	007a1200 	.word	0x007a1200

08004984 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004984:	b480      	push	{r7}
 8004986:	b083      	sub	sp, #12
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004990:	f003 0301 	and.w	r3, r3, #1
 8004994:	2b00      	cmp	r3, #0
 8004996:	d00a      	beq.n	80049ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	430a      	orrs	r2, r1
 80049ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b2:	f003 0302 	and.w	r3, r3, #2
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d00a      	beq.n	80049d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	430a      	orrs	r2, r1
 80049ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d4:	f003 0304 	and.w	r3, r3, #4
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d00a      	beq.n	80049f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	430a      	orrs	r2, r1
 80049f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f6:	f003 0308 	and.w	r3, r3, #8
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00a      	beq.n	8004a14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	430a      	orrs	r2, r1
 8004a12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a18:	f003 0310 	and.w	r3, r3, #16
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d00a      	beq.n	8004a36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	430a      	orrs	r2, r1
 8004a34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3a:	f003 0320 	and.w	r3, r3, #32
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00a      	beq.n	8004a58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	430a      	orrs	r2, r1
 8004a56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d01a      	beq.n	8004a9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	430a      	orrs	r2, r1
 8004a78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a82:	d10a      	bne.n	8004a9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	430a      	orrs	r2, r1
 8004a98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d00a      	beq.n	8004abc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	430a      	orrs	r2, r1
 8004aba:	605a      	str	r2, [r3, #4]
  }
}
 8004abc:	bf00      	nop
 8004abe:	370c      	adds	r7, #12
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b098      	sub	sp, #96	; 0x60
 8004acc:	af02      	add	r7, sp, #8
 8004ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ad8:	f7fc ff3a 	bl	8001950 <HAL_GetTick>
 8004adc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0308 	and.w	r3, r3, #8
 8004ae8:	2b08      	cmp	r3, #8
 8004aea:	d12e      	bne.n	8004b4a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004aec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004af0:	9300      	str	r3, [sp, #0]
 8004af2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004af4:	2200      	movs	r2, #0
 8004af6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f000 f88c 	bl	8004c18 <UART_WaitOnFlagUntilTimeout>
 8004b00:	4603      	mov	r3, r0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d021      	beq.n	8004b4a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b0e:	e853 3f00 	ldrex	r3, [r3]
 8004b12:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b1a:	653b      	str	r3, [r7, #80]	; 0x50
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	461a      	mov	r2, r3
 8004b22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b24:	647b      	str	r3, [r7, #68]	; 0x44
 8004b26:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b28:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b2c:	e841 2300 	strex	r3, r2, [r1]
 8004b30:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d1e6      	bne.n	8004b06 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2220      	movs	r2, #32
 8004b3c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e062      	b.n	8004c10 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0304 	and.w	r3, r3, #4
 8004b54:	2b04      	cmp	r3, #4
 8004b56:	d149      	bne.n	8004bec <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b58:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b5c:	9300      	str	r3, [sp, #0]
 8004b5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b60:	2200      	movs	r2, #0
 8004b62:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 f856 	bl	8004c18 <UART_WaitOnFlagUntilTimeout>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d03c      	beq.n	8004bec <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7a:	e853 3f00 	ldrex	r3, [r3]
 8004b7e:	623b      	str	r3, [r7, #32]
   return(result);
 8004b80:	6a3b      	ldr	r3, [r7, #32]
 8004b82:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b90:	633b      	str	r3, [r7, #48]	; 0x30
 8004b92:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b94:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b98:	e841 2300 	strex	r3, r2, [r1]
 8004b9c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d1e6      	bne.n	8004b72 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	3308      	adds	r3, #8
 8004baa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	e853 3f00 	ldrex	r3, [r3]
 8004bb2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f023 0301 	bic.w	r3, r3, #1
 8004bba:	64bb      	str	r3, [r7, #72]	; 0x48
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	3308      	adds	r3, #8
 8004bc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004bc4:	61fa      	str	r2, [r7, #28]
 8004bc6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc8:	69b9      	ldr	r1, [r7, #24]
 8004bca:	69fa      	ldr	r2, [r7, #28]
 8004bcc:	e841 2300 	strex	r3, r2, [r1]
 8004bd0:	617b      	str	r3, [r7, #20]
   return(result);
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d1e5      	bne.n	8004ba4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2220      	movs	r2, #32
 8004bdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004be8:	2303      	movs	r3, #3
 8004bea:	e011      	b.n	8004c10 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2220      	movs	r2, #32
 8004bf0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2220      	movs	r2, #32
 8004bf6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004c0e:	2300      	movs	r3, #0
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3758      	adds	r7, #88	; 0x58
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	60b9      	str	r1, [r7, #8]
 8004c22:	603b      	str	r3, [r7, #0]
 8004c24:	4613      	mov	r3, r2
 8004c26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c28:	e049      	b.n	8004cbe <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c2a:	69bb      	ldr	r3, [r7, #24]
 8004c2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c30:	d045      	beq.n	8004cbe <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c32:	f7fc fe8d 	bl	8001950 <HAL_GetTick>
 8004c36:	4602      	mov	r2, r0
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	69ba      	ldr	r2, [r7, #24]
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d302      	bcc.n	8004c48 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d101      	bne.n	8004c4c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	e048      	b.n	8004cde <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0304 	and.w	r3, r3, #4
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d031      	beq.n	8004cbe <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	69db      	ldr	r3, [r3, #28]
 8004c60:	f003 0308 	and.w	r3, r3, #8
 8004c64:	2b08      	cmp	r3, #8
 8004c66:	d110      	bne.n	8004c8a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2208      	movs	r2, #8
 8004c6e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004c70:	68f8      	ldr	r0, [r7, #12]
 8004c72:	f000 f838 	bl	8004ce6 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2208      	movs	r2, #8
 8004c7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e029      	b.n	8004cde <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	69db      	ldr	r3, [r3, #28]
 8004c90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c98:	d111      	bne.n	8004cbe <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ca2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ca4:	68f8      	ldr	r0, [r7, #12]
 8004ca6:	f000 f81e 	bl	8004ce6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2220      	movs	r2, #32
 8004cae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e00f      	b.n	8004cde <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	69da      	ldr	r2, [r3, #28]
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	68ba      	ldr	r2, [r7, #8]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	bf0c      	ite	eq
 8004cce:	2301      	moveq	r3, #1
 8004cd0:	2300      	movne	r3, #0
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	79fb      	ldrb	r3, [r7, #7]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d0a6      	beq.n	8004c2a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3710      	adds	r7, #16
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}

08004ce6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ce6:	b480      	push	{r7}
 8004ce8:	b095      	sub	sp, #84	; 0x54
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cf6:	e853 3f00 	ldrex	r3, [r3]
 8004cfa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cfe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	461a      	mov	r2, r3
 8004d0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d0c:	643b      	str	r3, [r7, #64]	; 0x40
 8004d0e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d10:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004d12:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d14:	e841 2300 	strex	r3, r2, [r1]
 8004d18:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d1e6      	bne.n	8004cee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	3308      	adds	r3, #8
 8004d26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d28:	6a3b      	ldr	r3, [r7, #32]
 8004d2a:	e853 3f00 	ldrex	r3, [r3]
 8004d2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	f023 0301 	bic.w	r3, r3, #1
 8004d36:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	3308      	adds	r3, #8
 8004d3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d40:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d48:	e841 2300 	strex	r3, r2, [r1]
 8004d4c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d1e5      	bne.n	8004d20 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d118      	bne.n	8004d8e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	e853 3f00 	ldrex	r3, [r3]
 8004d68:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	f023 0310 	bic.w	r3, r3, #16
 8004d70:	647b      	str	r3, [r7, #68]	; 0x44
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	461a      	mov	r2, r3
 8004d78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d7a:	61bb      	str	r3, [r7, #24]
 8004d7c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d7e:	6979      	ldr	r1, [r7, #20]
 8004d80:	69ba      	ldr	r2, [r7, #24]
 8004d82:	e841 2300 	strex	r3, r2, [r1]
 8004d86:	613b      	str	r3, [r7, #16]
   return(result);
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d1e6      	bne.n	8004d5c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2220      	movs	r2, #32
 8004d92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004da2:	bf00      	nop
 8004da4:	3754      	adds	r7, #84	; 0x54
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr
	...

08004db0 <__libc_init_array>:
 8004db0:	b570      	push	{r4, r5, r6, lr}
 8004db2:	4d0d      	ldr	r5, [pc, #52]	; (8004de8 <__libc_init_array+0x38>)
 8004db4:	4c0d      	ldr	r4, [pc, #52]	; (8004dec <__libc_init_array+0x3c>)
 8004db6:	1b64      	subs	r4, r4, r5
 8004db8:	10a4      	asrs	r4, r4, #2
 8004dba:	2600      	movs	r6, #0
 8004dbc:	42a6      	cmp	r6, r4
 8004dbe:	d109      	bne.n	8004dd4 <__libc_init_array+0x24>
 8004dc0:	4d0b      	ldr	r5, [pc, #44]	; (8004df0 <__libc_init_array+0x40>)
 8004dc2:	4c0c      	ldr	r4, [pc, #48]	; (8004df4 <__libc_init_array+0x44>)
 8004dc4:	f000 f87c 	bl	8004ec0 <_init>
 8004dc8:	1b64      	subs	r4, r4, r5
 8004dca:	10a4      	asrs	r4, r4, #2
 8004dcc:	2600      	movs	r6, #0
 8004dce:	42a6      	cmp	r6, r4
 8004dd0:	d105      	bne.n	8004dde <__libc_init_array+0x2e>
 8004dd2:	bd70      	pop	{r4, r5, r6, pc}
 8004dd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dd8:	4798      	blx	r3
 8004dda:	3601      	adds	r6, #1
 8004ddc:	e7ee      	b.n	8004dbc <__libc_init_array+0xc>
 8004dde:	f855 3b04 	ldr.w	r3, [r5], #4
 8004de2:	4798      	blx	r3
 8004de4:	3601      	adds	r6, #1
 8004de6:	e7f2      	b.n	8004dce <__libc_init_array+0x1e>
 8004de8:	08004f74 	.word	0x08004f74
 8004dec:	08004f74 	.word	0x08004f74
 8004df0:	08004f74 	.word	0x08004f74
 8004df4:	08004f78 	.word	0x08004f78

08004df8 <__itoa>:
 8004df8:	1e93      	subs	r3, r2, #2
 8004dfa:	2b22      	cmp	r3, #34	; 0x22
 8004dfc:	b510      	push	{r4, lr}
 8004dfe:	460c      	mov	r4, r1
 8004e00:	d904      	bls.n	8004e0c <__itoa+0x14>
 8004e02:	2300      	movs	r3, #0
 8004e04:	700b      	strb	r3, [r1, #0]
 8004e06:	461c      	mov	r4, r3
 8004e08:	4620      	mov	r0, r4
 8004e0a:	bd10      	pop	{r4, pc}
 8004e0c:	2a0a      	cmp	r2, #10
 8004e0e:	d109      	bne.n	8004e24 <__itoa+0x2c>
 8004e10:	2800      	cmp	r0, #0
 8004e12:	da07      	bge.n	8004e24 <__itoa+0x2c>
 8004e14:	232d      	movs	r3, #45	; 0x2d
 8004e16:	700b      	strb	r3, [r1, #0]
 8004e18:	4240      	negs	r0, r0
 8004e1a:	2101      	movs	r1, #1
 8004e1c:	4421      	add	r1, r4
 8004e1e:	f000 f80d 	bl	8004e3c <__utoa>
 8004e22:	e7f1      	b.n	8004e08 <__itoa+0x10>
 8004e24:	2100      	movs	r1, #0
 8004e26:	e7f9      	b.n	8004e1c <__itoa+0x24>

08004e28 <itoa>:
 8004e28:	f7ff bfe6 	b.w	8004df8 <__itoa>

08004e2c <memset>:
 8004e2c:	4402      	add	r2, r0
 8004e2e:	4603      	mov	r3, r0
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d100      	bne.n	8004e36 <memset+0xa>
 8004e34:	4770      	bx	lr
 8004e36:	f803 1b01 	strb.w	r1, [r3], #1
 8004e3a:	e7f9      	b.n	8004e30 <memset+0x4>

08004e3c <__utoa>:
 8004e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e3e:	4c1f      	ldr	r4, [pc, #124]	; (8004ebc <__utoa+0x80>)
 8004e40:	b08b      	sub	sp, #44	; 0x2c
 8004e42:	4605      	mov	r5, r0
 8004e44:	460b      	mov	r3, r1
 8004e46:	466e      	mov	r6, sp
 8004e48:	f104 0c20 	add.w	ip, r4, #32
 8004e4c:	6820      	ldr	r0, [r4, #0]
 8004e4e:	6861      	ldr	r1, [r4, #4]
 8004e50:	4637      	mov	r7, r6
 8004e52:	c703      	stmia	r7!, {r0, r1}
 8004e54:	3408      	adds	r4, #8
 8004e56:	4564      	cmp	r4, ip
 8004e58:	463e      	mov	r6, r7
 8004e5a:	d1f7      	bne.n	8004e4c <__utoa+0x10>
 8004e5c:	7921      	ldrb	r1, [r4, #4]
 8004e5e:	7139      	strb	r1, [r7, #4]
 8004e60:	1e91      	subs	r1, r2, #2
 8004e62:	6820      	ldr	r0, [r4, #0]
 8004e64:	6038      	str	r0, [r7, #0]
 8004e66:	2922      	cmp	r1, #34	; 0x22
 8004e68:	f04f 0100 	mov.w	r1, #0
 8004e6c:	d904      	bls.n	8004e78 <__utoa+0x3c>
 8004e6e:	7019      	strb	r1, [r3, #0]
 8004e70:	460b      	mov	r3, r1
 8004e72:	4618      	mov	r0, r3
 8004e74:	b00b      	add	sp, #44	; 0x2c
 8004e76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e78:	1e58      	subs	r0, r3, #1
 8004e7a:	4684      	mov	ip, r0
 8004e7c:	fbb5 f7f2 	udiv	r7, r5, r2
 8004e80:	fb02 5617 	mls	r6, r2, r7, r5
 8004e84:	3628      	adds	r6, #40	; 0x28
 8004e86:	446e      	add	r6, sp
 8004e88:	460c      	mov	r4, r1
 8004e8a:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8004e8e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8004e92:	462e      	mov	r6, r5
 8004e94:	42b2      	cmp	r2, r6
 8004e96:	f101 0101 	add.w	r1, r1, #1
 8004e9a:	463d      	mov	r5, r7
 8004e9c:	d9ee      	bls.n	8004e7c <__utoa+0x40>
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	545a      	strb	r2, [r3, r1]
 8004ea2:	1919      	adds	r1, r3, r4
 8004ea4:	1aa5      	subs	r5, r4, r2
 8004ea6:	42aa      	cmp	r2, r5
 8004ea8:	dae3      	bge.n	8004e72 <__utoa+0x36>
 8004eaa:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8004eae:	780e      	ldrb	r6, [r1, #0]
 8004eb0:	7006      	strb	r6, [r0, #0]
 8004eb2:	3201      	adds	r2, #1
 8004eb4:	f801 5901 	strb.w	r5, [r1], #-1
 8004eb8:	e7f4      	b.n	8004ea4 <__utoa+0x68>
 8004eba:	bf00      	nop
 8004ebc:	08004f4c 	.word	0x08004f4c

08004ec0 <_init>:
 8004ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ec2:	bf00      	nop
 8004ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ec6:	bc08      	pop	{r3}
 8004ec8:	469e      	mov	lr, r3
 8004eca:	4770      	bx	lr

08004ecc <_fini>:
 8004ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ece:	bf00      	nop
 8004ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ed2:	bc08      	pop	{r3}
 8004ed4:	469e      	mov	lr, r3
 8004ed6:	4770      	bx	lr
